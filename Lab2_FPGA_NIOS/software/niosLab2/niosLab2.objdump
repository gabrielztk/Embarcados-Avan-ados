
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00004688 memsz 0x00004688 flags r-x
    LOAD off    0x000056a8 vaddr 0x000446a8 paddr 0x000450d4 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006b00 vaddr 0x00045b00 paddr 0x00045b00 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00040020  00040020  000060d4  2**0
                  CONTENTS
  2 .text         00004640  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00044660  00044660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  000446a8  000450d4  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00045b00  00045b00  00006b00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00045b44  00045b44  000060d4  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008d0  00000000  00000000  00006100  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c6c5  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e8c  00000000  00000000  00033095  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b12c  00000000  00000000  0003bf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001250  00000000  00000000  00047050  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000023bf  00000000  00000000  000482a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000597b  00000000  00000000  0004a65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004ffdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000648  00000000  00000000  00050040  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005265e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00052661  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005266d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005266e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0005266f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0005267a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00052685  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00052690  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00052698  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  000526ce  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032529  00000000  00000000  00057559  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040020 l    d  .text	00000000 .text
00044660 l    d  .rodata	00000000 .rodata
000446a8 l    d  .rwdata	00000000 .rwdata
00045b00 l    d  .bss	00000000 .bss
00045b44 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00040068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040280 l     F .text	00000008 __fp_lock
00040294 l     F .text	00000168 __sinit.part.0
000403fc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000446a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00042d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00042e8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00042eb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00042fa4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043084 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043170 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000450d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000435bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000436f0 l     F .text	00000034 alt_dev_reg
0004507c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00043b78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043d58 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00043e84 l     F .text	0000003c alt_get_errno
00043ec0 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042b74 g     F .text	00000058 _isatty_r
00043280 g     F .text	0000007c alt_main
0004010c g     F .text	000000cc _puts_r
00042874 g     F .text	00000064 _lseek_r
000450d4 g       *ABS*	00000000 __flash_rwdata_start
00045b44 g       *ABS*	00000000 __alt_heap_start
00041e28 g     F .text	0000005c __sseek
0004057c g     F .text	00000010 __sinit
00040404 g     F .text	00000068 __sfmoreglue
00043320 g     F .text	00000024 __malloc_unlock
00041574 g     F .text	0000012c memmove
00040568 g     F .text	00000014 _cleanup
000440cc g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042b14 g     F .text	00000060 _fstat_r
00045b0c g     O .bss	00000004 errno
00041da0 g     F .text	00000008 __seofread
00045b14 g     O .bss	00000004 alt_argv
0004d0a8 g       *ABS*	00000000 _gp
0004358c g     F .text	00000030 usleep
00044efc g     O .rwdata	00000180 alt_fd_list
000440f0 g     F .text	00000090 alt_find_dev
00041474 g     F .text	00000100 memcpy
00040288 g     F .text	0000000c _cleanup_r
00043e08 g     F .text	0000007c alt_io_redirect
00044660 g       *ABS*	00000000 __DTOR_END__
000401d8 g     F .text	00000010 puts
00043854 g     F .text	000000ec altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00042cc0 g     F .text	00000064 .hidden __udivsi3
00042fe0 g     F .text	000000a4 isatty
00044328 g     F .text	00000090 alt_icache_flush
00045b08 g     O .bss	00000004 __malloc_top_pad
000405c4 g     F .text	000004bc __sfvwrite_r
00041cf4 g     F .text	00000058 _sbrk_r
00042ab0 g     F .text	00000064 _read_r
000450c8 g     O .rwdata	00000004 alt_max_fd
000420a4 g     F .text	000000f8 _fclose_r
00042434 g     F .text	00000028 fflush
00045b04 g     O .bss	00000004 __malloc_max_sbrked_mem
000431ac g     F .text	000000d4 lseek
000450a8 g     O .rwdata	00000004 _global_impure_ptr
00041790 g     F .text	00000564 _realloc_r
00045b44 g       *ABS*	00000000 __bss_end
0004059c g     F .text	00000014 __fp_lock_all
00044ed4 g     O .rwdata	00000028 alt_dev_null
00043b2c g     F .text	0000004c alt_dcache_flush_all
000450d4 g       *ABS*	00000000 __ram_rwdata_end
000450c0 g     O .rwdata	00000008 alt_dev_list
000435f8 g     F .text	000000f8 write
000446a8 g       *ABS*	00000000 __ram_rodata_end
00042ef4 g     F .text	000000b0 fstat
00042d24 g     F .text	0000005c .hidden __umodsi3
00045b44 g       *ABS*	00000000 end
00044660 g       *ABS*	00000000 __CTOR_LIST__
000649f0 g       *ABS*	00000000 __alt_stack_pointer
00043940 g     F .text	00000094 altera_avalon_jtag_uart_write
0004058c g     F .text	00000004 __sfp_lock_acquire
000413a0 g     F .text	000000d4 memchr
00042578 g     F .text	000002fc _free_r
00044508 g     F .text	00000120 __call_exitprocs
000450b0 g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000004c _start
00043380 g     F .text	000000fc read
00043760 g     F .text	00000034 alt_sys_init
00044478 g     F .text	00000090 __register_exitproc
000446a8 g       *ABS*	00000000 __ram_rwdata_start
00044660 g       *ABS*	00000000 __ram_rodata_start
00045b1c g     O .bss	00000028 __malloc_current_mallinfo
00043794 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00044288 g     F .text	000000a0 alt_get_fd
000439d4 g     F .text	00000158 alt_busy_sleep
0004204c g     F .text	00000058 _close_r
00044400 g     F .text	00000078 memcmp
00045b44 g       *ABS*	00000000 __alt_stack_base
00041ef0 g     F .text	0000015c __swsetup_r
0004046c g     F .text	000000fc __sfp
00044acc g     O .rwdata	00000408 __malloc_av_
00040598 g     F .text	00000004 __sinit_lock_release
00041d4c g     F .text	00000054 __sread
00044180 g     F .text	00000108 alt_find_file
00043bb4 g     F .text	000000a8 alt_dev_llist_insert
000432fc g     F .text	00000024 __malloc_lock
000434d4 g     F .text	000000b8 sbrk
000423d4 g     F .text	00000060 _fflush_r
00045b00 g       *ABS*	00000000 __bss_start
000416a0 g     F .text	000000f0 memset
000400b0 g     F .text	0000005c main
00045b18 g     O .bss	00000004 alt_envp
00045b00 g     O .bss	00000004 __malloc_max_total_mem
000437f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00041e84 g     F .text	00000008 __sclose
000649f0 g       *ABS*	00000000 __alt_heap_limit
0004219c g     F .text	00000010 fclose
00040bc0 g     F .text	000007e0 _malloc_r
000450cc g     O .rwdata	00000004 alt_errno
00040a80 g     F .text	00000098 _fwalk
00042bcc g     F .text	00000080 .hidden __divsi3
0004245c g     F .text	0000011c _malloc_trim_r
00044660 g       *ABS*	00000000 __CTOR_END__
00044660 g       *ABS*	00000000 __flash_rodata_start
00044660 g       *ABS*	00000000 __DTOR_LIST__
0004006c g     F .text	00000044 delay
00043724 g     F .text	0000003c alt_irq_init
0004347c g     F .text	00000058 alt_release_fd
000443b8 g     F .text	00000014 atexit
00041e8c g     F .text	00000064 _write_r
000450ac g     O .rwdata	00000004 _impure_ptr
00045b10 g     O .bss	00000004 alt_argc
000421ac g     F .text	00000228 __sflush_r
00043cc0 g     F .text	00000064 _do_dtors
000405b0 g     F .text	00000014 __fp_unlock_all
000450b8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000428d8 g     F .text	00000098 __swhatbuf_r
000450d4 g       *ABS*	00000000 _edata
00045b44 g       *ABS*	00000000 _end
00040020 g       *ABS*	00000000 __ram_exceptions_end
00041da8 g     F .text	00000080 __swrite
000450b4 g     O .rwdata	00000004 __malloc_trim_threshold
000443cc g     F .text	00000034 exit
00040b18 g     F .text	000000a8 _fwalk_reent
00042c4c g     F .text	00000074 .hidden __modsi3
000649f0 g       *ABS*	00000000 __alt_data_end
00040590 g     F .text	00000004 __sfp_lock_release
00044628 g     F .text	00000038 _exit
00042970 g     F .text	00000140 __smakebuf_r
000401e8 g     F .text	00000098 strlen
00043f78 g     F .text	00000154 open
00043d24 g     F .text	00000034 alt_icache_flush_all
00043c5c g     F .text	00000064 _do_ctors
00042dbc g     F .text	000000d0 close
000430ec g     F .text	00000084 alt_load
00040594 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08400814 	ori	at,at,32
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>

Disassembly of section .text:

00040020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4002c:	00bffd16 	blt	zero,r2,40024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40030:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40034:	ded27c14 	ori	sp,sp,18928
    movhi gp, %hi(_gp)
   40038:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4003c:	d6b42a14 	ori	gp,gp,53416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40040:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40044:	1096c014 	ori	r2,r2,23296

    movhi r3, %hi(__bss_end)
   40048:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4004c:	18d6d114 	ori	r3,r3,23364

    beq r2, r3, 1f
   40050:	10c00326 	beq	r2,r3,40060 <_start+0x40>

0:
    stw zero, (r2)
   40054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4005c:	10fffd36 	bltu	r2,r3,40054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40060:	00430ec0 	call	430ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40064:	00432800 	call	43280 <alt_main>

00040068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40068:	003fff06 	br	40068 <alt_after_alt_main>

0004006c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
   4006c:	defffd04 	addi	sp,sp,-12
   40070:	df000215 	stw	fp,8(sp)
   40074:	df000204 	addi	fp,sp,8
   40078:	e13ffe15 	stw	r4,-8(fp)
      unsigned int delay = 0 ;
   4007c:	e03fff15 	stw	zero,-4(fp)
      while(delay < n){
   40080:	00000306 	br	40090 <delay+0x24>
          delay++;
   40084:	e0bfff17 	ldw	r2,-4(fp)
   40088:	10800044 	addi	r2,r2,1
   4008c:	e0bfff15 	stw	r2,-4(fp)
      while(delay < n){
   40090:	e0bffe17 	ldw	r2,-8(fp)
   40094:	e0ffff17 	ldw	r3,-4(fp)
   40098:	18bffa36 	bltu	r3,r2,40084 <delay+0x18>
      }
}
   4009c:	0001883a 	nop
   400a0:	e037883a 	mov	sp,fp
   400a4:	df000017 	ldw	fp,0(sp)
   400a8:	dec00104 	addi	sp,sp,4
   400ac:	f800283a 	ret

000400b0 <main>:

int main(void){
   400b0:	defffd04 	addi	sp,sp,-12
   400b4:	dfc00215 	stw	ra,8(sp)
   400b8:	df000115 	stw	fp,4(sp)
   400bc:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
   400c0:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
   400c4:	01000134 	movhi	r4,4
   400c8:	21119804 	addi	r4,r4,18016
   400cc:	00401d80 	call	401d8 <puts>

  while(1){
      if (led <= 5){
   400d0:	e0bfff17 	ldw	r2,-4(fp)
   400d4:	108001a8 	cmpgeui	r2,r2,6
   400d8:	10000a1e 	bne	r2,zero,40104 <main+0x54>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
   400dc:	e0bfff17 	ldw	r2,-4(fp)
   400e0:	10c00044 	addi	r3,r2,1
   400e4:	e0ffff15 	stw	r3,-4(fp)
   400e8:	00c00044 	movi	r3,1
   400ec:	1886983a 	sll	r3,r3,r2
   400f0:	00800234 	movhi	r2,8
   400f4:	10c40035 	stwio	r3,4096(r2)
          usleep(50000);
   400f8:	0130d414 	movui	r4,50000
   400fc:	004358c0 	call	4358c <usleep>
   40100:	003ff306 	br	400d0 <main+0x20>
      }
      else{
          led = 0;
   40104:	e03fff15 	stw	zero,-4(fp)
      if (led <= 5){
   40108:	003ff106 	br	400d0 <main+0x20>

0004010c <_puts_r>:
   4010c:	defff504 	addi	sp,sp,-44
   40110:	dc000815 	stw	r16,32(sp)
   40114:	2021883a 	mov	r16,r4
   40118:	2809883a 	mov	r4,r5
   4011c:	dc400915 	stw	r17,36(sp)
   40120:	dfc00a15 	stw	ra,40(sp)
   40124:	2823883a 	mov	r17,r5
   40128:	00401e80 	call	401e8 <strlen>
   4012c:	11000044 	addi	r4,r2,1
   40130:	d8800515 	stw	r2,20(sp)
   40134:	00800044 	movi	r2,1
   40138:	00c00134 	movhi	r3,4
   4013c:	d8800715 	stw	r2,28(sp)
   40140:	d8800404 	addi	r2,sp,16
   40144:	18d19c04 	addi	r3,r3,18032
   40148:	d8800115 	stw	r2,4(sp)
   4014c:	00800084 	movi	r2,2
   40150:	dc400415 	stw	r17,16(sp)
   40154:	d8c00615 	stw	r3,24(sp)
   40158:	d9000315 	stw	r4,12(sp)
   4015c:	d8800215 	stw	r2,8(sp)
   40160:	81400217 	ldw	r5,8(r16)
   40164:	80000226 	beq	r16,zero,40170 <_puts_r+0x64>
   40168:	80800e17 	ldw	r2,56(r16)
   4016c:	10001326 	beq	r2,zero,401bc <_puts_r+0xb0>
   40170:	2880030b 	ldhu	r2,12(r5)
   40174:	10c8000c 	andi	r3,r2,8192
   40178:	1800061e 	bne	r3,zero,40194 <_puts_r+0x88>
   4017c:	28c01917 	ldw	r3,100(r5)
   40180:	0137ffc4 	movi	r4,-8193
   40184:	10880014 	ori	r2,r2,8192
   40188:	1906703a 	and	r3,r3,r4
   4018c:	2880030d 	sth	r2,12(r5)
   40190:	28c01915 	stw	r3,100(r5)
   40194:	d9800104 	addi	r6,sp,4
   40198:	8009883a 	mov	r4,r16
   4019c:	00405c40 	call	405c4 <__sfvwrite_r>
   401a0:	10000b1e 	bne	r2,zero,401d0 <_puts_r+0xc4>
   401a4:	00800284 	movi	r2,10
   401a8:	dfc00a17 	ldw	ra,40(sp)
   401ac:	dc400917 	ldw	r17,36(sp)
   401b0:	dc000817 	ldw	r16,32(sp)
   401b4:	dec00b04 	addi	sp,sp,44
   401b8:	f800283a 	ret
   401bc:	8009883a 	mov	r4,r16
   401c0:	d9400015 	stw	r5,0(sp)
   401c4:	004057c0 	call	4057c <__sinit>
   401c8:	d9400017 	ldw	r5,0(sp)
   401cc:	003fe806 	br	40170 <_puts_r+0x64>
   401d0:	00bfffc4 	movi	r2,-1
   401d4:	003ff406 	br	401a8 <_puts_r+0x9c>

000401d8 <puts>:
   401d8:	00800134 	movhi	r2,4
   401dc:	200b883a 	mov	r5,r4
   401e0:	11142b17 	ldw	r4,20652(r2)
   401e4:	004010c1 	jmpi	4010c <_puts_r>

000401e8 <strlen>:
   401e8:	208000cc 	andi	r2,r4,3
   401ec:	10000926 	beq	r2,zero,40214 <strlen+0x2c>
   401f0:	2005883a 	mov	r2,r4
   401f4:	00000306 	br	40204 <strlen+0x1c>
   401f8:	10800044 	addi	r2,r2,1
   401fc:	10c000cc 	andi	r3,r2,3
   40200:	18000526 	beq	r3,zero,40218 <strlen+0x30>
   40204:	10c00007 	ldb	r3,0(r2)
   40208:	183ffb1e 	bne	r3,zero,401f8 <strlen+0x10>
   4020c:	1105c83a 	sub	r2,r2,r4
   40210:	f800283a 	ret
   40214:	2005883a 	mov	r2,r4
   40218:	11400017 	ldw	r5,0(r2)
   4021c:	01ffbff4 	movhi	r7,65279
   40220:	39ffbfc4 	addi	r7,r7,-257
   40224:	29c7883a 	add	r3,r5,r7
   40228:	01a02074 	movhi	r6,32897
   4022c:	014a303a 	nor	r5,zero,r5
   40230:	1946703a 	and	r3,r3,r5
   40234:	31a02004 	addi	r6,r6,-32640
   40238:	1986703a 	and	r3,r3,r6
   4023c:	1800071e 	bne	r3,zero,4025c <strlen+0x74>
   40240:	11400117 	ldw	r5,4(r2)
   40244:	10800104 	addi	r2,r2,4
   40248:	29c7883a 	add	r3,r5,r7
   4024c:	014a303a 	nor	r5,zero,r5
   40250:	1946703a 	and	r3,r3,r5
   40254:	1986703a 	and	r3,r3,r6
   40258:	183ff926 	beq	r3,zero,40240 <strlen+0x58>
   4025c:	10c00007 	ldb	r3,0(r2)
   40260:	183fea26 	beq	r3,zero,4020c <strlen+0x24>
   40264:	10c00047 	ldb	r3,1(r2)
   40268:	10800044 	addi	r2,r2,1
   4026c:	183fe726 	beq	r3,zero,4020c <strlen+0x24>
   40270:	10c00047 	ldb	r3,1(r2)
   40274:	10800044 	addi	r2,r2,1
   40278:	183ffa1e 	bne	r3,zero,40264 <strlen+0x7c>
   4027c:	003fe306 	br	4020c <strlen+0x24>

00040280 <__fp_lock>:
   40280:	0005883a 	mov	r2,zero
   40284:	f800283a 	ret

00040288 <_cleanup_r>:
   40288:	01400134 	movhi	r5,4
   4028c:	29482904 	addi	r5,r5,8356
   40290:	0040b181 	jmpi	40b18 <_fwalk_reent>

00040294 <__sinit.part.0>:
   40294:	00c00134 	movhi	r3,4
   40298:	20800117 	ldw	r2,4(r4)
   4029c:	18c0a204 	addi	r3,r3,648
   402a0:	20c00f15 	stw	r3,60(r4)
   402a4:	2140bb04 	addi	r5,r4,748
   402a8:	00c000c4 	movi	r3,3
   402ac:	20c0b915 	stw	r3,740(r4)
   402b0:	2140ba15 	stw	r5,744(r4)
   402b4:	2000b815 	stw	zero,736(r4)
   402b8:	10001705 	stb	zero,92(r2)
   402bc:	10001745 	stb	zero,93(r2)
   402c0:	10001785 	stb	zero,94(r2)
   402c4:	100017c5 	stb	zero,95(r2)
   402c8:	10001805 	stb	zero,96(r2)
   402cc:	10001845 	stb	zero,97(r2)
   402d0:	10001885 	stb	zero,98(r2)
   402d4:	100018c5 	stb	zero,99(r2)
   402d8:	00c00104 	movi	r3,4
   402dc:	10c00315 	stw	r3,12(r2)
   402e0:	02000134 	movhi	r8,4
   402e4:	20c00217 	ldw	r3,8(r4)
   402e8:	01c00134 	movhi	r7,4
   402ec:	01800134 	movhi	r6,4
   402f0:	01400134 	movhi	r5,4
   402f4:	42075304 	addi	r8,r8,7500
   402f8:	39c76a04 	addi	r7,r7,7592
   402fc:	31878a04 	addi	r6,r6,7720
   40300:	2947a104 	addi	r5,r5,7812
   40304:	02400074 	movhi	r9,1
   40308:	10001915 	stw	zero,100(r2)
   4030c:	10000015 	stw	zero,0(r2)
   40310:	10000115 	stw	zero,4(r2)
   40314:	10000215 	stw	zero,8(r2)
   40318:	10000415 	stw	zero,16(r2)
   4031c:	10000515 	stw	zero,20(r2)
   40320:	10000615 	stw	zero,24(r2)
   40324:	10800715 	stw	r2,28(r2)
   40328:	12000815 	stw	r8,32(r2)
   4032c:	11c00915 	stw	r7,36(r2)
   40330:	11800a15 	stw	r6,40(r2)
   40334:	11400b15 	stw	r5,44(r2)
   40338:	4a400284 	addi	r9,r9,10
   4033c:	1a400315 	stw	r9,12(r3)
   40340:	18001915 	stw	zero,100(r3)
   40344:	18000015 	stw	zero,0(r3)
   40348:	18000115 	stw	zero,4(r3)
   4034c:	18000215 	stw	zero,8(r3)
   40350:	18000415 	stw	zero,16(r3)
   40354:	18001705 	stb	zero,92(r3)
   40358:	18001745 	stb	zero,93(r3)
   4035c:	18001785 	stb	zero,94(r3)
   40360:	180017c5 	stb	zero,95(r3)
   40364:	18001805 	stb	zero,96(r3)
   40368:	18001845 	stb	zero,97(r3)
   4036c:	18001885 	stb	zero,98(r3)
   40370:	180018c5 	stb	zero,99(r3)
   40374:	20800317 	ldw	r2,12(r4)
   40378:	024000b4 	movhi	r9,2
   4037c:	18000515 	stw	zero,20(r3)
   40380:	18000615 	stw	zero,24(r3)
   40384:	18c00715 	stw	r3,28(r3)
   40388:	1a000815 	stw	r8,32(r3)
   4038c:	19c00915 	stw	r7,36(r3)
   40390:	19800a15 	stw	r6,40(r3)
   40394:	19400b15 	stw	r5,44(r3)
   40398:	4a400484 	addi	r9,r9,18
   4039c:	10001915 	stw	zero,100(r2)
   403a0:	10000015 	stw	zero,0(r2)
   403a4:	10000115 	stw	zero,4(r2)
   403a8:	10000215 	stw	zero,8(r2)
   403ac:	12400315 	stw	r9,12(r2)
   403b0:	10000415 	stw	zero,16(r2)
   403b4:	10000515 	stw	zero,20(r2)
   403b8:	10000615 	stw	zero,24(r2)
   403bc:	10001705 	stb	zero,92(r2)
   403c0:	10001745 	stb	zero,93(r2)
   403c4:	10001785 	stb	zero,94(r2)
   403c8:	100017c5 	stb	zero,95(r2)
   403cc:	10001805 	stb	zero,96(r2)
   403d0:	10001845 	stb	zero,97(r2)
   403d4:	10001885 	stb	zero,98(r2)
   403d8:	100018c5 	stb	zero,99(r2)
   403dc:	10800715 	stw	r2,28(r2)
   403e0:	12000815 	stw	r8,32(r2)
   403e4:	11c00915 	stw	r7,36(r2)
   403e8:	11800a15 	stw	r6,40(r2)
   403ec:	11400b15 	stw	r5,44(r2)
   403f0:	00800044 	movi	r2,1
   403f4:	20800e15 	stw	r2,56(r4)
   403f8:	f800283a 	ret

000403fc <__fp_unlock>:
   403fc:	0005883a 	mov	r2,zero
   40400:	f800283a 	ret

00040404 <__sfmoreglue>:
   40404:	defffc04 	addi	sp,sp,-16
   40408:	dc400115 	stw	r17,4(sp)
   4040c:	2c7fffc4 	addi	r17,r5,-1
   40410:	8c401a24 	muli	r17,r17,104
   40414:	dc800215 	stw	r18,8(sp)
   40418:	2825883a 	mov	r18,r5
   4041c:	89401d04 	addi	r5,r17,116
   40420:	dc000015 	stw	r16,0(sp)
   40424:	dfc00315 	stw	ra,12(sp)
   40428:	0040bc00 	call	40bc0 <_malloc_r>
   4042c:	1021883a 	mov	r16,r2
   40430:	10000726 	beq	r2,zero,40450 <__sfmoreglue+0x4c>
   40434:	11000304 	addi	r4,r2,12
   40438:	10000015 	stw	zero,0(r2)
   4043c:	14800115 	stw	r18,4(r2)
   40440:	11000215 	stw	r4,8(r2)
   40444:	89801a04 	addi	r6,r17,104
   40448:	000b883a 	mov	r5,zero
   4044c:	00416a00 	call	416a0 <memset>
   40450:	8005883a 	mov	r2,r16
   40454:	dfc00317 	ldw	ra,12(sp)
   40458:	dc800217 	ldw	r18,8(sp)
   4045c:	dc400117 	ldw	r17,4(sp)
   40460:	dc000017 	ldw	r16,0(sp)
   40464:	dec00404 	addi	sp,sp,16
   40468:	f800283a 	ret

0004046c <__sfp>:
   4046c:	defffd04 	addi	sp,sp,-12
   40470:	00800134 	movhi	r2,4
   40474:	dc000015 	stw	r16,0(sp)
   40478:	14142a17 	ldw	r16,20648(r2)
   4047c:	dc400115 	stw	r17,4(sp)
   40480:	dfc00215 	stw	ra,8(sp)
   40484:	80800e17 	ldw	r2,56(r16)
   40488:	2023883a 	mov	r17,r4
   4048c:	10002b26 	beq	r2,zero,4053c <__sfp+0xd0>
   40490:	8400b804 	addi	r16,r16,736
   40494:	80c00117 	ldw	r3,4(r16)
   40498:	80800217 	ldw	r2,8(r16)
   4049c:	18ffffc4 	addi	r3,r3,-1
   404a0:	1800030e 	bge	r3,zero,404b0 <__sfp+0x44>
   404a4:	00002106 	br	4052c <__sfp+0xc0>
   404a8:	10801a04 	addi	r2,r2,104
   404ac:	30001f26 	beq	r6,zero,4052c <__sfp+0xc0>
   404b0:	1140030f 	ldh	r5,12(r2)
   404b4:	18ffffc4 	addi	r3,r3,-1
   404b8:	19bfffd8 	cmpnei	r6,r3,-1
   404bc:	283ffa1e 	bne	r5,zero,404a8 <__sfp+0x3c>
   404c0:	00fffff4 	movhi	r3,65535
   404c4:	18c00044 	addi	r3,r3,1
   404c8:	10001915 	stw	zero,100(r2)
   404cc:	10000015 	stw	zero,0(r2)
   404d0:	10000115 	stw	zero,4(r2)
   404d4:	10000215 	stw	zero,8(r2)
   404d8:	10c00315 	stw	r3,12(r2)
   404dc:	10000415 	stw	zero,16(r2)
   404e0:	10000515 	stw	zero,20(r2)
   404e4:	10000615 	stw	zero,24(r2)
   404e8:	10001705 	stb	zero,92(r2)
   404ec:	10001745 	stb	zero,93(r2)
   404f0:	10001785 	stb	zero,94(r2)
   404f4:	100017c5 	stb	zero,95(r2)
   404f8:	10001805 	stb	zero,96(r2)
   404fc:	10001845 	stb	zero,97(r2)
   40500:	10001885 	stb	zero,98(r2)
   40504:	100018c5 	stb	zero,99(r2)
   40508:	10000c15 	stw	zero,48(r2)
   4050c:	10000d15 	stw	zero,52(r2)
   40510:	10001115 	stw	zero,68(r2)
   40514:	10001215 	stw	zero,72(r2)
   40518:	dfc00217 	ldw	ra,8(sp)
   4051c:	dc400117 	ldw	r17,4(sp)
   40520:	dc000017 	ldw	r16,0(sp)
   40524:	dec00304 	addi	sp,sp,12
   40528:	f800283a 	ret
   4052c:	80800017 	ldw	r2,0(r16)
   40530:	10000526 	beq	r2,zero,40548 <__sfp+0xdc>
   40534:	1021883a 	mov	r16,r2
   40538:	003fd606 	br	40494 <__sfp+0x28>
   4053c:	8009883a 	mov	r4,r16
   40540:	00402940 	call	40294 <__sinit.part.0>
   40544:	003fd206 	br	40490 <__sfp+0x24>
   40548:	01400104 	movi	r5,4
   4054c:	8809883a 	mov	r4,r17
   40550:	00404040 	call	40404 <__sfmoreglue>
   40554:	80800015 	stw	r2,0(r16)
   40558:	103ff61e 	bne	r2,zero,40534 <__sfp+0xc8>
   4055c:	00c00304 	movi	r3,12
   40560:	88c00015 	stw	r3,0(r17)
   40564:	003fec06 	br	40518 <__sfp+0xac>

00040568 <_cleanup>:
   40568:	00800134 	movhi	r2,4
   4056c:	11142a17 	ldw	r4,20648(r2)
   40570:	01400134 	movhi	r5,4
   40574:	29482904 	addi	r5,r5,8356
   40578:	0040b181 	jmpi	40b18 <_fwalk_reent>

0004057c <__sinit>:
   4057c:	20800e17 	ldw	r2,56(r4)
   40580:	10000126 	beq	r2,zero,40588 <__sinit+0xc>
   40584:	f800283a 	ret
   40588:	00402941 	jmpi	40294 <__sinit.part.0>

0004058c <__sfp_lock_acquire>:
   4058c:	f800283a 	ret

00040590 <__sfp_lock_release>:
   40590:	f800283a 	ret

00040594 <__sinit_lock_acquire>:
   40594:	f800283a 	ret

00040598 <__sinit_lock_release>:
   40598:	f800283a 	ret

0004059c <__fp_lock_all>:
   4059c:	00800134 	movhi	r2,4
   405a0:	11142b17 	ldw	r4,20652(r2)
   405a4:	01400134 	movhi	r5,4
   405a8:	2940a004 	addi	r5,r5,640
   405ac:	0040a801 	jmpi	40a80 <_fwalk>

000405b0 <__fp_unlock_all>:
   405b0:	00800134 	movhi	r2,4
   405b4:	11142b17 	ldw	r4,20652(r2)
   405b8:	01400134 	movhi	r5,4
   405bc:	2940ff04 	addi	r5,r5,1020
   405c0:	0040a801 	jmpi	40a80 <_fwalk>

000405c4 <__sfvwrite_r>:
   405c4:	30800217 	ldw	r2,8(r6)
   405c8:	1000c726 	beq	r2,zero,408e8 <__sfvwrite_r+0x324>
   405cc:	29c0030b 	ldhu	r7,12(r5)
   405d0:	defff404 	addi	sp,sp,-48
   405d4:	dd800815 	stw	r22,32(sp)
   405d8:	dd400715 	stw	r21,28(sp)
   405dc:	dc000215 	stw	r16,8(sp)
   405e0:	dfc00b15 	stw	ra,44(sp)
   405e4:	df000a15 	stw	fp,40(sp)
   405e8:	ddc00915 	stw	r23,36(sp)
   405ec:	dd000615 	stw	r20,24(sp)
   405f0:	dcc00515 	stw	r19,20(sp)
   405f4:	dc800415 	stw	r18,16(sp)
   405f8:	dc400315 	stw	r17,12(sp)
   405fc:	3880020c 	andi	r2,r7,8
   40600:	302d883a 	mov	r22,r6
   40604:	202b883a 	mov	r21,r4
   40608:	2821883a 	mov	r16,r5
   4060c:	10002226 	beq	r2,zero,40698 <__sfvwrite_r+0xd4>
   40610:	28800417 	ldw	r2,16(r5)
   40614:	10002026 	beq	r2,zero,40698 <__sfvwrite_r+0xd4>
   40618:	3880008c 	andi	r2,r7,2
   4061c:	b4400017 	ldw	r17,0(r22)
   40620:	10002526 	beq	r2,zero,406b8 <__sfvwrite_r+0xf4>
   40624:	80800917 	ldw	r2,36(r16)
   40628:	81400717 	ldw	r5,28(r16)
   4062c:	05200034 	movhi	r20,32768
   40630:	0027883a 	mov	r19,zero
   40634:	0025883a 	mov	r18,zero
   40638:	a53f0004 	addi	r20,r20,-1024
   4063c:	980d883a 	mov	r6,r19
   40640:	a809883a 	mov	r4,r21
   40644:	90001026 	beq	r18,zero,40688 <__sfvwrite_r+0xc4>
   40648:	900f883a 	mov	r7,r18
   4064c:	a480012e 	bgeu	r20,r18,40654 <__sfvwrite_r+0x90>
   40650:	a00f883a 	mov	r7,r20
   40654:	103ee83a 	callr	r2
   40658:	00809e0e 	bge	zero,r2,408d4 <__sfvwrite_r+0x310>
   4065c:	b1000217 	ldw	r4,8(r22)
   40660:	98a7883a 	add	r19,r19,r2
   40664:	90a5c83a 	sub	r18,r18,r2
   40668:	2085c83a 	sub	r2,r4,r2
   4066c:	b0800215 	stw	r2,8(r22)
   40670:	10006226 	beq	r2,zero,407fc <__sfvwrite_r+0x238>
   40674:	80800917 	ldw	r2,36(r16)
   40678:	81400717 	ldw	r5,28(r16)
   4067c:	980d883a 	mov	r6,r19
   40680:	a809883a 	mov	r4,r21
   40684:	903ff01e 	bne	r18,zero,40648 <__sfvwrite_r+0x84>
   40688:	8cc00017 	ldw	r19,0(r17)
   4068c:	8c800117 	ldw	r18,4(r17)
   40690:	8c400204 	addi	r17,r17,8
   40694:	003fe906 	br	4063c <__sfvwrite_r+0x78>
   40698:	800b883a 	mov	r5,r16
   4069c:	a809883a 	mov	r4,r21
   406a0:	0041ef00 	call	41ef0 <__swsetup_r>
   406a4:	1000f41e 	bne	r2,zero,40a78 <__sfvwrite_r+0x4b4>
   406a8:	81c0030b 	ldhu	r7,12(r16)
   406ac:	b4400017 	ldw	r17,0(r22)
   406b0:	3880008c 	andi	r2,r7,2
   406b4:	103fdb1e 	bne	r2,zero,40624 <__sfvwrite_r+0x60>
   406b8:	3880004c 	andi	r2,r7,1
   406bc:	84800217 	ldw	r18,8(r16)
   406c0:	82000017 	ldw	r8,0(r16)
   406c4:	10008a1e 	bne	r2,zero,408f0 <__sfvwrite_r+0x32c>
   406c8:	00a00034 	movhi	r2,32768
   406cc:	10bfff84 	addi	r2,r2,-2
   406d0:	00e00034 	movhi	r3,32768
   406d4:	d8800015 	stw	r2,0(sp)
   406d8:	18bfffc4 	addi	r2,r3,-1
   406dc:	0039883a 	mov	fp,zero
   406e0:	0027883a 	mov	r19,zero
   406e4:	d8800115 	stw	r2,4(sp)
   406e8:	98004026 	beq	r19,zero,407ec <__sfvwrite_r+0x228>
   406ec:	3880800c 	andi	r2,r7,512
   406f0:	10009226 	beq	r2,zero,4093c <__sfvwrite_r+0x378>
   406f4:	902f883a 	mov	r23,r18
   406f8:	9c80b636 	bltu	r19,r18,409d4 <__sfvwrite_r+0x410>
   406fc:	3881200c 	andi	r2,r7,1152
   40700:	10002526 	beq	r2,zero,40798 <__sfvwrite_r+0x1d4>
   40704:	81000517 	ldw	r4,20(r16)
   40708:	81400417 	ldw	r5,16(r16)
   4070c:	98800044 	addi	r2,r19,1
   40710:	210000e4 	muli	r4,r4,3
   40714:	4165c83a 	sub	r18,r8,r5
   40718:	1485883a 	add	r2,r2,r18
   4071c:	2028d7fa 	srli	r20,r4,31
   40720:	a109883a 	add	r4,r20,r4
   40724:	2029d07a 	srai	r20,r4,1
   40728:	a00d883a 	mov	r6,r20
   4072c:	a080022e 	bgeu	r20,r2,40738 <__sfvwrite_r+0x174>
   40730:	1029883a 	mov	r20,r2
   40734:	100d883a 	mov	r6,r2
   40738:	39c1000c 	andi	r7,r7,1024
   4073c:	3800be26 	beq	r7,zero,40a38 <__sfvwrite_r+0x474>
   40740:	a809883a 	mov	r4,r21
   40744:	300b883a 	mov	r5,r6
   40748:	0040bc00 	call	40bc0 <_malloc_r>
   4074c:	1009883a 	mov	r4,r2
   40750:	1000c526 	beq	r2,zero,40a68 <__sfvwrite_r+0x4a4>
   40754:	81400417 	ldw	r5,16(r16)
   40758:	900d883a 	mov	r6,r18
   4075c:	00414740 	call	41474 <memcpy>
   40760:	1009883a 	mov	r4,r2
   40764:	8080030b 	ldhu	r2,12(r16)
   40768:	00fedfc4 	movi	r3,-1153
   4076c:	10c4703a 	and	r2,r2,r3
   40770:	10802014 	ori	r2,r2,128
   40774:	8080030d 	sth	r2,12(r16)
   40778:	2491883a 	add	r8,r4,r18
   4077c:	a485c83a 	sub	r2,r20,r18
   40780:	81000415 	stw	r4,16(r16)
   40784:	82000015 	stw	r8,0(r16)
   40788:	85000515 	stw	r20,20(r16)
   4078c:	9825883a 	mov	r18,r19
   40790:	80800215 	stw	r2,8(r16)
   40794:	982f883a 	mov	r23,r19
   40798:	4009883a 	mov	r4,r8
   4079c:	b80d883a 	mov	r6,r23
   407a0:	e00b883a 	mov	r5,fp
   407a4:	00415740 	call	41574 <memmove>
   407a8:	81000217 	ldw	r4,8(r16)
   407ac:	80800017 	ldw	r2,0(r16)
   407b0:	9829883a 	mov	r20,r19
   407b4:	24a5c83a 	sub	r18,r4,r18
   407b8:	15c5883a 	add	r2,r2,r23
   407bc:	84800215 	stw	r18,8(r16)
   407c0:	80800015 	stw	r2,0(r16)
   407c4:	0027883a 	mov	r19,zero
   407c8:	b0800217 	ldw	r2,8(r22)
   407cc:	e539883a 	add	fp,fp,r20
   407d0:	1529c83a 	sub	r20,r2,r20
   407d4:	b5000215 	stw	r20,8(r22)
   407d8:	a0000826 	beq	r20,zero,407fc <__sfvwrite_r+0x238>
   407dc:	81c0030b 	ldhu	r7,12(r16)
   407e0:	84800217 	ldw	r18,8(r16)
   407e4:	82000017 	ldw	r8,0(r16)
   407e8:	983fc01e 	bne	r19,zero,406ec <__sfvwrite_r+0x128>
   407ec:	8f000017 	ldw	fp,0(r17)
   407f0:	8cc00117 	ldw	r19,4(r17)
   407f4:	8c400204 	addi	r17,r17,8
   407f8:	003fbb06 	br	406e8 <__sfvwrite_r+0x124>
   407fc:	0005883a 	mov	r2,zero
   40800:	dfc00b17 	ldw	ra,44(sp)
   40804:	df000a17 	ldw	fp,40(sp)
   40808:	ddc00917 	ldw	r23,36(sp)
   4080c:	dd800817 	ldw	r22,32(sp)
   40810:	dd400717 	ldw	r21,28(sp)
   40814:	dd000617 	ldw	r20,24(sp)
   40818:	dcc00517 	ldw	r19,20(sp)
   4081c:	dc800417 	ldw	r18,16(sp)
   40820:	dc400317 	ldw	r17,12(sp)
   40824:	dc000217 	ldw	r16,8(sp)
   40828:	dec00c04 	addi	sp,sp,48
   4082c:	f800283a 	ret
   40830:	e1c07016 	blt	fp,r7,409f4 <__sfvwrite_r+0x430>
   40834:	80800917 	ldw	r2,36(r16)
   40838:	81400717 	ldw	r5,28(r16)
   4083c:	b80d883a 	mov	r6,r23
   40840:	a809883a 	mov	r4,r21
   40844:	103ee83a 	callr	r2
   40848:	1025883a 	mov	r18,r2
   4084c:	0080210e 	bge	zero,r2,408d4 <__sfvwrite_r+0x310>
   40850:	a4a9c83a 	sub	r20,r20,r18
   40854:	a0006226 	beq	r20,zero,409e0 <__sfvwrite_r+0x41c>
   40858:	00800044 	movi	r2,1
   4085c:	b1800217 	ldw	r6,8(r22)
   40860:	bcaf883a 	add	r23,r23,r18
   40864:	9ca7c83a 	sub	r19,r19,r18
   40868:	34a5c83a 	sub	r18,r6,r18
   4086c:	b4800215 	stw	r18,8(r22)
   40870:	903fe226 	beq	r18,zero,407fc <__sfvwrite_r+0x238>
   40874:	84800217 	ldw	r18,8(r16)
   40878:	82000017 	ldw	r8,0(r16)
   4087c:	98002126 	beq	r19,zero,40904 <__sfvwrite_r+0x340>
   40880:	10002426 	beq	r2,zero,40914 <__sfvwrite_r+0x350>
   40884:	a005883a 	mov	r2,r20
   40888:	9839883a 	mov	fp,r19
   4088c:	14c0012e 	bgeu	r2,r19,40894 <__sfvwrite_r+0x2d0>
   40890:	1039883a 	mov	fp,r2
   40894:	80800417 	ldw	r2,16(r16)
   40898:	81c00517 	ldw	r7,20(r16)
   4089c:	123fe42e 	bgeu	r2,r8,40830 <__sfvwrite_r+0x26c>
   408a0:	3ca5883a 	add	r18,r7,r18
   408a4:	973fe20e 	bge	r18,fp,40830 <__sfvwrite_r+0x26c>
   408a8:	b80b883a 	mov	r5,r23
   408ac:	4009883a 	mov	r4,r8
   408b0:	900d883a 	mov	r6,r18
   408b4:	00415740 	call	41574 <memmove>
   408b8:	80800017 	ldw	r2,0(r16)
   408bc:	800b883a 	mov	r5,r16
   408c0:	a809883a 	mov	r4,r21
   408c4:	1485883a 	add	r2,r2,r18
   408c8:	80800015 	stw	r2,0(r16)
   408cc:	00423d40 	call	423d4 <_fflush_r>
   408d0:	103fdf26 	beq	r2,zero,40850 <__sfvwrite_r+0x28c>
   408d4:	8080030b 	ldhu	r2,12(r16)
   408d8:	10801014 	ori	r2,r2,64
   408dc:	8080030d 	sth	r2,12(r16)
   408e0:	00bfffc4 	movi	r2,-1
   408e4:	003fc606 	br	40800 <__sfvwrite_r+0x23c>
   408e8:	0005883a 	mov	r2,zero
   408ec:	f800283a 	ret
   408f0:	0027883a 	mov	r19,zero
   408f4:	0029883a 	mov	r20,zero
   408f8:	0005883a 	mov	r2,zero
   408fc:	002f883a 	mov	r23,zero
   40900:	983fdf1e 	bne	r19,zero,40880 <__sfvwrite_r+0x2bc>
   40904:	8cc00117 	ldw	r19,4(r17)
   40908:	8dc00017 	ldw	r23,0(r17)
   4090c:	8c400204 	addi	r17,r17,8
   40910:	983ffc26 	beq	r19,zero,40904 <__sfvwrite_r+0x340>
   40914:	980d883a 	mov	r6,r19
   40918:	01400284 	movi	r5,10
   4091c:	b809883a 	mov	r4,r23
   40920:	da000015 	stw	r8,0(sp)
   40924:	00413a00 	call	413a0 <memchr>
   40928:	da000017 	ldw	r8,0(sp)
   4092c:	10003f26 	beq	r2,zero,40a2c <__sfvwrite_r+0x468>
   40930:	10800044 	addi	r2,r2,1
   40934:	15e9c83a 	sub	r20,r2,r23
   40938:	003fd206 	br	40884 <__sfvwrite_r+0x2c0>
   4093c:	80800417 	ldw	r2,16(r16)
   40940:	12001136 	bltu	r2,r8,40988 <__sfvwrite_r+0x3c4>
   40944:	85000517 	ldw	r20,20(r16)
   40948:	9d000f36 	bltu	r19,r20,40988 <__sfvwrite_r+0x3c4>
   4094c:	d8800017 	ldw	r2,0(sp)
   40950:	14c0342e 	bgeu	r2,r19,40a24 <__sfvwrite_r+0x460>
   40954:	d9000117 	ldw	r4,4(sp)
   40958:	a00b883a 	mov	r5,r20
   4095c:	0042bcc0 	call	42bcc <__divsi3>
   40960:	150f383a 	mul	r7,r2,r20
   40964:	82000917 	ldw	r8,36(r16)
   40968:	81400717 	ldw	r5,28(r16)
   4096c:	e00d883a 	mov	r6,fp
   40970:	a809883a 	mov	r4,r21
   40974:	403ee83a 	callr	r8
   40978:	1029883a 	mov	r20,r2
   4097c:	00bfd50e 	bge	zero,r2,408d4 <__sfvwrite_r+0x310>
   40980:	9d27c83a 	sub	r19,r19,r20
   40984:	003f9006 	br	407c8 <__sfvwrite_r+0x204>
   40988:	9029883a 	mov	r20,r18
   4098c:	9c80012e 	bgeu	r19,r18,40994 <__sfvwrite_r+0x3d0>
   40990:	9829883a 	mov	r20,r19
   40994:	4009883a 	mov	r4,r8
   40998:	a00d883a 	mov	r6,r20
   4099c:	e00b883a 	mov	r5,fp
   409a0:	00415740 	call	41574 <memmove>
   409a4:	80800217 	ldw	r2,8(r16)
   409a8:	81000017 	ldw	r4,0(r16)
   409ac:	1505c83a 	sub	r2,r2,r20
   409b0:	2509883a 	add	r4,r4,r20
   409b4:	80800215 	stw	r2,8(r16)
   409b8:	81000015 	stw	r4,0(r16)
   409bc:	103ff01e 	bne	r2,zero,40980 <__sfvwrite_r+0x3bc>
   409c0:	800b883a 	mov	r5,r16
   409c4:	a809883a 	mov	r4,r21
   409c8:	00423d40 	call	423d4 <_fflush_r>
   409cc:	103fec26 	beq	r2,zero,40980 <__sfvwrite_r+0x3bc>
   409d0:	003fc006 	br	408d4 <__sfvwrite_r+0x310>
   409d4:	9825883a 	mov	r18,r19
   409d8:	982f883a 	mov	r23,r19
   409dc:	003f6e06 	br	40798 <__sfvwrite_r+0x1d4>
   409e0:	800b883a 	mov	r5,r16
   409e4:	a809883a 	mov	r4,r21
   409e8:	00423d40 	call	423d4 <_fflush_r>
   409ec:	103f9b26 	beq	r2,zero,4085c <__sfvwrite_r+0x298>
   409f0:	003fb806 	br	408d4 <__sfvwrite_r+0x310>
   409f4:	e00d883a 	mov	r6,fp
   409f8:	b80b883a 	mov	r5,r23
   409fc:	4009883a 	mov	r4,r8
   40a00:	00415740 	call	41574 <memmove>
   40a04:	80800217 	ldw	r2,8(r16)
   40a08:	81800017 	ldw	r6,0(r16)
   40a0c:	e025883a 	mov	r18,fp
   40a10:	1705c83a 	sub	r2,r2,fp
   40a14:	370d883a 	add	r6,r6,fp
   40a18:	80800215 	stw	r2,8(r16)
   40a1c:	81800015 	stw	r6,0(r16)
   40a20:	003f8b06 	br	40850 <__sfvwrite_r+0x28c>
   40a24:	9809883a 	mov	r4,r19
   40a28:	003fcb06 	br	40958 <__sfvwrite_r+0x394>
   40a2c:	98800044 	addi	r2,r19,1
   40a30:	1029883a 	mov	r20,r2
   40a34:	003f9406 	br	40888 <__sfvwrite_r+0x2c4>
   40a38:	a809883a 	mov	r4,r21
   40a3c:	00417900 	call	41790 <_realloc_r>
   40a40:	1009883a 	mov	r4,r2
   40a44:	103f4c1e 	bne	r2,zero,40778 <__sfvwrite_r+0x1b4>
   40a48:	81400417 	ldw	r5,16(r16)
   40a4c:	a809883a 	mov	r4,r21
   40a50:	00425780 	call	42578 <_free_r>
   40a54:	8080030b 	ldhu	r2,12(r16)
   40a58:	00c00304 	movi	r3,12
   40a5c:	a8c00015 	stw	r3,0(r21)
   40a60:	10bfdfcc 	andi	r2,r2,65407
   40a64:	003f9c06 	br	408d8 <__sfvwrite_r+0x314>
   40a68:	00c00304 	movi	r3,12
   40a6c:	8080030b 	ldhu	r2,12(r16)
   40a70:	a8c00015 	stw	r3,0(r21)
   40a74:	003f9806 	br	408d8 <__sfvwrite_r+0x314>
   40a78:	00bfffc4 	movi	r2,-1
   40a7c:	003f6006 	br	40800 <__sfvwrite_r+0x23c>

00040a80 <_fwalk>:
   40a80:	defffa04 	addi	sp,sp,-24
   40a84:	dd000415 	stw	r20,16(sp)
   40a88:	dcc00315 	stw	r19,12(sp)
   40a8c:	dc800215 	stw	r18,8(sp)
   40a90:	dfc00515 	stw	ra,20(sp)
   40a94:	dc400115 	stw	r17,4(sp)
   40a98:	dc000015 	stw	r16,0(sp)
   40a9c:	2827883a 	mov	r19,r5
   40aa0:	2480b804 	addi	r18,r4,736
   40aa4:	0029883a 	mov	r20,zero
   40aa8:	94400117 	ldw	r17,4(r18)
   40aac:	94000217 	ldw	r16,8(r18)
   40ab0:	8c7fffc4 	addi	r17,r17,-1
   40ab4:	88000d16 	blt	r17,zero,40aec <_fwalk+0x6c>
   40ab8:	8080030b 	ldhu	r2,12(r16)
   40abc:	8c7fffc4 	addi	r17,r17,-1
   40ac0:	108000b0 	cmpltui	r2,r2,2
   40ac4:	1000061e 	bne	r2,zero,40ae0 <_fwalk+0x60>
   40ac8:	8080038f 	ldh	r2,14(r16)
   40acc:	8009883a 	mov	r4,r16
   40ad0:	10bfffe0 	cmpeqi	r2,r2,-1
   40ad4:	1000021e 	bne	r2,zero,40ae0 <_fwalk+0x60>
   40ad8:	983ee83a 	callr	r19
   40adc:	a0a8b03a 	or	r20,r20,r2
   40ae0:	88bfffd8 	cmpnei	r2,r17,-1
   40ae4:	84001a04 	addi	r16,r16,104
   40ae8:	103ff31e 	bne	r2,zero,40ab8 <_fwalk+0x38>
   40aec:	94800017 	ldw	r18,0(r18)
   40af0:	903fed1e 	bne	r18,zero,40aa8 <_fwalk+0x28>
   40af4:	a005883a 	mov	r2,r20
   40af8:	dfc00517 	ldw	ra,20(sp)
   40afc:	dd000417 	ldw	r20,16(sp)
   40b00:	dcc00317 	ldw	r19,12(sp)
   40b04:	dc800217 	ldw	r18,8(sp)
   40b08:	dc400117 	ldw	r17,4(sp)
   40b0c:	dc000017 	ldw	r16,0(sp)
   40b10:	dec00604 	addi	sp,sp,24
   40b14:	f800283a 	ret

00040b18 <_fwalk_reent>:
   40b18:	defff904 	addi	sp,sp,-28
   40b1c:	dd400515 	stw	r21,20(sp)
   40b20:	dd000415 	stw	r20,16(sp)
   40b24:	dcc00315 	stw	r19,12(sp)
   40b28:	dc800215 	stw	r18,8(sp)
   40b2c:	dfc00615 	stw	ra,24(sp)
   40b30:	dc400115 	stw	r17,4(sp)
   40b34:	dc000015 	stw	r16,0(sp)
   40b38:	202b883a 	mov	r21,r4
   40b3c:	2827883a 	mov	r19,r5
   40b40:	2480b804 	addi	r18,r4,736
   40b44:	0029883a 	mov	r20,zero
   40b48:	94400117 	ldw	r17,4(r18)
   40b4c:	94000217 	ldw	r16,8(r18)
   40b50:	8c7fffc4 	addi	r17,r17,-1
   40b54:	88000e16 	blt	r17,zero,40b90 <_fwalk_reent+0x78>
   40b58:	8080030b 	ldhu	r2,12(r16)
   40b5c:	8c7fffc4 	addi	r17,r17,-1
   40b60:	108000b0 	cmpltui	r2,r2,2
   40b64:	1000071e 	bne	r2,zero,40b84 <_fwalk_reent+0x6c>
   40b68:	8080038f 	ldh	r2,14(r16)
   40b6c:	800b883a 	mov	r5,r16
   40b70:	a809883a 	mov	r4,r21
   40b74:	10bfffe0 	cmpeqi	r2,r2,-1
   40b78:	1000021e 	bne	r2,zero,40b84 <_fwalk_reent+0x6c>
   40b7c:	983ee83a 	callr	r19
   40b80:	a0a8b03a 	or	r20,r20,r2
   40b84:	88bfffd8 	cmpnei	r2,r17,-1
   40b88:	84001a04 	addi	r16,r16,104
   40b8c:	103ff21e 	bne	r2,zero,40b58 <_fwalk_reent+0x40>
   40b90:	94800017 	ldw	r18,0(r18)
   40b94:	903fec1e 	bne	r18,zero,40b48 <_fwalk_reent+0x30>
   40b98:	a005883a 	mov	r2,r20
   40b9c:	dfc00617 	ldw	ra,24(sp)
   40ba0:	dd400517 	ldw	r21,20(sp)
   40ba4:	dd000417 	ldw	r20,16(sp)
   40ba8:	dcc00317 	ldw	r19,12(sp)
   40bac:	dc800217 	ldw	r18,8(sp)
   40bb0:	dc400117 	ldw	r17,4(sp)
   40bb4:	dc000017 	ldw	r16,0(sp)
   40bb8:	dec00704 	addi	sp,sp,28
   40bbc:	f800283a 	ret

00040bc0 <_malloc_r>:
   40bc0:	defff604 	addi	sp,sp,-40
   40bc4:	dc400115 	stw	r17,4(sp)
   40bc8:	2c4002c4 	addi	r17,r5,11
   40bcc:	dc800215 	stw	r18,8(sp)
   40bd0:	dfc00915 	stw	ra,36(sp)
   40bd4:	df000815 	stw	fp,32(sp)
   40bd8:	ddc00715 	stw	r23,28(sp)
   40bdc:	dd800615 	stw	r22,24(sp)
   40be0:	dd400515 	stw	r21,20(sp)
   40be4:	dd000415 	stw	r20,16(sp)
   40be8:	dcc00315 	stw	r19,12(sp)
   40bec:	dc000015 	stw	r16,0(sp)
   40bf0:	888005e8 	cmpgeui	r2,r17,23
   40bf4:	2025883a 	mov	r18,r4
   40bf8:	10001b1e 	bne	r2,zero,40c68 <_malloc_r+0xa8>
   40bfc:	29400468 	cmpgeui	r5,r5,17
   40c00:	2800821e 	bne	r5,zero,40e0c <_malloc_r+0x24c>
   40c04:	00432fc0 	call	432fc <__malloc_lock>
   40c08:	04400404 	movi	r17,16
   40c0c:	01c00084 	movi	r7,2
   40c10:	00800604 	movi	r2,24
   40c14:	04c00134 	movhi	r19,4
   40c18:	9cd2b304 	addi	r19,r19,19148
   40c1c:	9885883a 	add	r2,r19,r2
   40c20:	14000117 	ldw	r16,4(r2)
   40c24:	10fffe04 	addi	r3,r2,-8
   40c28:	80c08b26 	beq	r16,r3,40e58 <_malloc_r+0x298>
   40c2c:	80800117 	ldw	r2,4(r16)
   40c30:	81000317 	ldw	r4,12(r16)
   40c34:	00ffff04 	movi	r3,-4
   40c38:	10c4703a 	and	r2,r2,r3
   40c3c:	81400217 	ldw	r5,8(r16)
   40c40:	8085883a 	add	r2,r16,r2
   40c44:	10c00117 	ldw	r3,4(r2)
   40c48:	29000315 	stw	r4,12(r5)
   40c4c:	21400215 	stw	r5,8(r4)
   40c50:	18c00054 	ori	r3,r3,1
   40c54:	10c00115 	stw	r3,4(r2)
   40c58:	9009883a 	mov	r4,r18
   40c5c:	00433200 	call	43320 <__malloc_unlock>
   40c60:	80800204 	addi	r2,r16,8
   40c64:	00006c06 	br	40e18 <_malloc_r+0x258>
   40c68:	00bffe04 	movi	r2,-8
   40c6c:	88a2703a 	and	r17,r17,r2
   40c70:	88006616 	blt	r17,zero,40e0c <_malloc_r+0x24c>
   40c74:	89406536 	bltu	r17,r5,40e0c <_malloc_r+0x24c>
   40c78:	00432fc0 	call	432fc <__malloc_lock>
   40c7c:	88807e28 	cmpgeui	r2,r17,504
   40c80:	10012226 	beq	r2,zero,4110c <_malloc_r+0x54c>
   40c84:	8804d27a 	srli	r2,r17,9
   40c88:	10006f26 	beq	r2,zero,40e48 <_malloc_r+0x288>
   40c8c:	10c00168 	cmpgeui	r3,r2,5
   40c90:	1800fe1e 	bne	r3,zero,4108c <_malloc_r+0x4cc>
   40c94:	8804d1ba 	srli	r2,r17,6
   40c98:	11c00e44 	addi	r7,r2,57
   40c9c:	380890fa 	slli	r4,r7,3
   40ca0:	12000e04 	addi	r8,r2,56
   40ca4:	04c00134 	movhi	r19,4
   40ca8:	9cd2b304 	addi	r19,r19,19148
   40cac:	9909883a 	add	r4,r19,r4
   40cb0:	24000117 	ldw	r16,4(r4)
   40cb4:	213ffe04 	addi	r4,r4,-8
   40cb8:	24000b26 	beq	r4,r16,40ce8 <_malloc_r+0x128>
   40cbc:	01bfff04 	movi	r6,-4
   40cc0:	00000306 	br	40cd0 <_malloc_r+0x110>
   40cc4:	1800d60e 	bge	r3,zero,41020 <_malloc_r+0x460>
   40cc8:	84000317 	ldw	r16,12(r16)
   40ccc:	24000626 	beq	r4,r16,40ce8 <_malloc_r+0x128>
   40cd0:	80800117 	ldw	r2,4(r16)
   40cd4:	1184703a 	and	r2,r2,r6
   40cd8:	1447c83a 	sub	r3,r2,r17
   40cdc:	19400408 	cmpgei	r5,r3,16
   40ce0:	283ff826 	beq	r5,zero,40cc4 <_malloc_r+0x104>
   40ce4:	400f883a 	mov	r7,r8
   40ce8:	9c000417 	ldw	r16,16(r19)
   40cec:	02400134 	movhi	r9,4
   40cf0:	4a52b504 	addi	r9,r9,19156
   40cf4:	82405f26 	beq	r16,r9,40e74 <_malloc_r+0x2b4>
   40cf8:	80c00117 	ldw	r3,4(r16)
   40cfc:	00bfff04 	movi	r2,-4
   40d00:	1884703a 	and	r2,r3,r2
   40d04:	1447c83a 	sub	r3,r2,r17
   40d08:	19000410 	cmplti	r4,r3,16
   40d0c:	20010a26 	beq	r4,zero,41138 <_malloc_r+0x578>
   40d10:	9a400515 	stw	r9,20(r19)
   40d14:	9a400415 	stw	r9,16(r19)
   40d18:	1800ff0e 	bge	r3,zero,41118 <_malloc_r+0x558>
   40d1c:	10c08028 	cmpgeui	r3,r2,512
   40d20:	1800c11e 	bne	r3,zero,41028 <_malloc_r+0x468>
   40d24:	1006d0fa 	srli	r3,r2,3
   40d28:	1008d17a 	srli	r4,r2,5
   40d2c:	00800044 	movi	r2,1
   40d30:	18c00044 	addi	r3,r3,1
   40d34:	180690fa 	slli	r3,r3,3
   40d38:	99400117 	ldw	r5,4(r19)
   40d3c:	1104983a 	sll	r2,r2,r4
   40d40:	98c7883a 	add	r3,r19,r3
   40d44:	19000017 	ldw	r4,0(r3)
   40d48:	1144b03a 	or	r2,r2,r5
   40d4c:	197ffe04 	addi	r5,r3,-8
   40d50:	81400315 	stw	r5,12(r16)
   40d54:	81000215 	stw	r4,8(r16)
   40d58:	98800115 	stw	r2,4(r19)
   40d5c:	1c000015 	stw	r16,0(r3)
   40d60:	24000315 	stw	r16,12(r4)
   40d64:	3807d0ba 	srai	r3,r7,2
   40d68:	01000044 	movi	r4,1
   40d6c:	20c8983a 	sll	r4,r4,r3
   40d70:	11004536 	bltu	r2,r4,40e88 <_malloc_r+0x2c8>
   40d74:	2086703a 	and	r3,r4,r2
   40d78:	18000a1e 	bne	r3,zero,40da4 <_malloc_r+0x1e4>
   40d7c:	00ffff04 	movi	r3,-4
   40d80:	2109883a 	add	r4,r4,r4
   40d84:	38ce703a 	and	r7,r7,r3
   40d88:	2086703a 	and	r3,r4,r2
   40d8c:	39c00104 	addi	r7,r7,4
   40d90:	1800041e 	bne	r3,zero,40da4 <_malloc_r+0x1e4>
   40d94:	2109883a 	add	r4,r4,r4
   40d98:	2086703a 	and	r3,r4,r2
   40d9c:	39c00104 	addi	r7,r7,4
   40da0:	183ffc26 	beq	r3,zero,40d94 <_malloc_r+0x1d4>
   40da4:	02bfff04 	movi	r10,-4
   40da8:	381690fa 	slli	r11,r7,3
   40dac:	3819883a 	mov	r12,r7
   40db0:	9ad7883a 	add	r11,r19,r11
   40db4:	5811883a 	mov	r8,r11
   40db8:	40800317 	ldw	r2,12(r8)
   40dbc:	4080bc26 	beq	r8,r2,410b0 <_malloc_r+0x4f0>
   40dc0:	10c00117 	ldw	r3,4(r2)
   40dc4:	1021883a 	mov	r16,r2
   40dc8:	10800317 	ldw	r2,12(r2)
   40dcc:	1a86703a 	and	r3,r3,r10
   40dd0:	1c4bc83a 	sub	r5,r3,r17
   40dd4:	29800410 	cmplti	r6,r5,16
   40dd8:	3000ba26 	beq	r6,zero,410c4 <_malloc_r+0x504>
   40ddc:	283ff716 	blt	r5,zero,40dbc <_malloc_r+0x1fc>
   40de0:	80c7883a 	add	r3,r16,r3
   40de4:	19400117 	ldw	r5,4(r3)
   40de8:	81800217 	ldw	r6,8(r16)
   40dec:	9009883a 	mov	r4,r18
   40df0:	29400054 	ori	r5,r5,1
   40df4:	19400115 	stw	r5,4(r3)
   40df8:	30800315 	stw	r2,12(r6)
   40dfc:	11800215 	stw	r6,8(r2)
   40e00:	00433200 	call	43320 <__malloc_unlock>
   40e04:	80800204 	addi	r2,r16,8
   40e08:	00000306 	br	40e18 <_malloc_r+0x258>
   40e0c:	00800304 	movi	r2,12
   40e10:	90800015 	stw	r2,0(r18)
   40e14:	0005883a 	mov	r2,zero
   40e18:	dfc00917 	ldw	ra,36(sp)
   40e1c:	df000817 	ldw	fp,32(sp)
   40e20:	ddc00717 	ldw	r23,28(sp)
   40e24:	dd800617 	ldw	r22,24(sp)
   40e28:	dd400517 	ldw	r21,20(sp)
   40e2c:	dd000417 	ldw	r20,16(sp)
   40e30:	dcc00317 	ldw	r19,12(sp)
   40e34:	dc800217 	ldw	r18,8(sp)
   40e38:	dc400117 	ldw	r17,4(sp)
   40e3c:	dc000017 	ldw	r16,0(sp)
   40e40:	dec00a04 	addi	sp,sp,40
   40e44:	f800283a 	ret
   40e48:	01008004 	movi	r4,512
   40e4c:	01c01004 	movi	r7,64
   40e50:	02000fc4 	movi	r8,63
   40e54:	003f9306 	br	40ca4 <_malloc_r+0xe4>
   40e58:	14000317 	ldw	r16,12(r2)
   40e5c:	39c00084 	addi	r7,r7,2
   40e60:	143f721e 	bne	r2,r16,40c2c <_malloc_r+0x6c>
   40e64:	9c000417 	ldw	r16,16(r19)
   40e68:	02400134 	movhi	r9,4
   40e6c:	4a52b504 	addi	r9,r9,19156
   40e70:	827fa11e 	bne	r16,r9,40cf8 <_malloc_r+0x138>
   40e74:	3807d0ba 	srai	r3,r7,2
   40e78:	01000044 	movi	r4,1
   40e7c:	98800117 	ldw	r2,4(r19)
   40e80:	20c8983a 	sll	r4,r4,r3
   40e84:	113fbb2e 	bgeu	r2,r4,40d74 <_malloc_r+0x1b4>
   40e88:	9c000217 	ldw	r16,8(r19)
   40e8c:	00bfff04 	movi	r2,-4
   40e90:	85400117 	ldw	r21,4(r16)
   40e94:	a8ac703a 	and	r22,r21,r2
   40e98:	b4400336 	bltu	r22,r17,40ea8 <_malloc_r+0x2e8>
   40e9c:	b445c83a 	sub	r2,r22,r17
   40ea0:	10c00408 	cmpgei	r3,r2,16
   40ea4:	1800541e 	bne	r3,zero,40ff8 <_malloc_r+0x438>
   40ea8:	00800134 	movhi	r2,4
   40eac:	10942c17 	ldw	r2,20656(r2)
   40eb0:	00c00134 	movhi	r3,4
   40eb4:	1d56c217 	ldw	r21,23304(r3)
   40eb8:	10bfffd8 	cmpnei	r2,r2,-1
   40ebc:	85b9883a 	add	fp,r16,r22
   40ec0:	8d6b883a 	add	r21,r17,r21
   40ec4:	1000d626 	beq	r2,zero,41220 <_malloc_r+0x660>
   40ec8:	ad4403c4 	addi	r21,r21,4111
   40ecc:	00bc0004 	movi	r2,-4096
   40ed0:	a8aa703a 	and	r21,r21,r2
   40ed4:	a80b883a 	mov	r5,r21
   40ed8:	9009883a 	mov	r4,r18
   40edc:	0041cf40 	call	41cf4 <_sbrk_r>
   40ee0:	102f883a 	mov	r23,r2
   40ee4:	10bfffd8 	cmpnei	r2,r2,-1
   40ee8:	1000a826 	beq	r2,zero,4118c <_malloc_r+0x5cc>
   40eec:	bf00a636 	bltu	r23,fp,41188 <_malloc_r+0x5c8>
   40ef0:	00800134 	movhi	r2,4
   40ef4:	1516c717 	ldw	r20,23324(r2)
   40ef8:	ad29883a 	add	r20,r21,r20
   40efc:	1516c715 	stw	r20,23324(r2)
   40f00:	a007883a 	mov	r3,r20
   40f04:	e5c0ec26 	beq	fp,r23,412b8 <_malloc_r+0x6f8>
   40f08:	00800134 	movhi	r2,4
   40f0c:	10942c17 	ldw	r2,20656(r2)
   40f10:	10bfffd8 	cmpnei	r2,r2,-1
   40f14:	1000ef26 	beq	r2,zero,412d4 <_malloc_r+0x714>
   40f18:	bf39c83a 	sub	fp,r23,fp
   40f1c:	e0c7883a 	add	r3,fp,r3
   40f20:	00800134 	movhi	r2,4
   40f24:	10d6c715 	stw	r3,23324(r2)
   40f28:	bf0001cc 	andi	fp,r23,7
   40f2c:	e000c526 	beq	fp,zero,41244 <_malloc_r+0x684>
   40f30:	bf2fc83a 	sub	r23,r23,fp
   40f34:	bdc00204 	addi	r23,r23,8
   40f38:	05040204 	movi	r20,4104
   40f3c:	a729c83a 	sub	r20,r20,fp
   40f40:	bd6b883a 	add	r21,r23,r21
   40f44:	a569c83a 	sub	r20,r20,r21
   40f48:	a503ffcc 	andi	r20,r20,4095
   40f4c:	a00b883a 	mov	r5,r20
   40f50:	9009883a 	mov	r4,r18
   40f54:	0041cf40 	call	41cf4 <_sbrk_r>
   40f58:	10ffffe0 	cmpeqi	r3,r2,-1
   40f5c:	1800f31e 	bne	r3,zero,4132c <_malloc_r+0x76c>
   40f60:	15c5c83a 	sub	r2,r2,r23
   40f64:	152b883a 	add	r21,r2,r20
   40f68:	00800134 	movhi	r2,4
   40f6c:	1156c717 	ldw	r5,23324(r2)
   40f70:	9dc00215 	stw	r23,8(r19)
   40f74:	ad400054 	ori	r21,r21,1
   40f78:	a169883a 	add	r20,r20,r5
   40f7c:	1516c715 	stw	r20,23324(r2)
   40f80:	bd400115 	stw	r21,4(r23)
   40f84:	84c0d626 	beq	r16,r19,412e0 <_malloc_r+0x720>
   40f88:	b0800428 	cmpgeui	r2,r22,16
   40f8c:	1000d626 	beq	r2,zero,412e8 <_malloc_r+0x728>
   40f90:	80c00117 	ldw	r3,4(r16)
   40f94:	013ffe04 	movi	r4,-8
   40f98:	b0bffd04 	addi	r2,r22,-12
   40f9c:	1104703a 	and	r2,r2,r4
   40fa0:	18c0004c 	andi	r3,r3,1
   40fa4:	1886b03a 	or	r3,r3,r2
   40fa8:	80c00115 	stw	r3,4(r16)
   40fac:	01000144 	movi	r4,5
   40fb0:	8087883a 	add	r3,r16,r2
   40fb4:	19000115 	stw	r4,4(r3)
   40fb8:	19000215 	stw	r4,8(r3)
   40fbc:	10800428 	cmpgeui	r2,r2,16
   40fc0:	1000df1e 	bne	r2,zero,41340 <_malloc_r+0x780>
   40fc4:	bd400117 	ldw	r21,4(r23)
   40fc8:	b821883a 	mov	r16,r23
   40fcc:	00800134 	movhi	r2,4
   40fd0:	1096c117 	ldw	r2,23300(r2)
   40fd4:	1500022e 	bgeu	r2,r20,40fe0 <_malloc_r+0x420>
   40fd8:	00800134 	movhi	r2,4
   40fdc:	1516c115 	stw	r20,23300(r2)
   40fe0:	00800134 	movhi	r2,4
   40fe4:	1096c017 	ldw	r2,23296(r2)
   40fe8:	15006a2e 	bgeu	r2,r20,41194 <_malloc_r+0x5d4>
   40fec:	00800134 	movhi	r2,4
   40ff0:	1516c015 	stw	r20,23296(r2)
   40ff4:	00006706 	br	41194 <_malloc_r+0x5d4>
   40ff8:	88c00054 	ori	r3,r17,1
   40ffc:	80c00115 	stw	r3,4(r16)
   41000:	8463883a 	add	r17,r16,r17
   41004:	10800054 	ori	r2,r2,1
   41008:	9c400215 	stw	r17,8(r19)
   4100c:	88800115 	stw	r2,4(r17)
   41010:	9009883a 	mov	r4,r18
   41014:	00433200 	call	43320 <__malloc_unlock>
   41018:	80800204 	addi	r2,r16,8
   4101c:	003f7e06 	br	40e18 <_malloc_r+0x258>
   41020:	81000317 	ldw	r4,12(r16)
   41024:	003f0506 	br	40c3c <_malloc_r+0x7c>
   41028:	1006d27a 	srli	r3,r2,9
   4102c:	19000168 	cmpgeui	r4,r3,5
   41030:	20005026 	beq	r4,zero,41174 <_malloc_r+0x5b4>
   41034:	19000568 	cmpgeui	r4,r3,21
   41038:	20008c1e 	bne	r4,zero,4126c <_malloc_r+0x6ac>
   4103c:	19401704 	addi	r5,r3,92
   41040:	280a90fa 	slli	r5,r5,3
   41044:	190016c4 	addi	r4,r3,91
   41048:	994b883a 	add	r5,r19,r5
   4104c:	28c00017 	ldw	r3,0(r5)
   41050:	297ffe04 	addi	r5,r5,-8
   41054:	28c07426 	beq	r5,r3,41228 <_malloc_r+0x668>
   41058:	01bfff04 	movi	r6,-4
   4105c:	19000117 	ldw	r4,4(r3)
   41060:	2188703a 	and	r4,r4,r6
   41064:	1100022e 	bgeu	r2,r4,41070 <_malloc_r+0x4b0>
   41068:	18c00217 	ldw	r3,8(r3)
   4106c:	28fffb1e 	bne	r5,r3,4105c <_malloc_r+0x49c>
   41070:	19400317 	ldw	r5,12(r3)
   41074:	98800117 	ldw	r2,4(r19)
   41078:	81400315 	stw	r5,12(r16)
   4107c:	80c00215 	stw	r3,8(r16)
   41080:	2c000215 	stw	r16,8(r5)
   41084:	1c000315 	stw	r16,12(r3)
   41088:	003f3606 	br	40d64 <_malloc_r+0x1a4>
   4108c:	10c00568 	cmpgeui	r3,r2,21
   41090:	18004a26 	beq	r3,zero,411bc <_malloc_r+0x5fc>
   41094:	10c01568 	cmpgeui	r3,r2,85
   41098:	18007b1e 	bne	r3,zero,41288 <_malloc_r+0x6c8>
   4109c:	8804d33a 	srli	r2,r17,12
   410a0:	11c01bc4 	addi	r7,r2,111
   410a4:	380890fa 	slli	r4,r7,3
   410a8:	12001b84 	addi	r8,r2,110
   410ac:	003efd06 	br	40ca4 <_malloc_r+0xe4>
   410b0:	63000044 	addi	r12,r12,1
   410b4:	608000cc 	andi	r2,r12,3
   410b8:	42000204 	addi	r8,r8,8
   410bc:	103f3e1e 	bne	r2,zero,40db8 <_malloc_r+0x1f8>
   410c0:	00004506 	br	411d8 <_malloc_r+0x618>
   410c4:	81000217 	ldw	r4,8(r16)
   410c8:	89800054 	ori	r6,r17,1
   410cc:	81800115 	stw	r6,4(r16)
   410d0:	20800315 	stw	r2,12(r4)
   410d4:	11000215 	stw	r4,8(r2)
   410d8:	8463883a 	add	r17,r16,r17
   410dc:	9c400515 	stw	r17,20(r19)
   410e0:	9c400415 	stw	r17,16(r19)
   410e4:	28800054 	ori	r2,r5,1
   410e8:	88800115 	stw	r2,4(r17)
   410ec:	8a400315 	stw	r9,12(r17)
   410f0:	8a400215 	stw	r9,8(r17)
   410f4:	80c7883a 	add	r3,r16,r3
   410f8:	19400015 	stw	r5,0(r3)
   410fc:	9009883a 	mov	r4,r18
   41100:	00433200 	call	43320 <__malloc_unlock>
   41104:	80800204 	addi	r2,r16,8
   41108:	003f4306 	br	40e18 <_malloc_r+0x258>
   4110c:	880ed0fa 	srli	r7,r17,3
   41110:	88800204 	addi	r2,r17,8
   41114:	003ebf06 	br	40c14 <_malloc_r+0x54>
   41118:	8085883a 	add	r2,r16,r2
   4111c:	10c00117 	ldw	r3,4(r2)
   41120:	9009883a 	mov	r4,r18
   41124:	18c00054 	ori	r3,r3,1
   41128:	10c00115 	stw	r3,4(r2)
   4112c:	00433200 	call	43320 <__malloc_unlock>
   41130:	80800204 	addi	r2,r16,8
   41134:	003f3806 	br	40e18 <_malloc_r+0x258>
   41138:	89000054 	ori	r4,r17,1
   4113c:	81000115 	stw	r4,4(r16)
   41140:	8463883a 	add	r17,r16,r17
   41144:	9c400515 	stw	r17,20(r19)
   41148:	9c400415 	stw	r17,16(r19)
   4114c:	19000054 	ori	r4,r3,1
   41150:	89000115 	stw	r4,4(r17)
   41154:	8085883a 	add	r2,r16,r2
   41158:	8a400315 	stw	r9,12(r17)
   4115c:	8a400215 	stw	r9,8(r17)
   41160:	10c00015 	stw	r3,0(r2)
   41164:	9009883a 	mov	r4,r18
   41168:	00433200 	call	43320 <__malloc_unlock>
   4116c:	80800204 	addi	r2,r16,8
   41170:	003f2906 	br	40e18 <_malloc_r+0x258>
   41174:	1006d1ba 	srli	r3,r2,6
   41178:	19400e44 	addi	r5,r3,57
   4117c:	280a90fa 	slli	r5,r5,3
   41180:	19000e04 	addi	r4,r3,56
   41184:	003fb006 	br	41048 <_malloc_r+0x488>
   41188:	84c04626 	beq	r16,r19,412a4 <_malloc_r+0x6e4>
   4118c:	9c000217 	ldw	r16,8(r19)
   41190:	85400117 	ldw	r21,4(r16)
   41194:	00bfff04 	movi	r2,-4
   41198:	a8aa703a 	and	r21,r21,r2
   4119c:	ac45c83a 	sub	r2,r21,r17
   411a0:	ac400236 	bltu	r21,r17,411ac <_malloc_r+0x5ec>
   411a4:	10c00408 	cmpgei	r3,r2,16
   411a8:	183f931e 	bne	r3,zero,40ff8 <_malloc_r+0x438>
   411ac:	9009883a 	mov	r4,r18
   411b0:	00433200 	call	43320 <__malloc_unlock>
   411b4:	0005883a 	mov	r2,zero
   411b8:	003f1706 	br	40e18 <_malloc_r+0x258>
   411bc:	11c01704 	addi	r7,r2,92
   411c0:	380890fa 	slli	r4,r7,3
   411c4:	120016c4 	addi	r8,r2,91
   411c8:	003eb606 	br	40ca4 <_malloc_r+0xe4>
   411cc:	58800217 	ldw	r2,8(r11)
   411d0:	39ffffc4 	addi	r7,r7,-1
   411d4:	12c0701e 	bne	r2,r11,41398 <_malloc_r+0x7d8>
   411d8:	388000cc 	andi	r2,r7,3
   411dc:	5afffe04 	addi	r11,r11,-8
   411e0:	103ffa1e 	bne	r2,zero,411cc <_malloc_r+0x60c>
   411e4:	98c00117 	ldw	r3,4(r19)
   411e8:	0104303a 	nor	r2,zero,r4
   411ec:	10c4703a 	and	r2,r2,r3
   411f0:	98800115 	stw	r2,4(r19)
   411f4:	2109883a 	add	r4,r4,r4
   411f8:	113f2336 	bltu	r2,r4,40e88 <_malloc_r+0x2c8>
   411fc:	203f2226 	beq	r4,zero,40e88 <_malloc_r+0x2c8>
   41200:	2086703a 	and	r3,r4,r2
   41204:	1800041e 	bne	r3,zero,41218 <_malloc_r+0x658>
   41208:	2109883a 	add	r4,r4,r4
   4120c:	2086703a 	and	r3,r4,r2
   41210:	63000104 	addi	r12,r12,4
   41214:	183ffc26 	beq	r3,zero,41208 <_malloc_r+0x648>
   41218:	600f883a 	mov	r7,r12
   4121c:	003ee206 	br	40da8 <_malloc_r+0x1e8>
   41220:	ad400404 	addi	r21,r21,16
   41224:	003f2b06 	br	40ed4 <_malloc_r+0x314>
   41228:	2009d0ba 	srai	r4,r4,2
   4122c:	00800044 	movi	r2,1
   41230:	99800117 	ldw	r6,4(r19)
   41234:	1104983a 	sll	r2,r2,r4
   41238:	1184b03a 	or	r2,r2,r6
   4123c:	98800115 	stw	r2,4(r19)
   41240:	003f8d06 	br	41078 <_malloc_r+0x4b8>
   41244:	bd69883a 	add	r20,r23,r21
   41248:	0529c83a 	sub	r20,zero,r20
   4124c:	a503ffcc 	andi	r20,r20,4095
   41250:	a00b883a 	mov	r5,r20
   41254:	9009883a 	mov	r4,r18
   41258:	0041cf40 	call	41cf4 <_sbrk_r>
   4125c:	10ffffe0 	cmpeqi	r3,r2,-1
   41260:	183f3f26 	beq	r3,zero,40f60 <_malloc_r+0x3a0>
   41264:	0029883a 	mov	r20,zero
   41268:	003f3f06 	br	40f68 <_malloc_r+0x3a8>
   4126c:	19001568 	cmpgeui	r4,r3,85
   41270:	2000201e 	bne	r4,zero,412f4 <_malloc_r+0x734>
   41274:	1006d33a 	srli	r3,r2,12
   41278:	19401bc4 	addi	r5,r3,111
   4127c:	280a90fa 	slli	r5,r5,3
   41280:	19001b84 	addi	r4,r3,110
   41284:	003f7006 	br	41048 <_malloc_r+0x488>
   41288:	10c05568 	cmpgeui	r3,r2,341
   4128c:	1800201e 	bne	r3,zero,41310 <_malloc_r+0x750>
   41290:	8804d3fa 	srli	r2,r17,15
   41294:	11c01e04 	addi	r7,r2,120
   41298:	380890fa 	slli	r4,r7,3
   4129c:	12001dc4 	addi	r8,r2,119
   412a0:	003e8006 	br	40ca4 <_malloc_r+0xe4>
   412a4:	00800134 	movhi	r2,4
   412a8:	10d6c717 	ldw	r3,23324(r2)
   412ac:	a8c7883a 	add	r3,r21,r3
   412b0:	10d6c715 	stw	r3,23324(r2)
   412b4:	003f1406 	br	40f08 <_malloc_r+0x348>
   412b8:	e083ffcc 	andi	r2,fp,4095
   412bc:	103f121e 	bne	r2,zero,40f08 <_malloc_r+0x348>
   412c0:	9c000217 	ldw	r16,8(r19)
   412c4:	b56b883a 	add	r21,r22,r21
   412c8:	ad400054 	ori	r21,r21,1
   412cc:	85400115 	stw	r21,4(r16)
   412d0:	003f3e06 	br	40fcc <_malloc_r+0x40c>
   412d4:	00800134 	movhi	r2,4
   412d8:	15d42c15 	stw	r23,20656(r2)
   412dc:	003f1206 	br	40f28 <_malloc_r+0x368>
   412e0:	b821883a 	mov	r16,r23
   412e4:	003f3906 	br	40fcc <_malloc_r+0x40c>
   412e8:	00800044 	movi	r2,1
   412ec:	b8800115 	stw	r2,4(r23)
   412f0:	003fae06 	br	411ac <_malloc_r+0x5ec>
   412f4:	19005568 	cmpgeui	r4,r3,341
   412f8:	2000191e 	bne	r4,zero,41360 <_malloc_r+0x7a0>
   412fc:	1006d3fa 	srli	r3,r2,15
   41300:	19401e04 	addi	r5,r3,120
   41304:	280a90fa 	slli	r5,r5,3
   41308:	19001dc4 	addi	r4,r3,119
   4130c:	003f4e06 	br	41048 <_malloc_r+0x488>
   41310:	10815568 	cmpgeui	r2,r2,1365
   41314:	1000191e 	bne	r2,zero,4137c <_malloc_r+0x7bc>
   41318:	8804d4ba 	srli	r2,r17,18
   4131c:	11c01f44 	addi	r7,r2,125
   41320:	380890fa 	slli	r4,r7,3
   41324:	12001f04 	addi	r8,r2,124
   41328:	003e5e06 	br	40ca4 <_malloc_r+0xe4>
   4132c:	e73ffe04 	addi	fp,fp,-8
   41330:	af2b883a 	add	r21,r21,fp
   41334:	adebc83a 	sub	r21,r21,r23
   41338:	0029883a 	mov	r20,zero
   4133c:	003f0a06 	br	40f68 <_malloc_r+0x3a8>
   41340:	81400204 	addi	r5,r16,8
   41344:	9009883a 	mov	r4,r18
   41348:	00425780 	call	42578 <_free_r>
   4134c:	9c000217 	ldw	r16,8(r19)
   41350:	00800134 	movhi	r2,4
   41354:	1516c717 	ldw	r20,23324(r2)
   41358:	85400117 	ldw	r21,4(r16)
   4135c:	003f1b06 	br	40fcc <_malloc_r+0x40c>
   41360:	18c15568 	cmpgeui	r3,r3,1365
   41364:	1800091e 	bne	r3,zero,4138c <_malloc_r+0x7cc>
   41368:	1006d4ba 	srli	r3,r2,18
   4136c:	19401f44 	addi	r5,r3,125
   41370:	280a90fa 	slli	r5,r5,3
   41374:	19001f04 	addi	r4,r3,124
   41378:	003f3306 	br	41048 <_malloc_r+0x488>
   4137c:	0100fe04 	movi	r4,1016
   41380:	01c01fc4 	movi	r7,127
   41384:	02001f84 	movi	r8,126
   41388:	003e4606 	br	40ca4 <_malloc_r+0xe4>
   4138c:	0140fe04 	movi	r5,1016
   41390:	01001f84 	movi	r4,126
   41394:	003f2c06 	br	41048 <_malloc_r+0x488>
   41398:	98800117 	ldw	r2,4(r19)
   4139c:	003f9506 	br	411f4 <_malloc_r+0x634>

000413a0 <memchr>:
   413a0:	208000cc 	andi	r2,r4,3
   413a4:	280f883a 	mov	r7,r5
   413a8:	10000e26 	beq	r2,zero,413e4 <memchr+0x44>
   413ac:	30bfffc4 	addi	r2,r6,-1
   413b0:	30001726 	beq	r6,zero,41410 <memchr+0x70>
   413b4:	29803fcc 	andi	r6,r5,255
   413b8:	00000606 	br	413d4 <memchr+0x34>
   413bc:	21000044 	addi	r4,r4,1
   413c0:	20c000cc 	andi	r3,r4,3
   413c4:	18000826 	beq	r3,zero,413e8 <memchr+0x48>
   413c8:	10bfffc4 	addi	r2,r2,-1
   413cc:	10ffffe0 	cmpeqi	r3,r2,-1
   413d0:	18000f1e 	bne	r3,zero,41410 <memchr+0x70>
   413d4:	20c00003 	ldbu	r3,0(r4)
   413d8:	19bff81e 	bne	r3,r6,413bc <memchr+0x1c>
   413dc:	2005883a 	mov	r2,r4
   413e0:	f800283a 	ret
   413e4:	3005883a 	mov	r2,r6
   413e8:	10c00128 	cmpgeui	r3,r2,4
   413ec:	18000a1e 	bne	r3,zero,41418 <memchr+0x78>
   413f0:	10001f26 	beq	r2,zero,41470 <memchr+0xd0>
   413f4:	2087883a 	add	r3,r4,r2
   413f8:	39803fcc 	andi	r6,r7,255
   413fc:	2005883a 	mov	r2,r4
   41400:	11000003 	ldbu	r4,0(r2)
   41404:	21bff626 	beq	r4,r6,413e0 <memchr+0x40>
   41408:	10800044 	addi	r2,r2,1
   4140c:	18bffc1e 	bne	r3,r2,41400 <memchr+0x60>
   41410:	0005883a 	mov	r2,zero
   41414:	f800283a 	ret
   41418:	2810923a 	slli	r8,r5,8
   4141c:	29403fcc 	andi	r5,r5,255
   41420:	027fbff4 	movhi	r9,65279
   41424:	423fffcc 	andi	r8,r8,65535
   41428:	414ab03a 	or	r5,r8,r5
   4142c:	2810943a 	slli	r8,r5,16
   41430:	01a02074 	movhi	r6,32897
   41434:	4a7fbfc4 	addi	r9,r9,-257
   41438:	4150b03a 	or	r8,r8,r5
   4143c:	31a02004 	addi	r6,r6,-32640
   41440:	20c00017 	ldw	r3,0(r4)
   41444:	40c6f03a 	xor	r3,r8,r3
   41448:	1a4b883a 	add	r5,r3,r9
   4144c:	00c6303a 	nor	r3,zero,r3
   41450:	28c6703a 	and	r3,r5,r3
   41454:	1986703a 	and	r3,r3,r6
   41458:	183fe61e 	bne	r3,zero,413f4 <memchr+0x54>
   4145c:	10bfff04 	addi	r2,r2,-4
   41460:	10c00128 	cmpgeui	r3,r2,4
   41464:	21000104 	addi	r4,r4,4
   41468:	183ff51e 	bne	r3,zero,41440 <memchr+0xa0>
   4146c:	003fe006 	br	413f0 <memchr+0x50>
   41470:	f800283a 	ret

00041474 <memcpy>:
   41474:	30c00430 	cmpltui	r3,r6,16
   41478:	2005883a 	mov	r2,r4
   4147c:	18002d1e 	bne	r3,zero,41534 <memcpy+0xc0>
   41480:	2906b03a 	or	r3,r5,r4
   41484:	18c000cc 	andi	r3,r3,3
   41488:	1800351e 	bne	r3,zero,41560 <memcpy+0xec>
   4148c:	32fffc04 	addi	r11,r6,-16
   41490:	5816d13a 	srli	r11,r11,4
   41494:	280f883a 	mov	r7,r5
   41498:	2007883a 	mov	r3,r4
   4149c:	5ac00044 	addi	r11,r11,1
   414a0:	5816913a 	slli	r11,r11,4
   414a4:	22d5883a 	add	r10,r4,r11
   414a8:	39000117 	ldw	r4,4(r7)
   414ac:	3a400017 	ldw	r9,0(r7)
   414b0:	3a000217 	ldw	r8,8(r7)
   414b4:	19000115 	stw	r4,4(r3)
   414b8:	39000317 	ldw	r4,12(r7)
   414bc:	1a400015 	stw	r9,0(r3)
   414c0:	1a000215 	stw	r8,8(r3)
   414c4:	19000315 	stw	r4,12(r3)
   414c8:	18c00404 	addi	r3,r3,16
   414cc:	39c00404 	addi	r7,r7,16
   414d0:	50fff51e 	bne	r10,r3,414a8 <memcpy+0x34>
   414d4:	3100030c 	andi	r4,r6,12
   414d8:	2acb883a 	add	r5,r5,r11
   414dc:	320003cc 	andi	r8,r6,15
   414e0:	20002226 	beq	r4,zero,4156c <memcpy+0xf8>
   414e4:	280f883a 	mov	r7,r5
   414e8:	1813883a 	mov	r9,r3
   414ec:	39c00104 	addi	r7,r7,4
   414f0:	3abfff17 	ldw	r10,-4(r7)
   414f4:	41c9c83a 	sub	r4,r8,r7
   414f8:	2909883a 	add	r4,r5,r4
   414fc:	4a800015 	stw	r10,0(r9)
   41500:	21000128 	cmpgeui	r4,r4,4
   41504:	4a400104 	addi	r9,r9,4
   41508:	203ff81e 	bne	r4,zero,414ec <memcpy+0x78>
   4150c:	413fff04 	addi	r4,r8,-4
   41510:	2008d0ba 	srli	r4,r4,2
   41514:	318000cc 	andi	r6,r6,3
   41518:	31ffffc4 	addi	r7,r6,-1
   4151c:	21000044 	addi	r4,r4,1
   41520:	200890ba 	slli	r4,r4,2
   41524:	1907883a 	add	r3,r3,r4
   41528:	290b883a 	add	r5,r5,r4
   4152c:	3000041e 	bne	r6,zero,41540 <memcpy+0xcc>
   41530:	f800283a 	ret
   41534:	2007883a 	mov	r3,r4
   41538:	31ffffc4 	addi	r7,r6,-1
   4153c:	303ffc26 	beq	r6,zero,41530 <memcpy+0xbc>
   41540:	39c00044 	addi	r7,r7,1
   41544:	19cf883a 	add	r7,r3,r7
   41548:	29800003 	ldbu	r6,0(r5)
   4154c:	18c00044 	addi	r3,r3,1
   41550:	29400044 	addi	r5,r5,1
   41554:	19bfffc5 	stb	r6,-1(r3)
   41558:	38fffb1e 	bne	r7,r3,41548 <memcpy+0xd4>
   4155c:	f800283a 	ret
   41560:	31ffffc4 	addi	r7,r6,-1
   41564:	2007883a 	mov	r3,r4
   41568:	003ff506 	br	41540 <memcpy+0xcc>
   4156c:	400d883a 	mov	r6,r8
   41570:	003ff106 	br	41538 <memcpy+0xc4>

00041574 <memmove>:
   41574:	2005883a 	mov	r2,r4
   41578:	29000a2e 	bgeu	r5,r4,415a4 <memmove+0x30>
   4157c:	2989883a 	add	r4,r5,r6
   41580:	1100082e 	bgeu	r2,r4,415a4 <memmove+0x30>
   41584:	1187883a 	add	r3,r2,r6
   41588:	30003e26 	beq	r6,zero,41684 <memmove+0x110>
   4158c:	217fffc3 	ldbu	r5,-1(r4)
   41590:	18ffffc4 	addi	r3,r3,-1
   41594:	213fffc4 	addi	r4,r4,-1
   41598:	19400005 	stb	r5,0(r3)
   4159c:	10fffb1e 	bne	r2,r3,4158c <memmove+0x18>
   415a0:	f800283a 	ret
   415a4:	30c00430 	cmpltui	r3,r6,16
   415a8:	18000b26 	beq	r3,zero,415d8 <memmove+0x64>
   415ac:	1007883a 	mov	r3,r2
   415b0:	31ffffc4 	addi	r7,r6,-1
   415b4:	30003726 	beq	r6,zero,41694 <memmove+0x120>
   415b8:	39c00044 	addi	r7,r7,1
   415bc:	29cf883a 	add	r7,r5,r7
   415c0:	29800003 	ldbu	r6,0(r5)
   415c4:	29400044 	addi	r5,r5,1
   415c8:	18c00044 	addi	r3,r3,1
   415cc:	19bfffc5 	stb	r6,-1(r3)
   415d0:	29fffb1e 	bne	r5,r7,415c0 <memmove+0x4c>
   415d4:	f800283a 	ret
   415d8:	2886b03a 	or	r3,r5,r2
   415dc:	18c000cc 	andi	r3,r3,3
   415e0:	1800291e 	bne	r3,zero,41688 <memmove+0x114>
   415e4:	327ffc04 	addi	r9,r6,-16
   415e8:	4812d13a 	srli	r9,r9,4
   415ec:	280f883a 	mov	r7,r5
   415f0:	1007883a 	mov	r3,r2
   415f4:	4a400044 	addi	r9,r9,1
   415f8:	4812913a 	slli	r9,r9,4
   415fc:	1251883a 	add	r8,r2,r9
   41600:	39000017 	ldw	r4,0(r7)
   41604:	39c00404 	addi	r7,r7,16
   41608:	18c00404 	addi	r3,r3,16
   4160c:	193ffc15 	stw	r4,-16(r3)
   41610:	393ffd17 	ldw	r4,-12(r7)
   41614:	193ffd15 	stw	r4,-12(r3)
   41618:	393ffe17 	ldw	r4,-8(r7)
   4161c:	193ffe15 	stw	r4,-8(r3)
   41620:	393fff17 	ldw	r4,-4(r7)
   41624:	193fff15 	stw	r4,-4(r3)
   41628:	40fff51e 	bne	r8,r3,41600 <memmove+0x8c>
   4162c:	3100030c 	andi	r4,r6,12
   41630:	2a4b883a 	add	r5,r5,r9
   41634:	320003cc 	andi	r8,r6,15
   41638:	20001726 	beq	r4,zero,41698 <memmove+0x124>
   4163c:	2813883a 	mov	r9,r5
   41640:	180f883a 	mov	r7,r3
   41644:	4a800017 	ldw	r10,0(r9)
   41648:	39c00104 	addi	r7,r7,4
   4164c:	41c9c83a 	sub	r4,r8,r7
   41650:	1909883a 	add	r4,r3,r4
   41654:	21000128 	cmpgeui	r4,r4,4
   41658:	3abfff15 	stw	r10,-4(r7)
   4165c:	4a400104 	addi	r9,r9,4
   41660:	203ff81e 	bne	r4,zero,41644 <memmove+0xd0>
   41664:	413fff04 	addi	r4,r8,-4
   41668:	2008d0ba 	srli	r4,r4,2
   4166c:	318000cc 	andi	r6,r6,3
   41670:	21000044 	addi	r4,r4,1
   41674:	200890ba 	slli	r4,r4,2
   41678:	1907883a 	add	r3,r3,r4
   4167c:	290b883a 	add	r5,r5,r4
   41680:	003fcb06 	br	415b0 <memmove+0x3c>
   41684:	f800283a 	ret
   41688:	31ffffc4 	addi	r7,r6,-1
   4168c:	1007883a 	mov	r3,r2
   41690:	003fc906 	br	415b8 <memmove+0x44>
   41694:	f800283a 	ret
   41698:	400d883a 	mov	r6,r8
   4169c:	003fc406 	br	415b0 <memmove+0x3c>

000416a0 <memset>:
   416a0:	20c000cc 	andi	r3,r4,3
   416a4:	2005883a 	mov	r2,r4
   416a8:	18003626 	beq	r3,zero,41784 <memset+0xe4>
   416ac:	31ffffc4 	addi	r7,r6,-1
   416b0:	30003326 	beq	r6,zero,41780 <memset+0xe0>
   416b4:	2811883a 	mov	r8,r5
   416b8:	2007883a 	mov	r3,r4
   416bc:	00000306 	br	416cc <memset+0x2c>
   416c0:	39ffffc4 	addi	r7,r7,-1
   416c4:	39bfffe0 	cmpeqi	r6,r7,-1
   416c8:	30002d1e 	bne	r6,zero,41780 <memset+0xe0>
   416cc:	18c00044 	addi	r3,r3,1
   416d0:	198000cc 	andi	r6,r3,3
   416d4:	1a3fffc5 	stb	r8,-1(r3)
   416d8:	303ff91e 	bne	r6,zero,416c0 <memset+0x20>
   416dc:	39000130 	cmpltui	r4,r7,4
   416e0:	2000221e 	bne	r4,zero,4176c <memset+0xcc>
   416e4:	29003fcc 	andi	r4,r5,255
   416e8:	200c923a 	slli	r6,r4,8
   416ec:	3a000430 	cmpltui	r8,r7,16
   416f0:	3108b03a 	or	r4,r6,r4
   416f4:	200c943a 	slli	r6,r4,16
   416f8:	310cb03a 	or	r6,r6,r4
   416fc:	40000e1e 	bne	r8,zero,41738 <memset+0x98>
   41700:	393ffc04 	addi	r4,r7,-16
   41704:	2008d13a 	srli	r4,r4,4
   41708:	21000044 	addi	r4,r4,1
   4170c:	2008913a 	slli	r4,r4,4
   41710:	1909883a 	add	r4,r3,r4
   41714:	19800015 	stw	r6,0(r3)
   41718:	19800115 	stw	r6,4(r3)
   4171c:	19800215 	stw	r6,8(r3)
   41720:	19800315 	stw	r6,12(r3)
   41724:	18c00404 	addi	r3,r3,16
   41728:	20fffa1e 	bne	r4,r3,41714 <memset+0x74>
   4172c:	3900030c 	andi	r4,r7,12
   41730:	39c003cc 	andi	r7,r7,15
   41734:	20000d26 	beq	r4,zero,4176c <memset+0xcc>
   41738:	1811883a 	mov	r8,r3
   4173c:	42000104 	addi	r8,r8,4
   41740:	3a09c83a 	sub	r4,r7,r8
   41744:	1909883a 	add	r4,r3,r4
   41748:	21000128 	cmpgeui	r4,r4,4
   4174c:	41bfff15 	stw	r6,-4(r8)
   41750:	203ffa1e 	bne	r4,zero,4173c <memset+0x9c>
   41754:	393fff04 	addi	r4,r7,-4
   41758:	2008d0ba 	srli	r4,r4,2
   4175c:	39c000cc 	andi	r7,r7,3
   41760:	21000044 	addi	r4,r4,1
   41764:	200890ba 	slli	r4,r4,2
   41768:	1907883a 	add	r3,r3,r4
   4176c:	38000426 	beq	r7,zero,41780 <memset+0xe0>
   41770:	19cf883a 	add	r7,r3,r7
   41774:	18c00044 	addi	r3,r3,1
   41778:	197fffc5 	stb	r5,-1(r3)
   4177c:	38fffd1e 	bne	r7,r3,41774 <memset+0xd4>
   41780:	f800283a 	ret
   41784:	2007883a 	mov	r3,r4
   41788:	300f883a 	mov	r7,r6
   4178c:	003fd306 	br	416dc <memset+0x3c>

00041790 <_realloc_r>:
   41790:	defff504 	addi	sp,sp,-44
   41794:	dc800315 	stw	r18,12(sp)
   41798:	dfc00a15 	stw	ra,40(sp)
   4179c:	df000915 	stw	fp,36(sp)
   417a0:	ddc00815 	stw	r23,32(sp)
   417a4:	dd800715 	stw	r22,28(sp)
   417a8:	dd400615 	stw	r21,24(sp)
   417ac:	dd000515 	stw	r20,20(sp)
   417b0:	dcc00415 	stw	r19,16(sp)
   417b4:	dc400215 	stw	r17,8(sp)
   417b8:	dc000115 	stw	r16,4(sp)
   417bc:	3025883a 	mov	r18,r6
   417c0:	28008b26 	beq	r5,zero,419f0 <_realloc_r+0x260>
   417c4:	2821883a 	mov	r16,r5
   417c8:	2027883a 	mov	r19,r4
   417cc:	944002c4 	addi	r17,r18,11
   417d0:	00432fc0 	call	432fc <__malloc_lock>
   417d4:	888005f0 	cmpltui	r2,r17,23
   417d8:	1000521e 	bne	r2,zero,41924 <_realloc_r+0x194>
   417dc:	017ffe04 	movi	r5,-8
   417e0:	8962703a 	and	r17,r17,r5
   417e4:	8807883a 	mov	r3,r17
   417e8:	88005116 	blt	r17,zero,41930 <_realloc_r+0x1a0>
   417ec:	8c805036 	bltu	r17,r18,41930 <_realloc_r+0x1a0>
   417f0:	80bfff17 	ldw	r2,-4(r16)
   417f4:	017fff04 	movi	r5,-4
   417f8:	857ffe04 	addi	r21,r16,-8
   417fc:	1168703a 	and	r20,r2,r5
   41800:	ad2d883a 	add	r22,r21,r20
   41804:	a0c0390e 	bge	r20,r3,418ec <_realloc_r+0x15c>
   41808:	07000134 	movhi	fp,4
   4180c:	e712b304 	addi	fp,fp,19148
   41810:	e2000217 	ldw	r8,8(fp)
   41814:	b1000117 	ldw	r4,4(r22)
   41818:	45808e26 	beq	r8,r22,41a54 <_realloc_r+0x2c4>
   4181c:	01bfff84 	movi	r6,-2
   41820:	218c703a 	and	r6,r4,r6
   41824:	b18d883a 	add	r6,r22,r6
   41828:	31800117 	ldw	r6,4(r6)
   4182c:	3180004c 	andi	r6,r6,1
   41830:	30004f1e 	bne	r6,zero,41970 <_realloc_r+0x1e0>
   41834:	2148703a 	and	r4,r4,r5
   41838:	a10b883a 	add	r5,r20,r4
   4183c:	28c0bf0e 	bge	r5,r3,41b3c <_realloc_r+0x3ac>
   41840:	1080004c 	andi	r2,r2,1
   41844:	10004c1e 	bne	r2,zero,41978 <_realloc_r+0x1e8>
   41848:	81fffe17 	ldw	r7,-8(r16)
   4184c:	00bfff04 	movi	r2,-4
   41850:	a9cfc83a 	sub	r7,r21,r7
   41854:	39400117 	ldw	r5,4(r7)
   41858:	288a703a 	and	r5,r5,r2
   4185c:	b0000426 	beq	r22,zero,41870 <_realloc_r+0xe0>
   41860:	a16f883a 	add	r23,r20,r5
   41864:	b92f883a 	add	r23,r23,r4
   41868:	4580bf26 	beq	r8,r22,41b68 <_realloc_r+0x3d8>
   4186c:	b8c0930e 	bge	r23,r3,41abc <_realloc_r+0x32c>
   41870:	38004126 	beq	r7,zero,41978 <_realloc_r+0x1e8>
   41874:	a16f883a 	add	r23,r20,r5
   41878:	b8c03f16 	blt	r23,r3,41978 <_realloc_r+0x1e8>
   4187c:	38800317 	ldw	r2,12(r7)
   41880:	38c00217 	ldw	r3,8(r7)
   41884:	a1bfff04 	addi	r6,r20,-4
   41888:	31400968 	cmpgeui	r5,r6,37
   4188c:	18800315 	stw	r2,12(r3)
   41890:	10c00215 	stw	r3,8(r2)
   41894:	39000204 	addi	r4,r7,8
   41898:	3ded883a 	add	r22,r7,r23
   4189c:	2800941e 	bne	r5,zero,41af0 <_realloc_r+0x360>
   418a0:	30800530 	cmpltui	r2,r6,20
   418a4:	80c00017 	ldw	r3,0(r16)
   418a8:	1000df1e 	bne	r2,zero,41c28 <_realloc_r+0x498>
   418ac:	38c00215 	stw	r3,8(r7)
   418b0:	80c00117 	ldw	r3,4(r16)
   418b4:	30800728 	cmpgeui	r2,r6,28
   418b8:	38c00315 	stw	r3,12(r7)
   418bc:	1000dc1e 	bne	r2,zero,41c30 <_realloc_r+0x4a0>
   418c0:	80c00217 	ldw	r3,8(r16)
   418c4:	38800404 	addi	r2,r7,16
   418c8:	84000204 	addi	r16,r16,8
   418cc:	10c00015 	stw	r3,0(r2)
   418d0:	80c00117 	ldw	r3,4(r16)
   418d4:	b829883a 	mov	r20,r23
   418d8:	382b883a 	mov	r21,r7
   418dc:	10c00115 	stw	r3,4(r2)
   418e0:	80c00217 	ldw	r3,8(r16)
   418e4:	2021883a 	mov	r16,r4
   418e8:	10c00215 	stw	r3,8(r2)
   418ec:	a9800117 	ldw	r6,4(r21)
   418f0:	a445c83a 	sub	r2,r20,r17
   418f4:	10c00430 	cmpltui	r3,r2,16
   418f8:	3180004c 	andi	r6,r6,1
   418fc:	18004926 	beq	r3,zero,41a24 <_realloc_r+0x294>
   41900:	a18cb03a 	or	r6,r20,r6
   41904:	a9800115 	stw	r6,4(r21)
   41908:	b0800117 	ldw	r2,4(r22)
   4190c:	10800054 	ori	r2,r2,1
   41910:	b0800115 	stw	r2,4(r22)
   41914:	9809883a 	mov	r4,r19
   41918:	00433200 	call	43320 <__malloc_unlock>
   4191c:	8025883a 	mov	r18,r16
   41920:	00000606 	br	4193c <_realloc_r+0x1ac>
   41924:	04400404 	movi	r17,16
   41928:	00c00404 	movi	r3,16
   4192c:	8cbfb02e 	bgeu	r17,r18,417f0 <_realloc_r+0x60>
   41930:	00800304 	movi	r2,12
   41934:	98800015 	stw	r2,0(r19)
   41938:	0025883a 	mov	r18,zero
   4193c:	9005883a 	mov	r2,r18
   41940:	dfc00a17 	ldw	ra,40(sp)
   41944:	df000917 	ldw	fp,36(sp)
   41948:	ddc00817 	ldw	r23,32(sp)
   4194c:	dd800717 	ldw	r22,28(sp)
   41950:	dd400617 	ldw	r21,24(sp)
   41954:	dd000517 	ldw	r20,20(sp)
   41958:	dcc00417 	ldw	r19,16(sp)
   4195c:	dc800317 	ldw	r18,12(sp)
   41960:	dc400217 	ldw	r17,8(sp)
   41964:	dc000117 	ldw	r16,4(sp)
   41968:	dec00b04 	addi	sp,sp,44
   4196c:	f800283a 	ret
   41970:	1080004c 	andi	r2,r2,1
   41974:	10006c26 	beq	r2,zero,41b28 <_realloc_r+0x398>
   41978:	900b883a 	mov	r5,r18
   4197c:	9809883a 	mov	r4,r19
   41980:	0040bc00 	call	40bc0 <_malloc_r>
   41984:	1025883a 	mov	r18,r2
   41988:	10001626 	beq	r2,zero,419e4 <_realloc_r+0x254>
   4198c:	80bfff17 	ldw	r2,-4(r16)
   41990:	013fff84 	movi	r4,-2
   41994:	90fffe04 	addi	r3,r18,-8
   41998:	1104703a 	and	r2,r2,r4
   4199c:	a885883a 	add	r2,r21,r2
   419a0:	10c05b26 	beq	r2,r3,41b10 <_realloc_r+0x380>
   419a4:	a1bfff04 	addi	r6,r20,-4
   419a8:	30800968 	cmpgeui	r2,r6,37
   419ac:	10006a1e 	bne	r2,zero,41b58 <_realloc_r+0x3c8>
   419b0:	30800530 	cmpltui	r2,r6,20
   419b4:	81000017 	ldw	r4,0(r16)
   419b8:	10003726 	beq	r2,zero,41a98 <_realloc_r+0x308>
   419bc:	9005883a 	mov	r2,r18
   419c0:	8007883a 	mov	r3,r16
   419c4:	11000015 	stw	r4,0(r2)
   419c8:	19000117 	ldw	r4,4(r3)
   419cc:	11000115 	stw	r4,4(r2)
   419d0:	18c00217 	ldw	r3,8(r3)
   419d4:	10c00215 	stw	r3,8(r2)
   419d8:	800b883a 	mov	r5,r16
   419dc:	9809883a 	mov	r4,r19
   419e0:	00425780 	call	42578 <_free_r>
   419e4:	9809883a 	mov	r4,r19
   419e8:	00433200 	call	43320 <__malloc_unlock>
   419ec:	003fd306 	br	4193c <_realloc_r+0x1ac>
   419f0:	300b883a 	mov	r5,r6
   419f4:	dfc00a17 	ldw	ra,40(sp)
   419f8:	df000917 	ldw	fp,36(sp)
   419fc:	ddc00817 	ldw	r23,32(sp)
   41a00:	dd800717 	ldw	r22,28(sp)
   41a04:	dd400617 	ldw	r21,24(sp)
   41a08:	dd000517 	ldw	r20,20(sp)
   41a0c:	dcc00417 	ldw	r19,16(sp)
   41a10:	dc800317 	ldw	r18,12(sp)
   41a14:	dc400217 	ldw	r17,8(sp)
   41a18:	dc000117 	ldw	r16,4(sp)
   41a1c:	dec00b04 	addi	sp,sp,44
   41a20:	0040bc01 	jmpi	40bc0 <_malloc_r>
   41a24:	344cb03a 	or	r6,r6,r17
   41a28:	a9800115 	stw	r6,4(r21)
   41a2c:	ac4b883a 	add	r5,r21,r17
   41a30:	10800054 	ori	r2,r2,1
   41a34:	28800115 	stw	r2,4(r5)
   41a38:	b0800117 	ldw	r2,4(r22)
   41a3c:	29400204 	addi	r5,r5,8
   41a40:	9809883a 	mov	r4,r19
   41a44:	10800054 	ori	r2,r2,1
   41a48:	b0800115 	stw	r2,4(r22)
   41a4c:	00425780 	call	42578 <_free_r>
   41a50:	003fb006 	br	41914 <_realloc_r+0x184>
   41a54:	2148703a 	and	r4,r4,r5
   41a58:	a10b883a 	add	r5,r20,r4
   41a5c:	89800404 	addi	r6,r17,16
   41a60:	29bf7716 	blt	r5,r6,41840 <_realloc_r+0xb0>
   41a64:	ac6b883a 	add	r21,r21,r17
   41a68:	2c45c83a 	sub	r2,r5,r17
   41a6c:	e5400215 	stw	r21,8(fp)
   41a70:	10800054 	ori	r2,r2,1
   41a74:	a8800115 	stw	r2,4(r21)
   41a78:	80bfff17 	ldw	r2,-4(r16)
   41a7c:	9809883a 	mov	r4,r19
   41a80:	8025883a 	mov	r18,r16
   41a84:	1080004c 	andi	r2,r2,1
   41a88:	1462b03a 	or	r17,r2,r17
   41a8c:	847fff15 	stw	r17,-4(r16)
   41a90:	00433200 	call	43320 <__malloc_unlock>
   41a94:	003fa906 	br	4193c <_realloc_r+0x1ac>
   41a98:	91000015 	stw	r4,0(r18)
   41a9c:	80c00117 	ldw	r3,4(r16)
   41aa0:	30800728 	cmpgeui	r2,r6,28
   41aa4:	90c00115 	stw	r3,4(r18)
   41aa8:	1000551e 	bne	r2,zero,41c00 <_realloc_r+0x470>
   41aac:	81000217 	ldw	r4,8(r16)
   41ab0:	80c00204 	addi	r3,r16,8
   41ab4:	90800204 	addi	r2,r18,8
   41ab8:	003fc206 	br	419c4 <_realloc_r+0x234>
   41abc:	b0800317 	ldw	r2,12(r22)
   41ac0:	b0c00217 	ldw	r3,8(r22)
   41ac4:	a1bfff04 	addi	r6,r20,-4
   41ac8:	31400968 	cmpgeui	r5,r6,37
   41acc:	18800315 	stw	r2,12(r3)
   41ad0:	10c00215 	stw	r3,8(r2)
   41ad4:	38c00217 	ldw	r3,8(r7)
   41ad8:	38800317 	ldw	r2,12(r7)
   41adc:	39000204 	addi	r4,r7,8
   41ae0:	3ded883a 	add	r22,r7,r23
   41ae4:	18800315 	stw	r2,12(r3)
   41ae8:	10c00215 	stw	r3,8(r2)
   41aec:	283f6c26 	beq	r5,zero,418a0 <_realloc_r+0x110>
   41af0:	800b883a 	mov	r5,r16
   41af4:	d9c00015 	stw	r7,0(sp)
   41af8:	00415740 	call	41574 <memmove>
   41afc:	d9c00017 	ldw	r7,0(sp)
   41b00:	1021883a 	mov	r16,r2
   41b04:	b829883a 	mov	r20,r23
   41b08:	382b883a 	mov	r21,r7
   41b0c:	003f7706 	br	418ec <_realloc_r+0x15c>
   41b10:	90bfff17 	ldw	r2,-4(r18)
   41b14:	00ffff04 	movi	r3,-4
   41b18:	10c4703a 	and	r2,r2,r3
   41b1c:	a0a9883a 	add	r20,r20,r2
   41b20:	ad2d883a 	add	r22,r21,r20
   41b24:	003f7106 	br	418ec <_realloc_r+0x15c>
   41b28:	81fffe17 	ldw	r7,-8(r16)
   41b2c:	a9cfc83a 	sub	r7,r21,r7
   41b30:	39000117 	ldw	r4,4(r7)
   41b34:	214a703a 	and	r5,r4,r5
   41b38:	003f4d06 	br	41870 <_realloc_r+0xe0>
   41b3c:	b0800317 	ldw	r2,12(r22)
   41b40:	b0c00217 	ldw	r3,8(r22)
   41b44:	2829883a 	mov	r20,r5
   41b48:	a96d883a 	add	r22,r21,r5
   41b4c:	18800315 	stw	r2,12(r3)
   41b50:	10c00215 	stw	r3,8(r2)
   41b54:	003f6506 	br	418ec <_realloc_r+0x15c>
   41b58:	800b883a 	mov	r5,r16
   41b5c:	9009883a 	mov	r4,r18
   41b60:	00415740 	call	41574 <memmove>
   41b64:	003f9c06 	br	419d8 <_realloc_r+0x248>
   41b68:	88800404 	addi	r2,r17,16
   41b6c:	b8bf4016 	blt	r23,r2,41870 <_realloc_r+0xe0>
   41b70:	38800317 	ldw	r2,12(r7)
   41b74:	38c00217 	ldw	r3,8(r7)
   41b78:	a1bfff04 	addi	r6,r20,-4
   41b7c:	31000968 	cmpgeui	r4,r6,37
   41b80:	18800315 	stw	r2,12(r3)
   41b84:	10c00215 	stw	r3,8(r2)
   41b88:	3c800204 	addi	r18,r7,8
   41b8c:	20003b1e 	bne	r4,zero,41c7c <_realloc_r+0x4ec>
   41b90:	30800530 	cmpltui	r2,r6,20
   41b94:	80c00017 	ldw	r3,0(r16)
   41b98:	1000361e 	bne	r2,zero,41c74 <_realloc_r+0x4e4>
   41b9c:	38c00215 	stw	r3,8(r7)
   41ba0:	80c00117 	ldw	r3,4(r16)
   41ba4:	30800728 	cmpgeui	r2,r6,28
   41ba8:	38c00315 	stw	r3,12(r7)
   41bac:	1000401e 	bne	r2,zero,41cb0 <_realloc_r+0x520>
   41bb0:	80c00217 	ldw	r3,8(r16)
   41bb4:	38800404 	addi	r2,r7,16
   41bb8:	84000204 	addi	r16,r16,8
   41bbc:	10c00015 	stw	r3,0(r2)
   41bc0:	80c00117 	ldw	r3,4(r16)
   41bc4:	10c00115 	stw	r3,4(r2)
   41bc8:	80c00217 	ldw	r3,8(r16)
   41bcc:	10c00215 	stw	r3,8(r2)
   41bd0:	3c47883a 	add	r3,r7,r17
   41bd4:	bc45c83a 	sub	r2,r23,r17
   41bd8:	e0c00215 	stw	r3,8(fp)
   41bdc:	10800054 	ori	r2,r2,1
   41be0:	18800115 	stw	r2,4(r3)
   41be4:	38800117 	ldw	r2,4(r7)
   41be8:	9809883a 	mov	r4,r19
   41bec:	1080004c 	andi	r2,r2,1
   41bf0:	1462b03a 	or	r17,r2,r17
   41bf4:	3c400115 	stw	r17,4(r7)
   41bf8:	00433200 	call	43320 <__malloc_unlock>
   41bfc:	003f4f06 	br	4193c <_realloc_r+0x1ac>
   41c00:	80800217 	ldw	r2,8(r16)
   41c04:	31800920 	cmpeqi	r6,r6,36
   41c08:	90800215 	stw	r2,8(r18)
   41c0c:	80800317 	ldw	r2,12(r16)
   41c10:	90800315 	stw	r2,12(r18)
   41c14:	81000417 	ldw	r4,16(r16)
   41c18:	30000f1e 	bne	r6,zero,41c58 <_realloc_r+0x4c8>
   41c1c:	80c00404 	addi	r3,r16,16
   41c20:	90800404 	addi	r2,r18,16
   41c24:	003f6706 	br	419c4 <_realloc_r+0x234>
   41c28:	2005883a 	mov	r2,r4
   41c2c:	003f2706 	br	418cc <_realloc_r+0x13c>
   41c30:	80800217 	ldw	r2,8(r16)
   41c34:	31800920 	cmpeqi	r6,r6,36
   41c38:	38800415 	stw	r2,16(r7)
   41c3c:	80800317 	ldw	r2,12(r16)
   41c40:	38800515 	stw	r2,20(r7)
   41c44:	80c00417 	ldw	r3,16(r16)
   41c48:	3000121e 	bne	r6,zero,41c94 <_realloc_r+0x504>
   41c4c:	38800604 	addi	r2,r7,24
   41c50:	84000404 	addi	r16,r16,16
   41c54:	003f1d06 	br	418cc <_realloc_r+0x13c>
   41c58:	91000415 	stw	r4,16(r18)
   41c5c:	81000517 	ldw	r4,20(r16)
   41c60:	80c00604 	addi	r3,r16,24
   41c64:	90800604 	addi	r2,r18,24
   41c68:	91000515 	stw	r4,20(r18)
   41c6c:	81000617 	ldw	r4,24(r16)
   41c70:	003f5406 	br	419c4 <_realloc_r+0x234>
   41c74:	9005883a 	mov	r2,r18
   41c78:	003fd006 	br	41bbc <_realloc_r+0x42c>
   41c7c:	800b883a 	mov	r5,r16
   41c80:	9009883a 	mov	r4,r18
   41c84:	d9c00015 	stw	r7,0(sp)
   41c88:	00415740 	call	41574 <memmove>
   41c8c:	d9c00017 	ldw	r7,0(sp)
   41c90:	003fcf06 	br	41bd0 <_realloc_r+0x440>
   41c94:	84000604 	addi	r16,r16,24
   41c98:	38c00615 	stw	r3,24(r7)
   41c9c:	80ffff17 	ldw	r3,-4(r16)
   41ca0:	38800804 	addi	r2,r7,32
   41ca4:	38c00715 	stw	r3,28(r7)
   41ca8:	80c00017 	ldw	r3,0(r16)
   41cac:	003f0706 	br	418cc <_realloc_r+0x13c>
   41cb0:	80800217 	ldw	r2,8(r16)
   41cb4:	31800920 	cmpeqi	r6,r6,36
   41cb8:	38800415 	stw	r2,16(r7)
   41cbc:	80800317 	ldw	r2,12(r16)
   41cc0:	38800515 	stw	r2,20(r7)
   41cc4:	80c00417 	ldw	r3,16(r16)
   41cc8:	3000031e 	bne	r6,zero,41cd8 <_realloc_r+0x548>
   41ccc:	38800604 	addi	r2,r7,24
   41cd0:	84000404 	addi	r16,r16,16
   41cd4:	003fb906 	br	41bbc <_realloc_r+0x42c>
   41cd8:	84000604 	addi	r16,r16,24
   41cdc:	38c00615 	stw	r3,24(r7)
   41ce0:	80ffff17 	ldw	r3,-4(r16)
   41ce4:	38800804 	addi	r2,r7,32
   41ce8:	38c00715 	stw	r3,28(r7)
   41cec:	80c00017 	ldw	r3,0(r16)
   41cf0:	003fb206 	br	41bbc <_realloc_r+0x42c>

00041cf4 <_sbrk_r>:
   41cf4:	defffe04 	addi	sp,sp,-8
   41cf8:	dc000015 	stw	r16,0(sp)
   41cfc:	00800134 	movhi	r2,4
   41d00:	2021883a 	mov	r16,r4
   41d04:	2809883a 	mov	r4,r5
   41d08:	dfc00115 	stw	ra,4(sp)
   41d0c:	1016c315 	stw	zero,23308(r2)
   41d10:	00434d40 	call	434d4 <sbrk>
   41d14:	10ffffd8 	cmpnei	r3,r2,-1
   41d18:	18000426 	beq	r3,zero,41d2c <_sbrk_r+0x38>
   41d1c:	dfc00117 	ldw	ra,4(sp)
   41d20:	dc000017 	ldw	r16,0(sp)
   41d24:	dec00204 	addi	sp,sp,8
   41d28:	f800283a 	ret
   41d2c:	00c00134 	movhi	r3,4
   41d30:	18d6c317 	ldw	r3,23308(r3)
   41d34:	183ff926 	beq	r3,zero,41d1c <_sbrk_r+0x28>
   41d38:	80c00015 	stw	r3,0(r16)
   41d3c:	dfc00117 	ldw	ra,4(sp)
   41d40:	dc000017 	ldw	r16,0(sp)
   41d44:	dec00204 	addi	sp,sp,8
   41d48:	f800283a 	ret

00041d4c <__sread>:
   41d4c:	defffe04 	addi	sp,sp,-8
   41d50:	dc000015 	stw	r16,0(sp)
   41d54:	2821883a 	mov	r16,r5
   41d58:	2940038f 	ldh	r5,14(r5)
   41d5c:	dfc00115 	stw	ra,4(sp)
   41d60:	0042ab00 	call	42ab0 <_read_r>
   41d64:	10000716 	blt	r2,zero,41d84 <__sread+0x38>
   41d68:	80c01417 	ldw	r3,80(r16)
   41d6c:	1887883a 	add	r3,r3,r2
   41d70:	80c01415 	stw	r3,80(r16)
   41d74:	dfc00117 	ldw	ra,4(sp)
   41d78:	dc000017 	ldw	r16,0(sp)
   41d7c:	dec00204 	addi	sp,sp,8
   41d80:	f800283a 	ret
   41d84:	80c0030b 	ldhu	r3,12(r16)
   41d88:	18fbffcc 	andi	r3,r3,61439
   41d8c:	80c0030d 	sth	r3,12(r16)
   41d90:	dfc00117 	ldw	ra,4(sp)
   41d94:	dc000017 	ldw	r16,0(sp)
   41d98:	dec00204 	addi	sp,sp,8
   41d9c:	f800283a 	ret

00041da0 <__seofread>:
   41da0:	0005883a 	mov	r2,zero
   41da4:	f800283a 	ret

00041da8 <__swrite>:
   41da8:	2880030b 	ldhu	r2,12(r5)
   41dac:	defffb04 	addi	sp,sp,-20
   41db0:	dcc00315 	stw	r19,12(sp)
   41db4:	dc800215 	stw	r18,8(sp)
   41db8:	dc400115 	stw	r17,4(sp)
   41dbc:	dc000015 	stw	r16,0(sp)
   41dc0:	dfc00415 	stw	ra,16(sp)
   41dc4:	10c0400c 	andi	r3,r2,256
   41dc8:	2821883a 	mov	r16,r5
   41dcc:	2023883a 	mov	r17,r4
   41dd0:	2940038f 	ldh	r5,14(r5)
   41dd4:	3025883a 	mov	r18,r6
   41dd8:	3827883a 	mov	r19,r7
   41ddc:	18000c1e 	bne	r3,zero,41e10 <__swrite+0x68>
   41de0:	10bbffcc 	andi	r2,r2,61439
   41de4:	980f883a 	mov	r7,r19
   41de8:	900d883a 	mov	r6,r18
   41dec:	8809883a 	mov	r4,r17
   41df0:	8080030d 	sth	r2,12(r16)
   41df4:	dfc00417 	ldw	ra,16(sp)
   41df8:	dcc00317 	ldw	r19,12(sp)
   41dfc:	dc800217 	ldw	r18,8(sp)
   41e00:	dc400117 	ldw	r17,4(sp)
   41e04:	dc000017 	ldw	r16,0(sp)
   41e08:	dec00504 	addi	sp,sp,20
   41e0c:	0041e8c1 	jmpi	41e8c <_write_r>
   41e10:	01c00084 	movi	r7,2
   41e14:	000d883a 	mov	r6,zero
   41e18:	00428740 	call	42874 <_lseek_r>
   41e1c:	8080030b 	ldhu	r2,12(r16)
   41e20:	8140038f 	ldh	r5,14(r16)
   41e24:	003fee06 	br	41de0 <__swrite+0x38>

00041e28 <__sseek>:
   41e28:	defffe04 	addi	sp,sp,-8
   41e2c:	dc000015 	stw	r16,0(sp)
   41e30:	2821883a 	mov	r16,r5
   41e34:	2940038f 	ldh	r5,14(r5)
   41e38:	dfc00115 	stw	ra,4(sp)
   41e3c:	00428740 	call	42874 <_lseek_r>
   41e40:	10ffffd8 	cmpnei	r3,r2,-1
   41e44:	18000826 	beq	r3,zero,41e68 <__sseek+0x40>
   41e48:	80c0030b 	ldhu	r3,12(r16)
   41e4c:	80801415 	stw	r2,80(r16)
   41e50:	18c40014 	ori	r3,r3,4096
   41e54:	80c0030d 	sth	r3,12(r16)
   41e58:	dfc00117 	ldw	ra,4(sp)
   41e5c:	dc000017 	ldw	r16,0(sp)
   41e60:	dec00204 	addi	sp,sp,8
   41e64:	f800283a 	ret
   41e68:	80c0030b 	ldhu	r3,12(r16)
   41e6c:	18fbffcc 	andi	r3,r3,61439
   41e70:	80c0030d 	sth	r3,12(r16)
   41e74:	dfc00117 	ldw	ra,4(sp)
   41e78:	dc000017 	ldw	r16,0(sp)
   41e7c:	dec00204 	addi	sp,sp,8
   41e80:	f800283a 	ret

00041e84 <__sclose>:
   41e84:	2940038f 	ldh	r5,14(r5)
   41e88:	004204c1 	jmpi	4204c <_close_r>

00041e8c <_write_r>:
   41e8c:	2807883a 	mov	r3,r5
   41e90:	defffe04 	addi	sp,sp,-8
   41e94:	dc000015 	stw	r16,0(sp)
   41e98:	300b883a 	mov	r5,r6
   41e9c:	00800134 	movhi	r2,4
   41ea0:	380d883a 	mov	r6,r7
   41ea4:	2021883a 	mov	r16,r4
   41ea8:	1809883a 	mov	r4,r3
   41eac:	dfc00115 	stw	ra,4(sp)
   41eb0:	1016c315 	stw	zero,23308(r2)
   41eb4:	00435f80 	call	435f8 <write>
   41eb8:	10ffffd8 	cmpnei	r3,r2,-1
   41ebc:	18000426 	beq	r3,zero,41ed0 <_write_r+0x44>
   41ec0:	dfc00117 	ldw	ra,4(sp)
   41ec4:	dc000017 	ldw	r16,0(sp)
   41ec8:	dec00204 	addi	sp,sp,8
   41ecc:	f800283a 	ret
   41ed0:	00c00134 	movhi	r3,4
   41ed4:	18d6c317 	ldw	r3,23308(r3)
   41ed8:	183ff926 	beq	r3,zero,41ec0 <_write_r+0x34>
   41edc:	80c00015 	stw	r3,0(r16)
   41ee0:	dfc00117 	ldw	ra,4(sp)
   41ee4:	dc000017 	ldw	r16,0(sp)
   41ee8:	dec00204 	addi	sp,sp,8
   41eec:	f800283a 	ret

00041ef0 <__swsetup_r>:
   41ef0:	00800134 	movhi	r2,4
   41ef4:	10942b17 	ldw	r2,20652(r2)
   41ef8:	defffd04 	addi	sp,sp,-12
   41efc:	dc400115 	stw	r17,4(sp)
   41f00:	dc000015 	stw	r16,0(sp)
   41f04:	dfc00215 	stw	ra,8(sp)
   41f08:	2023883a 	mov	r17,r4
   41f0c:	2821883a 	mov	r16,r5
   41f10:	10000226 	beq	r2,zero,41f1c <__swsetup_r+0x2c>
   41f14:	10c00e17 	ldw	r3,56(r2)
   41f18:	18003326 	beq	r3,zero,41fe8 <__swsetup_r+0xf8>
   41f1c:	8180030b 	ldhu	r6,12(r16)
   41f20:	30c0020c 	andi	r3,r6,8
   41f24:	3005883a 	mov	r2,r6
   41f28:	18000f26 	beq	r3,zero,41f68 <__swsetup_r+0x78>
   41f2c:	80c00417 	ldw	r3,16(r16)
   41f30:	18001626 	beq	r3,zero,41f8c <__swsetup_r+0x9c>
   41f34:	1100004c 	andi	r4,r2,1
   41f38:	20001f1e 	bne	r4,zero,41fb8 <__swsetup_r+0xc8>
   41f3c:	1100008c 	andi	r4,r2,2
   41f40:	20002c1e 	bne	r4,zero,41ff4 <__swsetup_r+0x104>
   41f44:	81000517 	ldw	r4,20(r16)
   41f48:	81000215 	stw	r4,8(r16)
   41f4c:	18001f26 	beq	r3,zero,41fcc <__swsetup_r+0xdc>
   41f50:	0005883a 	mov	r2,zero
   41f54:	dfc00217 	ldw	ra,8(sp)
   41f58:	dc400117 	ldw	r17,4(sp)
   41f5c:	dc000017 	ldw	r16,0(sp)
   41f60:	dec00304 	addi	sp,sp,12
   41f64:	f800283a 	ret
   41f68:	3080040c 	andi	r2,r6,16
   41f6c:	10003126 	beq	r2,zero,42034 <__swsetup_r+0x144>
   41f70:	3080010c 	andi	r2,r6,4
   41f74:	1000211e 	bne	r2,zero,41ffc <__swsetup_r+0x10c>
   41f78:	80c00417 	ldw	r3,16(r16)
   41f7c:	30800214 	ori	r2,r6,8
   41f80:	8080030d 	sth	r2,12(r16)
   41f84:	100d883a 	mov	r6,r2
   41f88:	183fea1e 	bne	r3,zero,41f34 <__swsetup_r+0x44>
   41f8c:	1100a00c 	andi	r4,r2,640
   41f90:	21008020 	cmpeqi	r4,r4,512
   41f94:	203fe71e 	bne	r4,zero,41f34 <__swsetup_r+0x44>
   41f98:	8809883a 	mov	r4,r17
   41f9c:	800b883a 	mov	r5,r16
   41fa0:	00429700 	call	42970 <__smakebuf_r>
   41fa4:	8180030b 	ldhu	r6,12(r16)
   41fa8:	80c00417 	ldw	r3,16(r16)
   41fac:	3005883a 	mov	r2,r6
   41fb0:	1100004c 	andi	r4,r2,1
   41fb4:	203fe126 	beq	r4,zero,41f3c <__swsetup_r+0x4c>
   41fb8:	81000517 	ldw	r4,20(r16)
   41fbc:	80000215 	stw	zero,8(r16)
   41fc0:	0109c83a 	sub	r4,zero,r4
   41fc4:	81000615 	stw	r4,24(r16)
   41fc8:	183fe11e 	bne	r3,zero,41f50 <__swsetup_r+0x60>
   41fcc:	10c0200c 	andi	r3,r2,128
   41fd0:	0005883a 	mov	r2,zero
   41fd4:	183fdf26 	beq	r3,zero,41f54 <__swsetup_r+0x64>
   41fd8:	31801014 	ori	r6,r6,64
   41fdc:	8180030d 	sth	r6,12(r16)
   41fe0:	00bfffc4 	movi	r2,-1
   41fe4:	003fdb06 	br	41f54 <__swsetup_r+0x64>
   41fe8:	1009883a 	mov	r4,r2
   41fec:	004057c0 	call	4057c <__sinit>
   41ff0:	003fca06 	br	41f1c <__swsetup_r+0x2c>
   41ff4:	0009883a 	mov	r4,zero
   41ff8:	003fd306 	br	41f48 <__swsetup_r+0x58>
   41ffc:	81400c17 	ldw	r5,48(r16)
   42000:	28000626 	beq	r5,zero,4201c <__swsetup_r+0x12c>
   42004:	80801004 	addi	r2,r16,64
   42008:	28800326 	beq	r5,r2,42018 <__swsetup_r+0x128>
   4200c:	8809883a 	mov	r4,r17
   42010:	00425780 	call	42578 <_free_r>
   42014:	8180030b 	ldhu	r6,12(r16)
   42018:	80000c15 	stw	zero,48(r16)
   4201c:	80c00417 	ldw	r3,16(r16)
   42020:	00bff6c4 	movi	r2,-37
   42024:	118c703a 	and	r6,r2,r6
   42028:	80000115 	stw	zero,4(r16)
   4202c:	80c00015 	stw	r3,0(r16)
   42030:	003fd206 	br	41f7c <__swsetup_r+0x8c>
   42034:	00800244 	movi	r2,9
   42038:	88800015 	stw	r2,0(r17)
   4203c:	31801014 	ori	r6,r6,64
   42040:	8180030d 	sth	r6,12(r16)
   42044:	00bfffc4 	movi	r2,-1
   42048:	003fc206 	br	41f54 <__swsetup_r+0x64>

0004204c <_close_r>:
   4204c:	defffe04 	addi	sp,sp,-8
   42050:	dc000015 	stw	r16,0(sp)
   42054:	00800134 	movhi	r2,4
   42058:	2021883a 	mov	r16,r4
   4205c:	2809883a 	mov	r4,r5
   42060:	dfc00115 	stw	ra,4(sp)
   42064:	1016c315 	stw	zero,23308(r2)
   42068:	0042dbc0 	call	42dbc <close>
   4206c:	10ffffd8 	cmpnei	r3,r2,-1
   42070:	18000426 	beq	r3,zero,42084 <_close_r+0x38>
   42074:	dfc00117 	ldw	ra,4(sp)
   42078:	dc000017 	ldw	r16,0(sp)
   4207c:	dec00204 	addi	sp,sp,8
   42080:	f800283a 	ret
   42084:	00c00134 	movhi	r3,4
   42088:	18d6c317 	ldw	r3,23308(r3)
   4208c:	183ff926 	beq	r3,zero,42074 <_close_r+0x28>
   42090:	80c00015 	stw	r3,0(r16)
   42094:	dfc00117 	ldw	ra,4(sp)
   42098:	dc000017 	ldw	r16,0(sp)
   4209c:	dec00204 	addi	sp,sp,8
   420a0:	f800283a 	ret

000420a4 <_fclose_r>:
   420a4:	defffc04 	addi	sp,sp,-16
   420a8:	dfc00315 	stw	ra,12(sp)
   420ac:	dc800215 	stw	r18,8(sp)
   420b0:	dc400115 	stw	r17,4(sp)
   420b4:	dc000015 	stw	r16,0(sp)
   420b8:	28000726 	beq	r5,zero,420d8 <_fclose_r+0x34>
   420bc:	2821883a 	mov	r16,r5
   420c0:	2023883a 	mov	r17,r4
   420c4:	20000226 	beq	r4,zero,420d0 <_fclose_r+0x2c>
   420c8:	20800e17 	ldw	r2,56(r4)
   420cc:	10002726 	beq	r2,zero,4216c <_fclose_r+0xc8>
   420d0:	8080030f 	ldh	r2,12(r16)
   420d4:	1000081e 	bne	r2,zero,420f8 <_fclose_r+0x54>
   420d8:	0025883a 	mov	r18,zero
   420dc:	9005883a 	mov	r2,r18
   420e0:	dfc00317 	ldw	ra,12(sp)
   420e4:	dc800217 	ldw	r18,8(sp)
   420e8:	dc400117 	ldw	r17,4(sp)
   420ec:	dc000017 	ldw	r16,0(sp)
   420f0:	dec00404 	addi	sp,sp,16
   420f4:	f800283a 	ret
   420f8:	800b883a 	mov	r5,r16
   420fc:	8809883a 	mov	r4,r17
   42100:	00421ac0 	call	421ac <__sflush_r>
   42104:	80c00b17 	ldw	r3,44(r16)
   42108:	1025883a 	mov	r18,r2
   4210c:	18000426 	beq	r3,zero,42120 <_fclose_r+0x7c>
   42110:	81400717 	ldw	r5,28(r16)
   42114:	8809883a 	mov	r4,r17
   42118:	183ee83a 	callr	r3
   4211c:	10001716 	blt	r2,zero,4217c <_fclose_r+0xd8>
   42120:	8080030b 	ldhu	r2,12(r16)
   42124:	1080200c 	andi	r2,r2,128
   42128:	1000181e 	bne	r2,zero,4218c <_fclose_r+0xe8>
   4212c:	81400c17 	ldw	r5,48(r16)
   42130:	28000526 	beq	r5,zero,42148 <_fclose_r+0xa4>
   42134:	80801004 	addi	r2,r16,64
   42138:	28800226 	beq	r5,r2,42144 <_fclose_r+0xa0>
   4213c:	8809883a 	mov	r4,r17
   42140:	00425780 	call	42578 <_free_r>
   42144:	80000c15 	stw	zero,48(r16)
   42148:	81401117 	ldw	r5,68(r16)
   4214c:	28000326 	beq	r5,zero,4215c <_fclose_r+0xb8>
   42150:	8809883a 	mov	r4,r17
   42154:	00425780 	call	42578 <_free_r>
   42158:	80001115 	stw	zero,68(r16)
   4215c:	004058c0 	call	4058c <__sfp_lock_acquire>
   42160:	8000030d 	sth	zero,12(r16)
   42164:	00405900 	call	40590 <__sfp_lock_release>
   42168:	003fdc06 	br	420dc <_fclose_r+0x38>
   4216c:	004057c0 	call	4057c <__sinit>
   42170:	8080030f 	ldh	r2,12(r16)
   42174:	103fd826 	beq	r2,zero,420d8 <_fclose_r+0x34>
   42178:	003fdf06 	br	420f8 <_fclose_r+0x54>
   4217c:	8080030b 	ldhu	r2,12(r16)
   42180:	04bfffc4 	movi	r18,-1
   42184:	1080200c 	andi	r2,r2,128
   42188:	103fe826 	beq	r2,zero,4212c <_fclose_r+0x88>
   4218c:	81400417 	ldw	r5,16(r16)
   42190:	8809883a 	mov	r4,r17
   42194:	00425780 	call	42578 <_free_r>
   42198:	003fe406 	br	4212c <_fclose_r+0x88>

0004219c <fclose>:
   4219c:	00800134 	movhi	r2,4
   421a0:	200b883a 	mov	r5,r4
   421a4:	11142b17 	ldw	r4,20652(r2)
   421a8:	00420a41 	jmpi	420a4 <_fclose_r>

000421ac <__sflush_r>:
   421ac:	2880030b 	ldhu	r2,12(r5)
   421b0:	defffb04 	addi	sp,sp,-20
   421b4:	dcc00315 	stw	r19,12(sp)
   421b8:	dc000015 	stw	r16,0(sp)
   421bc:	dfc00415 	stw	ra,16(sp)
   421c0:	dc800215 	stw	r18,8(sp)
   421c4:	dc400115 	stw	r17,4(sp)
   421c8:	10c0020c 	andi	r3,r2,8
   421cc:	2821883a 	mov	r16,r5
   421d0:	2027883a 	mov	r19,r4
   421d4:	18003f1e 	bne	r3,zero,422d4 <__sflush_r+0x128>
   421d8:	28c00117 	ldw	r3,4(r5)
   421dc:	10820014 	ori	r2,r2,2048
   421e0:	2880030d 	sth	r2,12(r5)
   421e4:	00c0550e 	bge	zero,r3,4233c <__sflush_r+0x190>
   421e8:	82000a17 	ldw	r8,40(r16)
   421ec:	40003126 	beq	r8,zero,422b4 <__sflush_r+0x108>
   421f0:	9c400017 	ldw	r17,0(r19)
   421f4:	1104000c 	andi	r4,r2,4096
   421f8:	98000015 	stw	zero,0(r19)
   421fc:	81400717 	ldw	r5,28(r16)
   42200:	1007883a 	mov	r3,r2
   42204:	2000521e 	bne	r4,zero,42350 <__sflush_r+0x1a4>
   42208:	01c00044 	movi	r7,1
   4220c:	000d883a 	mov	r6,zero
   42210:	9809883a 	mov	r4,r19
   42214:	403ee83a 	callr	r8
   42218:	10ffffd8 	cmpnei	r3,r2,-1
   4221c:	18005826 	beq	r3,zero,42380 <__sflush_r+0x1d4>
   42220:	80c0030b 	ldhu	r3,12(r16)
   42224:	82000a17 	ldw	r8,40(r16)
   42228:	81400717 	ldw	r5,28(r16)
   4222c:	18c0010c 	andi	r3,r3,4
   42230:	18000626 	beq	r3,zero,4224c <__sflush_r+0xa0>
   42234:	81000117 	ldw	r4,4(r16)
   42238:	80c00c17 	ldw	r3,48(r16)
   4223c:	1105c83a 	sub	r2,r2,r4
   42240:	18000226 	beq	r3,zero,4224c <__sflush_r+0xa0>
   42244:	80c00f17 	ldw	r3,60(r16)
   42248:	10c5c83a 	sub	r2,r2,r3
   4224c:	100d883a 	mov	r6,r2
   42250:	000f883a 	mov	r7,zero
   42254:	9809883a 	mov	r4,r19
   42258:	403ee83a 	callr	r8
   4225c:	10ffffd8 	cmpnei	r3,r2,-1
   42260:	18003d1e 	bne	r3,zero,42358 <__sflush_r+0x1ac>
   42264:	99000017 	ldw	r4,0(r19)
   42268:	80c0030b 	ldhu	r3,12(r16)
   4226c:	20004e26 	beq	r4,zero,423a8 <__sflush_r+0x1fc>
   42270:	21400760 	cmpeqi	r5,r4,29
   42274:	2800021e 	bne	r5,zero,42280 <__sflush_r+0xd4>
   42278:	210005a0 	cmpeqi	r4,r4,22
   4227c:	20002c26 	beq	r4,zero,42330 <__sflush_r+0x184>
   42280:	80800417 	ldw	r2,16(r16)
   42284:	18fdffcc 	andi	r3,r3,63487
   42288:	80c0030d 	sth	r3,12(r16)
   4228c:	80000115 	stw	zero,4(r16)
   42290:	80800015 	stw	r2,0(r16)
   42294:	81400c17 	ldw	r5,48(r16)
   42298:	9c400015 	stw	r17,0(r19)
   4229c:	28000526 	beq	r5,zero,422b4 <__sflush_r+0x108>
   422a0:	80801004 	addi	r2,r16,64
   422a4:	28800226 	beq	r5,r2,422b0 <__sflush_r+0x104>
   422a8:	9809883a 	mov	r4,r19
   422ac:	00425780 	call	42578 <_free_r>
   422b0:	80000c15 	stw	zero,48(r16)
   422b4:	0005883a 	mov	r2,zero
   422b8:	dfc00417 	ldw	ra,16(sp)
   422bc:	dcc00317 	ldw	r19,12(sp)
   422c0:	dc800217 	ldw	r18,8(sp)
   422c4:	dc400117 	ldw	r17,4(sp)
   422c8:	dc000017 	ldw	r16,0(sp)
   422cc:	dec00504 	addi	sp,sp,20
   422d0:	f800283a 	ret
   422d4:	2c800417 	ldw	r18,16(r5)
   422d8:	903ff626 	beq	r18,zero,422b4 <__sflush_r+0x108>
   422dc:	2c400017 	ldw	r17,0(r5)
   422e0:	108000cc 	andi	r2,r2,3
   422e4:	2c800015 	stw	r18,0(r5)
   422e8:	8ca3c83a 	sub	r17,r17,r18
   422ec:	1000161e 	bne	r2,zero,42348 <__sflush_r+0x19c>
   422f0:	28800517 	ldw	r2,20(r5)
   422f4:	80800215 	stw	r2,8(r16)
   422f8:	04400316 	blt	zero,r17,42308 <__sflush_r+0x15c>
   422fc:	003fed06 	br	422b4 <__sflush_r+0x108>
   42300:	90a5883a 	add	r18,r18,r2
   42304:	047feb0e 	bge	zero,r17,422b4 <__sflush_r+0x108>
   42308:	80800917 	ldw	r2,36(r16)
   4230c:	81400717 	ldw	r5,28(r16)
   42310:	880f883a 	mov	r7,r17
   42314:	900d883a 	mov	r6,r18
   42318:	9809883a 	mov	r4,r19
   4231c:	103ee83a 	callr	r2
   42320:	88a3c83a 	sub	r17,r17,r2
   42324:	00bff616 	blt	zero,r2,42300 <__sflush_r+0x154>
   42328:	80c0030b 	ldhu	r3,12(r16)
   4232c:	00bfffc4 	movi	r2,-1
   42330:	18c01014 	ori	r3,r3,64
   42334:	80c0030d 	sth	r3,12(r16)
   42338:	003fdf06 	br	422b8 <__sflush_r+0x10c>
   4233c:	28c00f17 	ldw	r3,60(r5)
   42340:	00ffa916 	blt	zero,r3,421e8 <__sflush_r+0x3c>
   42344:	003fdb06 	br	422b4 <__sflush_r+0x108>
   42348:	0005883a 	mov	r2,zero
   4234c:	003fe906 	br	422f4 <__sflush_r+0x148>
   42350:	80801417 	ldw	r2,80(r16)
   42354:	003fb506 	br	4222c <__sflush_r+0x80>
   42358:	80c0030b 	ldhu	r3,12(r16)
   4235c:	81000417 	ldw	r4,16(r16)
   42360:	80000115 	stw	zero,4(r16)
   42364:	197dffcc 	andi	r5,r3,63487
   42368:	8140030d 	sth	r5,12(r16)
   4236c:	81000015 	stw	r4,0(r16)
   42370:	18c4000c 	andi	r3,r3,4096
   42374:	183fc726 	beq	r3,zero,42294 <__sflush_r+0xe8>
   42378:	80801415 	stw	r2,80(r16)
   4237c:	003fc506 	br	42294 <__sflush_r+0xe8>
   42380:	98c00017 	ldw	r3,0(r19)
   42384:	183fa626 	beq	r3,zero,42220 <__sflush_r+0x74>
   42388:	19000760 	cmpeqi	r4,r3,29
   4238c:	20000e1e 	bne	r4,zero,423c8 <__sflush_r+0x21c>
   42390:	18c00598 	cmpnei	r3,r3,22
   42394:	18000c26 	beq	r3,zero,423c8 <__sflush_r+0x21c>
   42398:	80c0030b 	ldhu	r3,12(r16)
   4239c:	18c01014 	ori	r3,r3,64
   423a0:	80c0030d 	sth	r3,12(r16)
   423a4:	003fc406 	br	422b8 <__sflush_r+0x10c>
   423a8:	81000417 	ldw	r4,16(r16)
   423ac:	197dffcc 	andi	r5,r3,63487
   423b0:	8140030d 	sth	r5,12(r16)
   423b4:	80000115 	stw	zero,4(r16)
   423b8:	81000015 	stw	r4,0(r16)
   423bc:	18c4000c 	andi	r3,r3,4096
   423c0:	183fb426 	beq	r3,zero,42294 <__sflush_r+0xe8>
   423c4:	003fec06 	br	42378 <__sflush_r+0x1cc>
   423c8:	9c400015 	stw	r17,0(r19)
   423cc:	0005883a 	mov	r2,zero
   423d0:	003fb906 	br	422b8 <__sflush_r+0x10c>

000423d4 <_fflush_r>:
   423d4:	defffd04 	addi	sp,sp,-12
   423d8:	dc000115 	stw	r16,4(sp)
   423dc:	dfc00215 	stw	ra,8(sp)
   423e0:	2021883a 	mov	r16,r4
   423e4:	20000226 	beq	r4,zero,423f0 <_fflush_r+0x1c>
   423e8:	20800e17 	ldw	r2,56(r4)
   423ec:	10000726 	beq	r2,zero,4240c <_fflush_r+0x38>
   423f0:	2880030f 	ldh	r2,12(r5)
   423f4:	10000a1e 	bne	r2,zero,42420 <_fflush_r+0x4c>
   423f8:	0005883a 	mov	r2,zero
   423fc:	dfc00217 	ldw	ra,8(sp)
   42400:	dc000117 	ldw	r16,4(sp)
   42404:	dec00304 	addi	sp,sp,12
   42408:	f800283a 	ret
   4240c:	d9400015 	stw	r5,0(sp)
   42410:	004057c0 	call	4057c <__sinit>
   42414:	d9400017 	ldw	r5,0(sp)
   42418:	2880030f 	ldh	r2,12(r5)
   4241c:	103ff626 	beq	r2,zero,423f8 <_fflush_r+0x24>
   42420:	8009883a 	mov	r4,r16
   42424:	dfc00217 	ldw	ra,8(sp)
   42428:	dc000117 	ldw	r16,4(sp)
   4242c:	dec00304 	addi	sp,sp,12
   42430:	00421ac1 	jmpi	421ac <__sflush_r>

00042434 <fflush>:
   42434:	200b883a 	mov	r5,r4
   42438:	20000326 	beq	r4,zero,42448 <fflush+0x14>
   4243c:	00800134 	movhi	r2,4
   42440:	11142b17 	ldw	r4,20652(r2)
   42444:	00423d41 	jmpi	423d4 <_fflush_r>
   42448:	00800134 	movhi	r2,4
   4244c:	11142a17 	ldw	r4,20648(r2)
   42450:	01400134 	movhi	r5,4
   42454:	2948f504 	addi	r5,r5,9172
   42458:	0040b181 	jmpi	40b18 <_fwalk_reent>

0004245c <_malloc_trim_r>:
   4245c:	defffb04 	addi	sp,sp,-20
   42460:	dcc00315 	stw	r19,12(sp)
   42464:	04c00134 	movhi	r19,4
   42468:	dc800215 	stw	r18,8(sp)
   4246c:	dc400115 	stw	r17,4(sp)
   42470:	dc000015 	stw	r16,0(sp)
   42474:	dfc00415 	stw	ra,16(sp)
   42478:	2821883a 	mov	r16,r5
   4247c:	9cd2b304 	addi	r19,r19,19148
   42480:	2025883a 	mov	r18,r4
   42484:	00432fc0 	call	432fc <__malloc_lock>
   42488:	98800217 	ldw	r2,8(r19)
   4248c:	14400117 	ldw	r17,4(r2)
   42490:	00bfff04 	movi	r2,-4
   42494:	88a2703a 	and	r17,r17,r2
   42498:	8c21c83a 	sub	r16,r17,r16
   4249c:	8403fbc4 	addi	r16,r16,4079
   424a0:	8020d33a 	srli	r16,r16,12
   424a4:	843fffc4 	addi	r16,r16,-1
   424a8:	8020933a 	slli	r16,r16,12
   424ac:	80840008 	cmpgei	r2,r16,4096
   424b0:	10000626 	beq	r2,zero,424cc <_malloc_trim_r+0x70>
   424b4:	000b883a 	mov	r5,zero
   424b8:	9009883a 	mov	r4,r18
   424bc:	0041cf40 	call	41cf4 <_sbrk_r>
   424c0:	98c00217 	ldw	r3,8(r19)
   424c4:	1c47883a 	add	r3,r3,r17
   424c8:	10c00a26 	beq	r2,r3,424f4 <_malloc_trim_r+0x98>
   424cc:	9009883a 	mov	r4,r18
   424d0:	00433200 	call	43320 <__malloc_unlock>
   424d4:	0005883a 	mov	r2,zero
   424d8:	dfc00417 	ldw	ra,16(sp)
   424dc:	dcc00317 	ldw	r19,12(sp)
   424e0:	dc800217 	ldw	r18,8(sp)
   424e4:	dc400117 	ldw	r17,4(sp)
   424e8:	dc000017 	ldw	r16,0(sp)
   424ec:	dec00504 	addi	sp,sp,20
   424f0:	f800283a 	ret
   424f4:	040bc83a 	sub	r5,zero,r16
   424f8:	9009883a 	mov	r4,r18
   424fc:	0041cf40 	call	41cf4 <_sbrk_r>
   42500:	10bfffd8 	cmpnei	r2,r2,-1
   42504:	10000d26 	beq	r2,zero,4253c <_malloc_trim_r+0xe0>
   42508:	00800134 	movhi	r2,4
   4250c:	1096c717 	ldw	r2,23324(r2)
   42510:	98c00217 	ldw	r3,8(r19)
   42514:	8c23c83a 	sub	r17,r17,r16
   42518:	8c400054 	ori	r17,r17,1
   4251c:	1421c83a 	sub	r16,r2,r16
   42520:	1c400115 	stw	r17,4(r3)
   42524:	00800134 	movhi	r2,4
   42528:	9009883a 	mov	r4,r18
   4252c:	1416c715 	stw	r16,23324(r2)
   42530:	00433200 	call	43320 <__malloc_unlock>
   42534:	00800044 	movi	r2,1
   42538:	003fe706 	br	424d8 <_malloc_trim_r+0x7c>
   4253c:	000b883a 	mov	r5,zero
   42540:	9009883a 	mov	r4,r18
   42544:	0041cf40 	call	41cf4 <_sbrk_r>
   42548:	99000217 	ldw	r4,8(r19)
   4254c:	1107c83a 	sub	r3,r2,r4
   42550:	19400410 	cmplti	r5,r3,16
   42554:	283fdd1e 	bne	r5,zero,424cc <_malloc_trim_r+0x70>
   42558:	01400134 	movhi	r5,4
   4255c:	29542c17 	ldw	r5,20656(r5)
   42560:	18c00054 	ori	r3,r3,1
   42564:	20c00115 	stw	r3,4(r4)
   42568:	1145c83a 	sub	r2,r2,r5
   4256c:	01400134 	movhi	r5,4
   42570:	2896c715 	stw	r2,23324(r5)
   42574:	003fd506 	br	424cc <_malloc_trim_r+0x70>

00042578 <_free_r>:
   42578:	28004f26 	beq	r5,zero,426b8 <_free_r+0x140>
   4257c:	defffd04 	addi	sp,sp,-12
   42580:	dc400115 	stw	r17,4(sp)
   42584:	dc000015 	stw	r16,0(sp)
   42588:	2023883a 	mov	r17,r4
   4258c:	2821883a 	mov	r16,r5
   42590:	dfc00215 	stw	ra,8(sp)
   42594:	00432fc0 	call	432fc <__malloc_lock>
   42598:	81ffff17 	ldw	r7,-4(r16)
   4259c:	00bfff84 	movi	r2,-2
   425a0:	80fffe04 	addi	r3,r16,-8
   425a4:	3884703a 	and	r2,r7,r2
   425a8:	01000134 	movhi	r4,4
   425ac:	188d883a 	add	r6,r3,r2
   425b0:	2112b304 	addi	r4,r4,19148
   425b4:	31400117 	ldw	r5,4(r6)
   425b8:	22000217 	ldw	r8,8(r4)
   425bc:	027fff04 	movi	r9,-4
   425c0:	2a4a703a 	and	r5,r5,r9
   425c4:	41806426 	beq	r8,r6,42758 <_free_r+0x1e0>
   425c8:	31400115 	stw	r5,4(r6)
   425cc:	39c0004c 	andi	r7,r7,1
   425d0:	3151883a 	add	r8,r6,r5
   425d4:	3800281e 	bne	r7,zero,42678 <_free_r+0x100>
   425d8:	82bffe17 	ldw	r10,-8(r16)
   425dc:	42000117 	ldw	r8,4(r8)
   425e0:	01c00134 	movhi	r7,4
   425e4:	1a87c83a 	sub	r3,r3,r10
   425e8:	1a400217 	ldw	r9,8(r3)
   425ec:	39d2b504 	addi	r7,r7,19156
   425f0:	1285883a 	add	r2,r2,r10
   425f4:	4200004c 	andi	r8,r8,1
   425f8:	49c04c26 	beq	r9,r7,4272c <_free_r+0x1b4>
   425fc:	1a800317 	ldw	r10,12(r3)
   42600:	4a800315 	stw	r10,12(r9)
   42604:	52400215 	stw	r9,8(r10)
   42608:	40007126 	beq	r8,zero,427d0 <_free_r+0x258>
   4260c:	11400054 	ori	r5,r2,1
   42610:	19400115 	stw	r5,4(r3)
   42614:	30800015 	stw	r2,0(r6)
   42618:	11408028 	cmpgeui	r5,r2,512
   4261c:	28002c1e 	bne	r5,zero,426d0 <_free_r+0x158>
   42620:	100ad0fa 	srli	r5,r2,3
   42624:	100cd17a 	srli	r6,r2,5
   42628:	00800044 	movi	r2,1
   4262c:	29400044 	addi	r5,r5,1
   42630:	280a90fa 	slli	r5,r5,3
   42634:	21c00117 	ldw	r7,4(r4)
   42638:	1184983a 	sll	r2,r2,r6
   4263c:	214b883a 	add	r5,r4,r5
   42640:	29800017 	ldw	r6,0(r5)
   42644:	11c4b03a 	or	r2,r2,r7
   42648:	29fffe04 	addi	r7,r5,-8
   4264c:	19c00315 	stw	r7,12(r3)
   42650:	19800215 	stw	r6,8(r3)
   42654:	20800115 	stw	r2,4(r4)
   42658:	28c00015 	stw	r3,0(r5)
   4265c:	30c00315 	stw	r3,12(r6)
   42660:	8809883a 	mov	r4,r17
   42664:	dfc00217 	ldw	ra,8(sp)
   42668:	dc400117 	ldw	r17,4(sp)
   4266c:	dc000017 	ldw	r16,0(sp)
   42670:	dec00304 	addi	sp,sp,12
   42674:	00433201 	jmpi	43320 <__malloc_unlock>
   42678:	41c00117 	ldw	r7,4(r8)
   4267c:	39c0004c 	andi	r7,r7,1
   42680:	38000e1e 	bne	r7,zero,426bc <_free_r+0x144>
   42684:	01c00134 	movhi	r7,4
   42688:	1145883a 	add	r2,r2,r5
   4268c:	39d2b504 	addi	r7,r7,19156
   42690:	31400217 	ldw	r5,8(r6)
   42694:	12400054 	ori	r9,r2,1
   42698:	1891883a 	add	r8,r3,r2
   4269c:	29c05226 	beq	r5,r7,427e8 <_free_r+0x270>
   426a0:	31800317 	ldw	r6,12(r6)
   426a4:	29800315 	stw	r6,12(r5)
   426a8:	31400215 	stw	r5,8(r6)
   426ac:	1a400115 	stw	r9,4(r3)
   426b0:	40800015 	stw	r2,0(r8)
   426b4:	003fd806 	br	42618 <_free_r+0xa0>
   426b8:	f800283a 	ret
   426bc:	11400054 	ori	r5,r2,1
   426c0:	817fff15 	stw	r5,-4(r16)
   426c4:	30800015 	stw	r2,0(r6)
   426c8:	11408028 	cmpgeui	r5,r2,512
   426cc:	283fd426 	beq	r5,zero,42620 <_free_r+0xa8>
   426d0:	100ad27a 	srli	r5,r2,9
   426d4:	29800168 	cmpgeui	r6,r5,5
   426d8:	3000341e 	bne	r6,zero,427ac <_free_r+0x234>
   426dc:	100ad1ba 	srli	r5,r2,6
   426e0:	29800e44 	addi	r6,r5,57
   426e4:	300c90fa 	slli	r6,r6,3
   426e8:	29c00e04 	addi	r7,r5,56
   426ec:	218d883a 	add	r6,r4,r6
   426f0:	31400017 	ldw	r5,0(r6)
   426f4:	31bffe04 	addi	r6,r6,-8
   426f8:	31404226 	beq	r6,r5,42804 <_free_r+0x28c>
   426fc:	01ffff04 	movi	r7,-4
   42700:	29000117 	ldw	r4,4(r5)
   42704:	21c8703a 	and	r4,r4,r7
   42708:	1100022e 	bgeu	r2,r4,42714 <_free_r+0x19c>
   4270c:	29400217 	ldw	r5,8(r5)
   42710:	317ffb1e 	bne	r6,r5,42700 <_free_r+0x188>
   42714:	29800317 	ldw	r6,12(r5)
   42718:	19800315 	stw	r6,12(r3)
   4271c:	19400215 	stw	r5,8(r3)
   42720:	30c00215 	stw	r3,8(r6)
   42724:	28c00315 	stw	r3,12(r5)
   42728:	003fcd06 	br	42660 <_free_r+0xe8>
   4272c:	40004d1e 	bne	r8,zero,42864 <_free_r+0x2ec>
   42730:	31000317 	ldw	r4,12(r6)
   42734:	31800217 	ldw	r6,8(r6)
   42738:	2885883a 	add	r2,r5,r2
   4273c:	11400054 	ori	r5,r2,1
   42740:	31000315 	stw	r4,12(r6)
   42744:	21800215 	stw	r6,8(r4)
   42748:	19400115 	stw	r5,4(r3)
   4274c:	1887883a 	add	r3,r3,r2
   42750:	18800015 	stw	r2,0(r3)
   42754:	003fc206 	br	42660 <_free_r+0xe8>
   42758:	39c0004c 	andi	r7,r7,1
   4275c:	1145883a 	add	r2,r2,r5
   42760:	3800071e 	bne	r7,zero,42780 <_free_r+0x208>
   42764:	81fffe17 	ldw	r7,-8(r16)
   42768:	19c7c83a 	sub	r3,r3,r7
   4276c:	19400317 	ldw	r5,12(r3)
   42770:	19800217 	ldw	r6,8(r3)
   42774:	11c5883a 	add	r2,r2,r7
   42778:	31400315 	stw	r5,12(r6)
   4277c:	29800215 	stw	r6,8(r5)
   42780:	01400134 	movhi	r5,4
   42784:	11800054 	ori	r6,r2,1
   42788:	29542d17 	ldw	r5,20660(r5)
   4278c:	19800115 	stw	r6,4(r3)
   42790:	20c00215 	stw	r3,8(r4)
   42794:	117fb236 	bltu	r2,r5,42660 <_free_r+0xe8>
   42798:	00800134 	movhi	r2,4
   4279c:	1156c217 	ldw	r5,23304(r2)
   427a0:	8809883a 	mov	r4,r17
   427a4:	004245c0 	call	4245c <_malloc_trim_r>
   427a8:	003fad06 	br	42660 <_free_r+0xe8>
   427ac:	29800568 	cmpgeui	r6,r5,21
   427b0:	30000926 	beq	r6,zero,427d8 <_free_r+0x260>
   427b4:	29801568 	cmpgeui	r6,r5,85
   427b8:	3000191e 	bne	r6,zero,42820 <_free_r+0x2a8>
   427bc:	100ad33a 	srli	r5,r2,12
   427c0:	29801bc4 	addi	r6,r5,111
   427c4:	300c90fa 	slli	r6,r6,3
   427c8:	29c01b84 	addi	r7,r5,110
   427cc:	003fc706 	br	426ec <_free_r+0x174>
   427d0:	1145883a 	add	r2,r2,r5
   427d4:	003fae06 	br	42690 <_free_r+0x118>
   427d8:	29801704 	addi	r6,r5,92
   427dc:	300c90fa 	slli	r6,r6,3
   427e0:	29c016c4 	addi	r7,r5,91
   427e4:	003fc106 	br	426ec <_free_r+0x174>
   427e8:	20c00515 	stw	r3,20(r4)
   427ec:	20c00415 	stw	r3,16(r4)
   427f0:	19c00315 	stw	r7,12(r3)
   427f4:	19c00215 	stw	r7,8(r3)
   427f8:	1a400115 	stw	r9,4(r3)
   427fc:	40800015 	stw	r2,0(r8)
   42800:	003f9706 	br	42660 <_free_r+0xe8>
   42804:	380fd0ba 	srai	r7,r7,2
   42808:	00800044 	movi	r2,1
   4280c:	22000117 	ldw	r8,4(r4)
   42810:	11ce983a 	sll	r7,r2,r7
   42814:	3a0eb03a 	or	r7,r7,r8
   42818:	21c00115 	stw	r7,4(r4)
   4281c:	003fbe06 	br	42718 <_free_r+0x1a0>
   42820:	29805568 	cmpgeui	r6,r5,341
   42824:	3000051e 	bne	r6,zero,4283c <_free_r+0x2c4>
   42828:	100ad3fa 	srli	r5,r2,15
   4282c:	29801e04 	addi	r6,r5,120
   42830:	300c90fa 	slli	r6,r6,3
   42834:	29c01dc4 	addi	r7,r5,119
   42838:	003fac06 	br	426ec <_free_r+0x174>
   4283c:	29415568 	cmpgeui	r5,r5,1365
   42840:	2800051e 	bne	r5,zero,42858 <_free_r+0x2e0>
   42844:	100ad4ba 	srli	r5,r2,18
   42848:	29801f44 	addi	r6,r5,125
   4284c:	300c90fa 	slli	r6,r6,3
   42850:	29c01f04 	addi	r7,r5,124
   42854:	003fa506 	br	426ec <_free_r+0x174>
   42858:	0180fe04 	movi	r6,1016
   4285c:	01c01f84 	movi	r7,126
   42860:	003fa206 	br	426ec <_free_r+0x174>
   42864:	11000054 	ori	r4,r2,1
   42868:	19000115 	stw	r4,4(r3)
   4286c:	30800015 	stw	r2,0(r6)
   42870:	003f7b06 	br	42660 <_free_r+0xe8>

00042874 <_lseek_r>:
   42874:	2807883a 	mov	r3,r5
   42878:	defffe04 	addi	sp,sp,-8
   4287c:	dc000015 	stw	r16,0(sp)
   42880:	300b883a 	mov	r5,r6
   42884:	00800134 	movhi	r2,4
   42888:	380d883a 	mov	r6,r7
   4288c:	2021883a 	mov	r16,r4
   42890:	1809883a 	mov	r4,r3
   42894:	dfc00115 	stw	ra,4(sp)
   42898:	1016c315 	stw	zero,23308(r2)
   4289c:	00431ac0 	call	431ac <lseek>
   428a0:	10ffffd8 	cmpnei	r3,r2,-1
   428a4:	18000426 	beq	r3,zero,428b8 <_lseek_r+0x44>
   428a8:	dfc00117 	ldw	ra,4(sp)
   428ac:	dc000017 	ldw	r16,0(sp)
   428b0:	dec00204 	addi	sp,sp,8
   428b4:	f800283a 	ret
   428b8:	00c00134 	movhi	r3,4
   428bc:	18d6c317 	ldw	r3,23308(r3)
   428c0:	183ff926 	beq	r3,zero,428a8 <_lseek_r+0x34>
   428c4:	80c00015 	stw	r3,0(r16)
   428c8:	dfc00117 	ldw	ra,4(sp)
   428cc:	dc000017 	ldw	r16,0(sp)
   428d0:	dec00204 	addi	sp,sp,8
   428d4:	f800283a 	ret

000428d8 <__swhatbuf_r>:
   428d8:	deffea04 	addi	sp,sp,-88
   428dc:	dc001215 	stw	r16,72(sp)
   428e0:	2821883a 	mov	r16,r5
   428e4:	2940038f 	ldh	r5,14(r5)
   428e8:	dc801415 	stw	r18,80(sp)
   428ec:	dc401315 	stw	r17,76(sp)
   428f0:	dfc01515 	stw	ra,84(sp)
   428f4:	3023883a 	mov	r17,r6
   428f8:	3825883a 	mov	r18,r7
   428fc:	28001016 	blt	r5,zero,42940 <__swhatbuf_r+0x68>
   42900:	d80d883a 	mov	r6,sp
   42904:	0042b140 	call	42b14 <_fstat_r>
   42908:	10000d16 	blt	r2,zero,42940 <__swhatbuf_r+0x68>
   4290c:	d8c00117 	ldw	r3,4(sp)
   42910:	00820004 	movi	r2,2048
   42914:	18fc000c 	andi	r3,r3,61440
   42918:	18c80020 	cmpeqi	r3,r3,8192
   4291c:	90c00015 	stw	r3,0(r18)
   42920:	00c10004 	movi	r3,1024
   42924:	88c00015 	stw	r3,0(r17)
   42928:	dfc01517 	ldw	ra,84(sp)
   4292c:	dc801417 	ldw	r18,80(sp)
   42930:	dc401317 	ldw	r17,76(sp)
   42934:	dc001217 	ldw	r16,72(sp)
   42938:	dec01604 	addi	sp,sp,88
   4293c:	f800283a 	ret
   42940:	8080030b 	ldhu	r2,12(r16)
   42944:	90000015 	stw	zero,0(r18)
   42948:	1080200c 	andi	r2,r2,128
   4294c:	10000426 	beq	r2,zero,42960 <__swhatbuf_r+0x88>
   42950:	00801004 	movi	r2,64
   42954:	88800015 	stw	r2,0(r17)
   42958:	0005883a 	mov	r2,zero
   4295c:	003ff206 	br	42928 <__swhatbuf_r+0x50>
   42960:	00810004 	movi	r2,1024
   42964:	88800015 	stw	r2,0(r17)
   42968:	0005883a 	mov	r2,zero
   4296c:	003fee06 	br	42928 <__swhatbuf_r+0x50>

00042970 <__smakebuf_r>:
   42970:	2880030b 	ldhu	r2,12(r5)
   42974:	defffa04 	addi	sp,sp,-24
   42978:	dc000215 	stw	r16,8(sp)
   4297c:	dfc00515 	stw	ra,20(sp)
   42980:	dc800415 	stw	r18,16(sp)
   42984:	dc400315 	stw	r17,12(sp)
   42988:	1080008c 	andi	r2,r2,2
   4298c:	2821883a 	mov	r16,r5
   42990:	10000b26 	beq	r2,zero,429c0 <__smakebuf_r+0x50>
   42994:	288010c4 	addi	r2,r5,67
   42998:	28800015 	stw	r2,0(r5)
   4299c:	28800415 	stw	r2,16(r5)
   429a0:	00800044 	movi	r2,1
   429a4:	28800515 	stw	r2,20(r5)
   429a8:	dfc00517 	ldw	ra,20(sp)
   429ac:	dc800417 	ldw	r18,16(sp)
   429b0:	dc400317 	ldw	r17,12(sp)
   429b4:	dc000217 	ldw	r16,8(sp)
   429b8:	dec00604 	addi	sp,sp,24
   429bc:	f800283a 	ret
   429c0:	d9c00104 	addi	r7,sp,4
   429c4:	d80d883a 	mov	r6,sp
   429c8:	2023883a 	mov	r17,r4
   429cc:	00428d80 	call	428d8 <__swhatbuf_r>
   429d0:	d9000117 	ldw	r4,4(sp)
   429d4:	1025883a 	mov	r18,r2
   429d8:	2000131e 	bne	r4,zero,42a28 <__smakebuf_r+0xb8>
   429dc:	d9400017 	ldw	r5,0(sp)
   429e0:	8809883a 	mov	r4,r17
   429e4:	0040bc00 	call	40bc0 <_malloc_r>
   429e8:	10001c26 	beq	r2,zero,42a5c <__smakebuf_r+0xec>
   429ec:	01000134 	movhi	r4,4
   429f0:	2100a204 	addi	r4,r4,648
   429f4:	80c0030b 	ldhu	r3,12(r16)
   429f8:	89000f15 	stw	r4,60(r17)
   429fc:	80800015 	stw	r2,0(r16)
   42a00:	80800415 	stw	r2,16(r16)
   42a04:	d8800017 	ldw	r2,0(sp)
   42a08:	d9400117 	ldw	r5,4(sp)
   42a0c:	18c02014 	ori	r3,r3,128
   42a10:	80c0030d 	sth	r3,12(r16)
   42a14:	80800515 	stw	r2,20(r16)
   42a18:	28001d1e 	bne	r5,zero,42a90 <__smakebuf_r+0x120>
   42a1c:	90c6b03a 	or	r3,r18,r3
   42a20:	80c0030d 	sth	r3,12(r16)
   42a24:	003fe006 	br	429a8 <__smakebuf_r+0x38>
   42a28:	8140038f 	ldh	r5,14(r16)
   42a2c:	8809883a 	mov	r4,r17
   42a30:	0042b740 	call	42b74 <_isatty_r>
   42a34:	103fe926 	beq	r2,zero,429dc <__smakebuf_r+0x6c>
   42a38:	8080030b 	ldhu	r2,12(r16)
   42a3c:	80c010c4 	addi	r3,r16,67
   42a40:	80c00015 	stw	r3,0(r16)
   42a44:	10800054 	ori	r2,r2,1
   42a48:	8080030d 	sth	r2,12(r16)
   42a4c:	00800044 	movi	r2,1
   42a50:	80c00415 	stw	r3,16(r16)
   42a54:	80800515 	stw	r2,20(r16)
   42a58:	003fe006 	br	429dc <__smakebuf_r+0x6c>
   42a5c:	8080030b 	ldhu	r2,12(r16)
   42a60:	10c0800c 	andi	r3,r2,512
   42a64:	183fd01e 	bne	r3,zero,429a8 <__smakebuf_r+0x38>
   42a68:	00ffff04 	movi	r3,-4
   42a6c:	10c4703a 	and	r2,r2,r3
   42a70:	10800094 	ori	r2,r2,2
   42a74:	80c010c4 	addi	r3,r16,67
   42a78:	8080030d 	sth	r2,12(r16)
   42a7c:	00800044 	movi	r2,1
   42a80:	80c00015 	stw	r3,0(r16)
   42a84:	80c00415 	stw	r3,16(r16)
   42a88:	80800515 	stw	r2,20(r16)
   42a8c:	003fc606 	br	429a8 <__smakebuf_r+0x38>
   42a90:	8140038f 	ldh	r5,14(r16)
   42a94:	8809883a 	mov	r4,r17
   42a98:	0042b740 	call	42b74 <_isatty_r>
   42a9c:	80c0030b 	ldhu	r3,12(r16)
   42aa0:	103fde26 	beq	r2,zero,42a1c <__smakebuf_r+0xac>
   42aa4:	18ffff0c 	andi	r3,r3,65532
   42aa8:	18c00054 	ori	r3,r3,1
   42aac:	003fdb06 	br	42a1c <__smakebuf_r+0xac>

00042ab0 <_read_r>:
   42ab0:	2807883a 	mov	r3,r5
   42ab4:	defffe04 	addi	sp,sp,-8
   42ab8:	dc000015 	stw	r16,0(sp)
   42abc:	300b883a 	mov	r5,r6
   42ac0:	00800134 	movhi	r2,4
   42ac4:	380d883a 	mov	r6,r7
   42ac8:	2021883a 	mov	r16,r4
   42acc:	1809883a 	mov	r4,r3
   42ad0:	dfc00115 	stw	ra,4(sp)
   42ad4:	1016c315 	stw	zero,23308(r2)
   42ad8:	00433800 	call	43380 <read>
   42adc:	10ffffd8 	cmpnei	r3,r2,-1
   42ae0:	18000426 	beq	r3,zero,42af4 <_read_r+0x44>
   42ae4:	dfc00117 	ldw	ra,4(sp)
   42ae8:	dc000017 	ldw	r16,0(sp)
   42aec:	dec00204 	addi	sp,sp,8
   42af0:	f800283a 	ret
   42af4:	00c00134 	movhi	r3,4
   42af8:	18d6c317 	ldw	r3,23308(r3)
   42afc:	183ff926 	beq	r3,zero,42ae4 <_read_r+0x34>
   42b00:	80c00015 	stw	r3,0(r16)
   42b04:	dfc00117 	ldw	ra,4(sp)
   42b08:	dc000017 	ldw	r16,0(sp)
   42b0c:	dec00204 	addi	sp,sp,8
   42b10:	f800283a 	ret

00042b14 <_fstat_r>:
   42b14:	2807883a 	mov	r3,r5
   42b18:	defffe04 	addi	sp,sp,-8
   42b1c:	dc000015 	stw	r16,0(sp)
   42b20:	00800134 	movhi	r2,4
   42b24:	300b883a 	mov	r5,r6
   42b28:	2021883a 	mov	r16,r4
   42b2c:	1809883a 	mov	r4,r3
   42b30:	dfc00115 	stw	ra,4(sp)
   42b34:	1016c315 	stw	zero,23308(r2)
   42b38:	0042ef40 	call	42ef4 <fstat>
   42b3c:	10ffffd8 	cmpnei	r3,r2,-1
   42b40:	18000426 	beq	r3,zero,42b54 <_fstat_r+0x40>
   42b44:	dfc00117 	ldw	ra,4(sp)
   42b48:	dc000017 	ldw	r16,0(sp)
   42b4c:	dec00204 	addi	sp,sp,8
   42b50:	f800283a 	ret
   42b54:	00c00134 	movhi	r3,4
   42b58:	18d6c317 	ldw	r3,23308(r3)
   42b5c:	183ff926 	beq	r3,zero,42b44 <_fstat_r+0x30>
   42b60:	80c00015 	stw	r3,0(r16)
   42b64:	dfc00117 	ldw	ra,4(sp)
   42b68:	dc000017 	ldw	r16,0(sp)
   42b6c:	dec00204 	addi	sp,sp,8
   42b70:	f800283a 	ret

00042b74 <_isatty_r>:
   42b74:	defffe04 	addi	sp,sp,-8
   42b78:	dc000015 	stw	r16,0(sp)
   42b7c:	00800134 	movhi	r2,4
   42b80:	2021883a 	mov	r16,r4
   42b84:	2809883a 	mov	r4,r5
   42b88:	dfc00115 	stw	ra,4(sp)
   42b8c:	1016c315 	stw	zero,23308(r2)
   42b90:	0042fe00 	call	42fe0 <isatty>
   42b94:	10ffffd8 	cmpnei	r3,r2,-1
   42b98:	18000426 	beq	r3,zero,42bac <_isatty_r+0x38>
   42b9c:	dfc00117 	ldw	ra,4(sp)
   42ba0:	dc000017 	ldw	r16,0(sp)
   42ba4:	dec00204 	addi	sp,sp,8
   42ba8:	f800283a 	ret
   42bac:	00c00134 	movhi	r3,4
   42bb0:	18d6c317 	ldw	r3,23308(r3)
   42bb4:	183ff926 	beq	r3,zero,42b9c <_isatty_r+0x28>
   42bb8:	80c00015 	stw	r3,0(r16)
   42bbc:	dfc00117 	ldw	ra,4(sp)
   42bc0:	dc000017 	ldw	r16,0(sp)
   42bc4:	dec00204 	addi	sp,sp,8
   42bc8:	f800283a 	ret

00042bcc <__divsi3>:
   42bcc:	20001a16 	blt	r4,zero,42c38 <__divsi3+0x6c>
   42bd0:	000f883a 	mov	r7,zero
   42bd4:	2800020e 	bge	r5,zero,42be0 <__divsi3+0x14>
   42bd8:	014bc83a 	sub	r5,zero,r5
   42bdc:	39c0005c 	xori	r7,r7,1
   42be0:	200d883a 	mov	r6,r4
   42be4:	00c00044 	movi	r3,1
   42be8:	2900092e 	bgeu	r5,r4,42c10 <__divsi3+0x44>
   42bec:	00800804 	movi	r2,32
   42bf0:	00c00044 	movi	r3,1
   42bf4:	00000106 	br	42bfc <__divsi3+0x30>
   42bf8:	10001226 	beq	r2,zero,42c44 <__divsi3+0x78>
   42bfc:	294b883a 	add	r5,r5,r5
   42c00:	10bfffc4 	addi	r2,r2,-1
   42c04:	18c7883a 	add	r3,r3,r3
   42c08:	293ffb36 	bltu	r5,r4,42bf8 <__divsi3+0x2c>
   42c0c:	18000d26 	beq	r3,zero,42c44 <__divsi3+0x78>
   42c10:	0005883a 	mov	r2,zero
   42c14:	31400236 	bltu	r6,r5,42c20 <__divsi3+0x54>
   42c18:	314dc83a 	sub	r6,r6,r5
   42c1c:	10c4b03a 	or	r2,r2,r3
   42c20:	1806d07a 	srli	r3,r3,1
   42c24:	280ad07a 	srli	r5,r5,1
   42c28:	183ffa1e 	bne	r3,zero,42c14 <__divsi3+0x48>
   42c2c:	38000126 	beq	r7,zero,42c34 <__divsi3+0x68>
   42c30:	0085c83a 	sub	r2,zero,r2
   42c34:	f800283a 	ret
   42c38:	0109c83a 	sub	r4,zero,r4
   42c3c:	01c00044 	movi	r7,1
   42c40:	003fe406 	br	42bd4 <__divsi3+0x8>
   42c44:	0005883a 	mov	r2,zero
   42c48:	003ff806 	br	42c2c <__divsi3+0x60>

00042c4c <__modsi3>:
   42c4c:	20001916 	blt	r4,zero,42cb4 <__modsi3+0x68>
   42c50:	000f883a 	mov	r7,zero
   42c54:	2005883a 	mov	r2,r4
   42c58:	2800010e 	bge	r5,zero,42c60 <__modsi3+0x14>
   42c5c:	014bc83a 	sub	r5,zero,r5
   42c60:	00c00044 	movi	r3,1
   42c64:	2900092e 	bgeu	r5,r4,42c8c <__modsi3+0x40>
   42c68:	01800804 	movi	r6,32
   42c6c:	00c00044 	movi	r3,1
   42c70:	00000106 	br	42c78 <__modsi3+0x2c>
   42c74:	30000d26 	beq	r6,zero,42cac <__modsi3+0x60>
   42c78:	294b883a 	add	r5,r5,r5
   42c7c:	31bfffc4 	addi	r6,r6,-1
   42c80:	18c7883a 	add	r3,r3,r3
   42c84:	293ffb36 	bltu	r5,r4,42c74 <__modsi3+0x28>
   42c88:	18000826 	beq	r3,zero,42cac <__modsi3+0x60>
   42c8c:	1806d07a 	srli	r3,r3,1
   42c90:	11400136 	bltu	r2,r5,42c98 <__modsi3+0x4c>
   42c94:	1145c83a 	sub	r2,r2,r5
   42c98:	280ad07a 	srli	r5,r5,1
   42c9c:	183ffb1e 	bne	r3,zero,42c8c <__modsi3+0x40>
   42ca0:	38000126 	beq	r7,zero,42ca8 <__modsi3+0x5c>
   42ca4:	0085c83a 	sub	r2,zero,r2
   42ca8:	f800283a 	ret
   42cac:	2005883a 	mov	r2,r4
   42cb0:	003ffb06 	br	42ca0 <__modsi3+0x54>
   42cb4:	0109c83a 	sub	r4,zero,r4
   42cb8:	01c00044 	movi	r7,1
   42cbc:	003fe506 	br	42c54 <__modsi3+0x8>

00042cc0 <__udivsi3>:
   42cc0:	200d883a 	mov	r6,r4
   42cc4:	2900152e 	bgeu	r5,r4,42d1c <__udivsi3+0x5c>
   42cc8:	28001416 	blt	r5,zero,42d1c <__udivsi3+0x5c>
   42ccc:	00800804 	movi	r2,32
   42cd0:	00c00044 	movi	r3,1
   42cd4:	00000206 	br	42ce0 <__udivsi3+0x20>
   42cd8:	10000e26 	beq	r2,zero,42d14 <__udivsi3+0x54>
   42cdc:	28000516 	blt	r5,zero,42cf4 <__udivsi3+0x34>
   42ce0:	294b883a 	add	r5,r5,r5
   42ce4:	10bfffc4 	addi	r2,r2,-1
   42ce8:	18c7883a 	add	r3,r3,r3
   42cec:	293ffa36 	bltu	r5,r4,42cd8 <__udivsi3+0x18>
   42cf0:	18000826 	beq	r3,zero,42d14 <__udivsi3+0x54>
   42cf4:	0005883a 	mov	r2,zero
   42cf8:	31400236 	bltu	r6,r5,42d04 <__udivsi3+0x44>
   42cfc:	314dc83a 	sub	r6,r6,r5
   42d00:	10c4b03a 	or	r2,r2,r3
   42d04:	1806d07a 	srli	r3,r3,1
   42d08:	280ad07a 	srli	r5,r5,1
   42d0c:	183ffa1e 	bne	r3,zero,42cf8 <__udivsi3+0x38>
   42d10:	f800283a 	ret
   42d14:	0005883a 	mov	r2,zero
   42d18:	f800283a 	ret
   42d1c:	00c00044 	movi	r3,1
   42d20:	003ff406 	br	42cf4 <__udivsi3+0x34>

00042d24 <__umodsi3>:
   42d24:	2005883a 	mov	r2,r4
   42d28:	2900132e 	bgeu	r5,r4,42d78 <__umodsi3+0x54>
   42d2c:	28001216 	blt	r5,zero,42d78 <__umodsi3+0x54>
   42d30:	01800804 	movi	r6,32
   42d34:	00c00044 	movi	r3,1
   42d38:	00000206 	br	42d44 <__umodsi3+0x20>
   42d3c:	30000c26 	beq	r6,zero,42d70 <__umodsi3+0x4c>
   42d40:	28000516 	blt	r5,zero,42d58 <__umodsi3+0x34>
   42d44:	294b883a 	add	r5,r5,r5
   42d48:	31bfffc4 	addi	r6,r6,-1
   42d4c:	18c7883a 	add	r3,r3,r3
   42d50:	293ffa36 	bltu	r5,r4,42d3c <__umodsi3+0x18>
   42d54:	18000626 	beq	r3,zero,42d70 <__umodsi3+0x4c>
   42d58:	1806d07a 	srli	r3,r3,1
   42d5c:	11400136 	bltu	r2,r5,42d64 <__umodsi3+0x40>
   42d60:	1145c83a 	sub	r2,r2,r5
   42d64:	280ad07a 	srli	r5,r5,1
   42d68:	183ffb1e 	bne	r3,zero,42d58 <__umodsi3+0x34>
   42d6c:	f800283a 	ret
   42d70:	2005883a 	mov	r2,r4
   42d74:	f800283a 	ret
   42d78:	00c00044 	movi	r3,1
   42d7c:	003ff606 	br	42d58 <__umodsi3+0x34>

00042d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42d80:	defffe04 	addi	sp,sp,-8
   42d84:	dfc00115 	stw	ra,4(sp)
   42d88:	df000015 	stw	fp,0(sp)
   42d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42d90:	d0a00917 	ldw	r2,-32732(gp)
   42d94:	10000326 	beq	r2,zero,42da4 <alt_get_errno+0x24>
   42d98:	d0a00917 	ldw	r2,-32732(gp)
   42d9c:	103ee83a 	callr	r2
   42da0:	00000106 	br	42da8 <alt_get_errno+0x28>
   42da4:	d0a29904 	addi	r2,gp,-30108
}
   42da8:	e037883a 	mov	sp,fp
   42dac:	dfc00117 	ldw	ra,4(sp)
   42db0:	df000017 	ldw	fp,0(sp)
   42db4:	dec00204 	addi	sp,sp,8
   42db8:	f800283a 	ret

00042dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42dbc:	defffb04 	addi	sp,sp,-20
   42dc0:	dfc00415 	stw	ra,16(sp)
   42dc4:	df000315 	stw	fp,12(sp)
   42dc8:	df000304 	addi	fp,sp,12
   42dcc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42dd0:	e0bffd17 	ldw	r2,-12(fp)
   42dd4:	10000616 	blt	r2,zero,42df0 <close+0x34>
   42dd8:	e0bffd17 	ldw	r2,-12(fp)
   42ddc:	10c00324 	muli	r3,r2,12
   42de0:	00800134 	movhi	r2,4
   42de4:	1093bf04 	addi	r2,r2,20220
   42de8:	1885883a 	add	r2,r3,r2
   42dec:	00000106 	br	42df4 <close+0x38>
   42df0:	0005883a 	mov	r2,zero
   42df4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   42df8:	e0bfff17 	ldw	r2,-4(fp)
   42dfc:	10001926 	beq	r2,zero,42e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42e00:	e0bfff17 	ldw	r2,-4(fp)
   42e04:	10800017 	ldw	r2,0(r2)
   42e08:	10800417 	ldw	r2,16(r2)
   42e0c:	10000626 	beq	r2,zero,42e28 <close+0x6c>
   42e10:	e0bfff17 	ldw	r2,-4(fp)
   42e14:	10800017 	ldw	r2,0(r2)
   42e18:	10800417 	ldw	r2,16(r2)
   42e1c:	e13fff17 	ldw	r4,-4(fp)
   42e20:	103ee83a 	callr	r2
   42e24:	00000106 	br	42e2c <close+0x70>
   42e28:	0005883a 	mov	r2,zero
   42e2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42e30:	e13ffd17 	ldw	r4,-12(fp)
   42e34:	004347c0 	call	4347c <alt_release_fd>
    if (rval < 0)
   42e38:	e0bffe17 	ldw	r2,-8(fp)
   42e3c:	1000070e 	bge	r2,zero,42e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   42e40:	0042d800 	call	42d80 <alt_get_errno>
   42e44:	1007883a 	mov	r3,r2
   42e48:	e0bffe17 	ldw	r2,-8(fp)
   42e4c:	0085c83a 	sub	r2,zero,r2
   42e50:	18800015 	stw	r2,0(r3)
      return -1;
   42e54:	00bfffc4 	movi	r2,-1
   42e58:	00000706 	br	42e78 <close+0xbc>
    }
    return 0;
   42e5c:	0005883a 	mov	r2,zero
   42e60:	00000506 	br	42e78 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42e64:	0042d800 	call	42d80 <alt_get_errno>
   42e68:	1007883a 	mov	r3,r2
   42e6c:	00801444 	movi	r2,81
   42e70:	18800015 	stw	r2,0(r3)
    return -1;
   42e74:	00bfffc4 	movi	r2,-1
  }
}
   42e78:	e037883a 	mov	sp,fp
   42e7c:	dfc00117 	ldw	ra,4(sp)
   42e80:	df000017 	ldw	fp,0(sp)
   42e84:	dec00204 	addi	sp,sp,8
   42e88:	f800283a 	ret

00042e8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42e8c:	defffc04 	addi	sp,sp,-16
   42e90:	df000315 	stw	fp,12(sp)
   42e94:	df000304 	addi	fp,sp,12
   42e98:	e13fff15 	stw	r4,-4(fp)
   42e9c:	e17ffe15 	stw	r5,-8(fp)
   42ea0:	e1bffd15 	stw	r6,-12(fp)
  return len;
   42ea4:	e0bffd17 	ldw	r2,-12(fp)
}
   42ea8:	e037883a 	mov	sp,fp
   42eac:	df000017 	ldw	fp,0(sp)
   42eb0:	dec00104 	addi	sp,sp,4
   42eb4:	f800283a 	ret

00042eb8 <alt_get_errno>:
{
   42eb8:	defffe04 	addi	sp,sp,-8
   42ebc:	dfc00115 	stw	ra,4(sp)
   42ec0:	df000015 	stw	fp,0(sp)
   42ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42ec8:	d0a00917 	ldw	r2,-32732(gp)
   42ecc:	10000326 	beq	r2,zero,42edc <alt_get_errno+0x24>
   42ed0:	d0a00917 	ldw	r2,-32732(gp)
   42ed4:	103ee83a 	callr	r2
   42ed8:	00000106 	br	42ee0 <alt_get_errno+0x28>
   42edc:	d0a29904 	addi	r2,gp,-30108
}
   42ee0:	e037883a 	mov	sp,fp
   42ee4:	dfc00117 	ldw	ra,4(sp)
   42ee8:	df000017 	ldw	fp,0(sp)
   42eec:	dec00204 	addi	sp,sp,8
   42ef0:	f800283a 	ret

00042ef4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   42ef4:	defffb04 	addi	sp,sp,-20
   42ef8:	dfc00415 	stw	ra,16(sp)
   42efc:	df000315 	stw	fp,12(sp)
   42f00:	df000304 	addi	fp,sp,12
   42f04:	e13ffe15 	stw	r4,-8(fp)
   42f08:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42f0c:	e0bffe17 	ldw	r2,-8(fp)
   42f10:	10000616 	blt	r2,zero,42f2c <fstat+0x38>
   42f14:	e0bffe17 	ldw	r2,-8(fp)
   42f18:	10c00324 	muli	r3,r2,12
   42f1c:	00800134 	movhi	r2,4
   42f20:	1093bf04 	addi	r2,r2,20220
   42f24:	1885883a 	add	r2,r3,r2
   42f28:	00000106 	br	42f30 <fstat+0x3c>
   42f2c:	0005883a 	mov	r2,zero
   42f30:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   42f34:	e0bfff17 	ldw	r2,-4(fp)
   42f38:	10001026 	beq	r2,zero,42f7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   42f3c:	e0bfff17 	ldw	r2,-4(fp)
   42f40:	10800017 	ldw	r2,0(r2)
   42f44:	10800817 	ldw	r2,32(r2)
   42f48:	10000726 	beq	r2,zero,42f68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   42f4c:	e0bfff17 	ldw	r2,-4(fp)
   42f50:	10800017 	ldw	r2,0(r2)
   42f54:	10800817 	ldw	r2,32(r2)
   42f58:	e17ffd17 	ldw	r5,-12(fp)
   42f5c:	e13fff17 	ldw	r4,-4(fp)
   42f60:	103ee83a 	callr	r2
   42f64:	00000a06 	br	42f90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   42f68:	e0bffd17 	ldw	r2,-12(fp)
   42f6c:	00c80004 	movi	r3,8192
   42f70:	10c00115 	stw	r3,4(r2)
      return 0;
   42f74:	0005883a 	mov	r2,zero
   42f78:	00000506 	br	42f90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42f7c:	0042eb80 	call	42eb8 <alt_get_errno>
   42f80:	1007883a 	mov	r3,r2
   42f84:	00801444 	movi	r2,81
   42f88:	18800015 	stw	r2,0(r3)
    return -1;
   42f8c:	00bfffc4 	movi	r2,-1
  }
}
   42f90:	e037883a 	mov	sp,fp
   42f94:	dfc00117 	ldw	ra,4(sp)
   42f98:	df000017 	ldw	fp,0(sp)
   42f9c:	dec00204 	addi	sp,sp,8
   42fa0:	f800283a 	ret

00042fa4 <alt_get_errno>:
{
   42fa4:	defffe04 	addi	sp,sp,-8
   42fa8:	dfc00115 	stw	ra,4(sp)
   42fac:	df000015 	stw	fp,0(sp)
   42fb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42fb4:	d0a00917 	ldw	r2,-32732(gp)
   42fb8:	10000326 	beq	r2,zero,42fc8 <alt_get_errno+0x24>
   42fbc:	d0a00917 	ldw	r2,-32732(gp)
   42fc0:	103ee83a 	callr	r2
   42fc4:	00000106 	br	42fcc <alt_get_errno+0x28>
   42fc8:	d0a29904 	addi	r2,gp,-30108
}
   42fcc:	e037883a 	mov	sp,fp
   42fd0:	dfc00117 	ldw	ra,4(sp)
   42fd4:	df000017 	ldw	fp,0(sp)
   42fd8:	dec00204 	addi	sp,sp,8
   42fdc:	f800283a 	ret

00042fe0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   42fe0:	deffea04 	addi	sp,sp,-88
   42fe4:	dfc01515 	stw	ra,84(sp)
   42fe8:	df001415 	stw	fp,80(sp)
   42fec:	df001404 	addi	fp,sp,80
   42ff0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42ff4:	e0bfec17 	ldw	r2,-80(fp)
   42ff8:	10000616 	blt	r2,zero,43014 <isatty+0x34>
   42ffc:	e0bfec17 	ldw	r2,-80(fp)
   43000:	10c00324 	muli	r3,r2,12
   43004:	00800134 	movhi	r2,4
   43008:	1093bf04 	addi	r2,r2,20220
   4300c:	1885883a 	add	r2,r3,r2
   43010:	00000106 	br	43018 <isatty+0x38>
   43014:	0005883a 	mov	r2,zero
   43018:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   4301c:	e0bfff17 	ldw	r2,-4(fp)
   43020:	10000e26 	beq	r2,zero,4305c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43024:	e0bfff17 	ldw	r2,-4(fp)
   43028:	10800017 	ldw	r2,0(r2)
   4302c:	10800817 	ldw	r2,32(r2)
   43030:	1000021e 	bne	r2,zero,4303c <isatty+0x5c>
    {
      return 1;
   43034:	00800044 	movi	r2,1
   43038:	00000d06 	br	43070 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4303c:	e0bfed04 	addi	r2,fp,-76
   43040:	100b883a 	mov	r5,r2
   43044:	e13fec17 	ldw	r4,-80(fp)
   43048:	0042ef40 	call	42ef4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4304c:	e0bfee17 	ldw	r2,-72(fp)
   43050:	10880020 	cmpeqi	r2,r2,8192
   43054:	10803fcc 	andi	r2,r2,255
   43058:	00000506 	br	43070 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4305c:	0042fa40 	call	42fa4 <alt_get_errno>
   43060:	1007883a 	mov	r3,r2
   43064:	00801444 	movi	r2,81
   43068:	18800015 	stw	r2,0(r3)
    return 0;
   4306c:	0005883a 	mov	r2,zero
  }
}
   43070:	e037883a 	mov	sp,fp
   43074:	dfc00117 	ldw	ra,4(sp)
   43078:	df000017 	ldw	fp,0(sp)
   4307c:	dec00204 	addi	sp,sp,8
   43080:	f800283a 	ret

00043084 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43084:	defffc04 	addi	sp,sp,-16
   43088:	df000315 	stw	fp,12(sp)
   4308c:	df000304 	addi	fp,sp,12
   43090:	e13fff15 	stw	r4,-4(fp)
   43094:	e17ffe15 	stw	r5,-8(fp)
   43098:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   4309c:	e0fffe17 	ldw	r3,-8(fp)
   430a0:	e0bfff17 	ldw	r2,-4(fp)
   430a4:	18800c26 	beq	r3,r2,430d8 <alt_load_section+0x54>
  {
    while( to != end )
   430a8:	00000806 	br	430cc <alt_load_section+0x48>
    {
      *to++ = *from++;
   430ac:	e0ffff17 	ldw	r3,-4(fp)
   430b0:	18800104 	addi	r2,r3,4
   430b4:	e0bfff15 	stw	r2,-4(fp)
   430b8:	e0bffe17 	ldw	r2,-8(fp)
   430bc:	11000104 	addi	r4,r2,4
   430c0:	e13ffe15 	stw	r4,-8(fp)
   430c4:	18c00017 	ldw	r3,0(r3)
   430c8:	10c00015 	stw	r3,0(r2)
    while( to != end )
   430cc:	e0fffe17 	ldw	r3,-8(fp)
   430d0:	e0bffd17 	ldw	r2,-12(fp)
   430d4:	18bff51e 	bne	r3,r2,430ac <alt_load_section+0x28>
    }
  }
}
   430d8:	0001883a 	nop
   430dc:	e037883a 	mov	sp,fp
   430e0:	df000017 	ldw	fp,0(sp)
   430e4:	dec00104 	addi	sp,sp,4
   430e8:	f800283a 	ret

000430ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   430ec:	defffe04 	addi	sp,sp,-8
   430f0:	dfc00115 	stw	ra,4(sp)
   430f4:	df000015 	stw	fp,0(sp)
   430f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   430fc:	01800134 	movhi	r6,4
   43100:	31943504 	addi	r6,r6,20692
   43104:	01400134 	movhi	r5,4
   43108:	2951aa04 	addi	r5,r5,18088
   4310c:	01000134 	movhi	r4,4
   43110:	21143504 	addi	r4,r4,20692
   43114:	00430840 	call	43084 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43118:	01800134 	movhi	r6,4
   4311c:	31800804 	addi	r6,r6,32
   43120:	01400134 	movhi	r5,4
   43124:	29400804 	addi	r5,r5,32
   43128:	01000134 	movhi	r4,4
   4312c:	21000804 	addi	r4,r4,32
   43130:	00430840 	call	43084 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43134:	01800134 	movhi	r6,4
   43138:	3191aa04 	addi	r6,r6,18088
   4313c:	01400134 	movhi	r5,4
   43140:	29519804 	addi	r5,r5,18016
   43144:	01000134 	movhi	r4,4
   43148:	21119804 	addi	r4,r4,18016
   4314c:	00430840 	call	43084 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43150:	0043b2c0 	call	43b2c <alt_dcache_flush_all>
  alt_icache_flush_all();
   43154:	0043d240 	call	43d24 <alt_icache_flush_all>
}
   43158:	0001883a 	nop
   4315c:	e037883a 	mov	sp,fp
   43160:	dfc00117 	ldw	ra,4(sp)
   43164:	df000017 	ldw	fp,0(sp)
   43168:	dec00204 	addi	sp,sp,8
   4316c:	f800283a 	ret

00043170 <alt_get_errno>:
{
   43170:	defffe04 	addi	sp,sp,-8
   43174:	dfc00115 	stw	ra,4(sp)
   43178:	df000015 	stw	fp,0(sp)
   4317c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43180:	d0a00917 	ldw	r2,-32732(gp)
   43184:	10000326 	beq	r2,zero,43194 <alt_get_errno+0x24>
   43188:	d0a00917 	ldw	r2,-32732(gp)
   4318c:	103ee83a 	callr	r2
   43190:	00000106 	br	43198 <alt_get_errno+0x28>
   43194:	d0a29904 	addi	r2,gp,-30108
}
   43198:	e037883a 	mov	sp,fp
   4319c:	dfc00117 	ldw	ra,4(sp)
   431a0:	df000017 	ldw	fp,0(sp)
   431a4:	dec00204 	addi	sp,sp,8
   431a8:	f800283a 	ret

000431ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   431ac:	defff904 	addi	sp,sp,-28
   431b0:	dfc00615 	stw	ra,24(sp)
   431b4:	df000515 	stw	fp,20(sp)
   431b8:	df000504 	addi	fp,sp,20
   431bc:	e13ffd15 	stw	r4,-12(fp)
   431c0:	e17ffc15 	stw	r5,-16(fp)
   431c4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   431c8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   431cc:	e0bffd17 	ldw	r2,-12(fp)
   431d0:	10000616 	blt	r2,zero,431ec <lseek+0x40>
   431d4:	e0bffd17 	ldw	r2,-12(fp)
   431d8:	10c00324 	muli	r3,r2,12
   431dc:	00800134 	movhi	r2,4
   431e0:	1093bf04 	addi	r2,r2,20220
   431e4:	1885883a 	add	r2,r3,r2
   431e8:	00000106 	br	431f0 <lseek+0x44>
   431ec:	0005883a 	mov	r2,zero
   431f0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   431f4:	e0bffe17 	ldw	r2,-8(fp)
   431f8:	10001026 	beq	r2,zero,4323c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   431fc:	e0bffe17 	ldw	r2,-8(fp)
   43200:	10800017 	ldw	r2,0(r2)
   43204:	10800717 	ldw	r2,28(r2)
   43208:	10000926 	beq	r2,zero,43230 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4320c:	e0bffe17 	ldw	r2,-8(fp)
   43210:	10800017 	ldw	r2,0(r2)
   43214:	10800717 	ldw	r2,28(r2)
   43218:	e1bffb17 	ldw	r6,-20(fp)
   4321c:	e17ffc17 	ldw	r5,-16(fp)
   43220:	e13ffe17 	ldw	r4,-8(fp)
   43224:	103ee83a 	callr	r2
   43228:	e0bfff15 	stw	r2,-4(fp)
   4322c:	00000506 	br	43244 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43230:	00bfde84 	movi	r2,-134
   43234:	e0bfff15 	stw	r2,-4(fp)
   43238:	00000206 	br	43244 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4323c:	00bfebc4 	movi	r2,-81
   43240:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   43244:	e0bfff17 	ldw	r2,-4(fp)
   43248:	1000070e 	bge	r2,zero,43268 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4324c:	00431700 	call	43170 <alt_get_errno>
   43250:	1007883a 	mov	r3,r2
   43254:	e0bfff17 	ldw	r2,-4(fp)
   43258:	0085c83a 	sub	r2,zero,r2
   4325c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43260:	00bfffc4 	movi	r2,-1
   43264:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   43268:	e0bfff17 	ldw	r2,-4(fp)
}
   4326c:	e037883a 	mov	sp,fp
   43270:	dfc00117 	ldw	ra,4(sp)
   43274:	df000017 	ldw	fp,0(sp)
   43278:	dec00204 	addi	sp,sp,8
   4327c:	f800283a 	ret

00043280 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43280:	defffd04 	addi	sp,sp,-12
   43284:	dfc00215 	stw	ra,8(sp)
   43288:	df000115 	stw	fp,4(sp)
   4328c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43290:	0009883a 	mov	r4,zero
   43294:	00437240 	call	43724 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43298:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4329c:	00437600 	call	43760 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   432a0:	01800134 	movhi	r6,4
   432a4:	3191a004 	addi	r6,r6,18048
   432a8:	01400134 	movhi	r5,4
   432ac:	2951a004 	addi	r5,r5,18048
   432b0:	01000134 	movhi	r4,4
   432b4:	2111a004 	addi	r4,r4,18048
   432b8:	0043e080 	call	43e08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   432bc:	0043c5c0 	call	43c5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   432c0:	01000134 	movhi	r4,4
   432c4:	210f3004 	addi	r4,r4,15552
   432c8:	00443b80 	call	443b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   432cc:	d0a29a17 	ldw	r2,-30104(gp)
   432d0:	d0e29b17 	ldw	r3,-30100(gp)
   432d4:	d1229c17 	ldw	r4,-30096(gp)
   432d8:	200d883a 	mov	r6,r4
   432dc:	180b883a 	mov	r5,r3
   432e0:	1009883a 	mov	r4,r2
   432e4:	00400b00 	call	400b0 <main>
   432e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   432ec:	01000044 	movi	r4,1
   432f0:	0042dbc0 	call	42dbc <close>
  exit (result);
   432f4:	e13fff17 	ldw	r4,-4(fp)
   432f8:	00443cc0 	call	443cc <exit>

000432fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   432fc:	defffe04 	addi	sp,sp,-8
   43300:	df000115 	stw	fp,4(sp)
   43304:	df000104 	addi	fp,sp,4
   43308:	e13fff15 	stw	r4,-4(fp)
}
   4330c:	0001883a 	nop
   43310:	e037883a 	mov	sp,fp
   43314:	df000017 	ldw	fp,0(sp)
   43318:	dec00104 	addi	sp,sp,4
   4331c:	f800283a 	ret

00043320 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43320:	defffe04 	addi	sp,sp,-8
   43324:	df000115 	stw	fp,4(sp)
   43328:	df000104 	addi	fp,sp,4
   4332c:	e13fff15 	stw	r4,-4(fp)
}
   43330:	0001883a 	nop
   43334:	e037883a 	mov	sp,fp
   43338:	df000017 	ldw	fp,0(sp)
   4333c:	dec00104 	addi	sp,sp,4
   43340:	f800283a 	ret

00043344 <alt_get_errno>:
{
   43344:	defffe04 	addi	sp,sp,-8
   43348:	dfc00115 	stw	ra,4(sp)
   4334c:	df000015 	stw	fp,0(sp)
   43350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43354:	d0a00917 	ldw	r2,-32732(gp)
   43358:	10000326 	beq	r2,zero,43368 <alt_get_errno+0x24>
   4335c:	d0a00917 	ldw	r2,-32732(gp)
   43360:	103ee83a 	callr	r2
   43364:	00000106 	br	4336c <alt_get_errno+0x28>
   43368:	d0a29904 	addi	r2,gp,-30108
}
   4336c:	e037883a 	mov	sp,fp
   43370:	dfc00117 	ldw	ra,4(sp)
   43374:	df000017 	ldw	fp,0(sp)
   43378:	dec00204 	addi	sp,sp,8
   4337c:	f800283a 	ret

00043380 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43380:	defff904 	addi	sp,sp,-28
   43384:	dfc00615 	stw	ra,24(sp)
   43388:	df000515 	stw	fp,20(sp)
   4338c:	df000504 	addi	fp,sp,20
   43390:	e13ffd15 	stw	r4,-12(fp)
   43394:	e17ffc15 	stw	r5,-16(fp)
   43398:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4339c:	e0bffd17 	ldw	r2,-12(fp)
   433a0:	10000616 	blt	r2,zero,433bc <read+0x3c>
   433a4:	e0bffd17 	ldw	r2,-12(fp)
   433a8:	10c00324 	muli	r3,r2,12
   433ac:	00800134 	movhi	r2,4
   433b0:	1093bf04 	addi	r2,r2,20220
   433b4:	1885883a 	add	r2,r3,r2
   433b8:	00000106 	br	433c0 <read+0x40>
   433bc:	0005883a 	mov	r2,zero
   433c0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   433c4:	e0bfff17 	ldw	r2,-4(fp)
   433c8:	10002226 	beq	r2,zero,43454 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   433cc:	e0bfff17 	ldw	r2,-4(fp)
   433d0:	10800217 	ldw	r2,8(r2)
   433d4:	108000cc 	andi	r2,r2,3
   433d8:	10800060 	cmpeqi	r2,r2,1
   433dc:	1000181e 	bne	r2,zero,43440 <read+0xc0>
        (fd->dev->read))
   433e0:	e0bfff17 	ldw	r2,-4(fp)
   433e4:	10800017 	ldw	r2,0(r2)
   433e8:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   433ec:	10001426 	beq	r2,zero,43440 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   433f0:	e0bfff17 	ldw	r2,-4(fp)
   433f4:	10800017 	ldw	r2,0(r2)
   433f8:	10800517 	ldw	r2,20(r2)
   433fc:	e0fffb17 	ldw	r3,-20(fp)
   43400:	180d883a 	mov	r6,r3
   43404:	e17ffc17 	ldw	r5,-16(fp)
   43408:	e13fff17 	ldw	r4,-4(fp)
   4340c:	103ee83a 	callr	r2
   43410:	e0bffe15 	stw	r2,-8(fp)
   43414:	e0bffe17 	ldw	r2,-8(fp)
   43418:	1000070e 	bge	r2,zero,43438 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4341c:	00433440 	call	43344 <alt_get_errno>
   43420:	1007883a 	mov	r3,r2
   43424:	e0bffe17 	ldw	r2,-8(fp)
   43428:	0085c83a 	sub	r2,zero,r2
   4342c:	18800015 	stw	r2,0(r3)
          return -1;
   43430:	00bfffc4 	movi	r2,-1
   43434:	00000c06 	br	43468 <read+0xe8>
        }
        return rval;
   43438:	e0bffe17 	ldw	r2,-8(fp)
   4343c:	00000a06 	br	43468 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43440:	00433440 	call	43344 <alt_get_errno>
   43444:	1007883a 	mov	r3,r2
   43448:	00800344 	movi	r2,13
   4344c:	18800015 	stw	r2,0(r3)
   43450:	00000406 	br	43464 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43454:	00433440 	call	43344 <alt_get_errno>
   43458:	1007883a 	mov	r3,r2
   4345c:	00801444 	movi	r2,81
   43460:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43464:	00bfffc4 	movi	r2,-1
}
   43468:	e037883a 	mov	sp,fp
   4346c:	dfc00117 	ldw	ra,4(sp)
   43470:	df000017 	ldw	fp,0(sp)
   43474:	dec00204 	addi	sp,sp,8
   43478:	f800283a 	ret

0004347c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4347c:	defffe04 	addi	sp,sp,-8
   43480:	df000115 	stw	fp,4(sp)
   43484:	df000104 	addi	fp,sp,4
   43488:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4348c:	e0bfff17 	ldw	r2,-4(fp)
   43490:	108000d0 	cmplti	r2,r2,3
   43494:	10000a1e 	bne	r2,zero,434c0 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   43498:	e0bfff17 	ldw	r2,-4(fp)
   4349c:	10c00324 	muli	r3,r2,12
   434a0:	00800134 	movhi	r2,4
   434a4:	1885883a 	add	r2,r3,r2
   434a8:	1013c115 	stw	zero,20228(r2)
    alt_fd_list[fd].dev      = 0;
   434ac:	e0bfff17 	ldw	r2,-4(fp)
   434b0:	10c00324 	muli	r3,r2,12
   434b4:	00800134 	movhi	r2,4
   434b8:	1885883a 	add	r2,r3,r2
   434bc:	1013bf15 	stw	zero,20220(r2)
  }
}
   434c0:	0001883a 	nop
   434c4:	e037883a 	mov	sp,fp
   434c8:	df000017 	ldw	fp,0(sp)
   434cc:	dec00104 	addi	sp,sp,4
   434d0:	f800283a 	ret

000434d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   434d4:	defff904 	addi	sp,sp,-28
   434d8:	df000615 	stw	fp,24(sp)
   434dc:	df000604 	addi	fp,sp,24
   434e0:	e13ffa15 	stw	r4,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   434e4:	0005303a 	rdctl	r2,status
   434e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   434ec:	e0fffd17 	ldw	r3,-12(fp)
   434f0:	00bfff84 	movi	r2,-2
   434f4:	1884703a 	and	r2,r3,r2
   434f8:	1001703a 	wrctl	status,r2
  
  return context;
   434fc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43500:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43504:	d0a00a17 	ldw	r2,-32728(gp)
   43508:	10c000c4 	addi	r3,r2,3
   4350c:	00bfff04 	movi	r2,-4
   43510:	1884703a 	and	r2,r3,r2
   43514:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43518:	d0e00a17 	ldw	r3,-32728(gp)
   4351c:	e0bffa17 	ldw	r2,-24(fp)
   43520:	1887883a 	add	r3,r3,r2
   43524:	008001b4 	movhi	r2,6
   43528:	10927c04 	addi	r2,r2,18928
   4352c:	10c0072e 	bgeu	r2,r3,4354c <sbrk+0x78>
   43530:	e0bfff17 	ldw	r2,-4(fp)
   43534:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43538:	e0bffc17 	ldw	r2,-16(fp)
   4353c:	1001703a 	wrctl	status,r2
#endif
}
   43540:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43544:	00bfffc4 	movi	r2,-1
   43548:	00000c06 	br	4357c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4354c:	d0a00a17 	ldw	r2,-32728(gp)
   43550:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   43554:	d0e00a17 	ldw	r3,-32728(gp)
   43558:	e0bffa17 	ldw	r2,-24(fp)
   4355c:	1885883a 	add	r2,r3,r2
   43560:	d0a00a15 	stw	r2,-32728(gp)
   43564:	e0bfff17 	ldw	r2,-4(fp)
   43568:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   4356c:	e0bffb17 	ldw	r2,-20(fp)
   43570:	1001703a 	wrctl	status,r2
}
   43574:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43578:	e0bffe17 	ldw	r2,-8(fp)
} 
   4357c:	e037883a 	mov	sp,fp
   43580:	df000017 	ldw	fp,0(sp)
   43584:	dec00104 	addi	sp,sp,4
   43588:	f800283a 	ret

0004358c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4358c:	defffd04 	addi	sp,sp,-12
   43590:	dfc00215 	stw	ra,8(sp)
   43594:	df000115 	stw	fp,4(sp)
   43598:	df000104 	addi	fp,sp,4
   4359c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   435a0:	e13fff17 	ldw	r4,-4(fp)
   435a4:	00439d40 	call	439d4 <alt_busy_sleep>
}
   435a8:	e037883a 	mov	sp,fp
   435ac:	dfc00117 	ldw	ra,4(sp)
   435b0:	df000017 	ldw	fp,0(sp)
   435b4:	dec00204 	addi	sp,sp,8
   435b8:	f800283a 	ret

000435bc <alt_get_errno>:
{
   435bc:	defffe04 	addi	sp,sp,-8
   435c0:	dfc00115 	stw	ra,4(sp)
   435c4:	df000015 	stw	fp,0(sp)
   435c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435cc:	d0a00917 	ldw	r2,-32732(gp)
   435d0:	10000326 	beq	r2,zero,435e0 <alt_get_errno+0x24>
   435d4:	d0a00917 	ldw	r2,-32732(gp)
   435d8:	103ee83a 	callr	r2
   435dc:	00000106 	br	435e4 <alt_get_errno+0x28>
   435e0:	d0a29904 	addi	r2,gp,-30108
}
   435e4:	e037883a 	mov	sp,fp
   435e8:	dfc00117 	ldw	ra,4(sp)
   435ec:	df000017 	ldw	fp,0(sp)
   435f0:	dec00204 	addi	sp,sp,8
   435f4:	f800283a 	ret

000435f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   435f8:	defff904 	addi	sp,sp,-28
   435fc:	dfc00615 	stw	ra,24(sp)
   43600:	df000515 	stw	fp,20(sp)
   43604:	df000504 	addi	fp,sp,20
   43608:	e13ffd15 	stw	r4,-12(fp)
   4360c:	e17ffc15 	stw	r5,-16(fp)
   43610:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43614:	e0bffd17 	ldw	r2,-12(fp)
   43618:	10000616 	blt	r2,zero,43634 <write+0x3c>
   4361c:	e0bffd17 	ldw	r2,-12(fp)
   43620:	10c00324 	muli	r3,r2,12
   43624:	00800134 	movhi	r2,4
   43628:	1093bf04 	addi	r2,r2,20220
   4362c:	1885883a 	add	r2,r3,r2
   43630:	00000106 	br	43638 <write+0x40>
   43634:	0005883a 	mov	r2,zero
   43638:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   4363c:	e0bfff17 	ldw	r2,-4(fp)
   43640:	10002126 	beq	r2,zero,436c8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43644:	e0bfff17 	ldw	r2,-4(fp)
   43648:	10800217 	ldw	r2,8(r2)
   4364c:	108000cc 	andi	r2,r2,3
   43650:	10001826 	beq	r2,zero,436b4 <write+0xbc>
   43654:	e0bfff17 	ldw	r2,-4(fp)
   43658:	10800017 	ldw	r2,0(r2)
   4365c:	10800617 	ldw	r2,24(r2)
   43660:	10001426 	beq	r2,zero,436b4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43664:	e0bfff17 	ldw	r2,-4(fp)
   43668:	10800017 	ldw	r2,0(r2)
   4366c:	10800617 	ldw	r2,24(r2)
   43670:	e0fffb17 	ldw	r3,-20(fp)
   43674:	180d883a 	mov	r6,r3
   43678:	e17ffc17 	ldw	r5,-16(fp)
   4367c:	e13fff17 	ldw	r4,-4(fp)
   43680:	103ee83a 	callr	r2
   43684:	e0bffe15 	stw	r2,-8(fp)
   43688:	e0bffe17 	ldw	r2,-8(fp)
   4368c:	1000070e 	bge	r2,zero,436ac <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43690:	00435bc0 	call	435bc <alt_get_errno>
   43694:	1007883a 	mov	r3,r2
   43698:	e0bffe17 	ldw	r2,-8(fp)
   4369c:	0085c83a 	sub	r2,zero,r2
   436a0:	18800015 	stw	r2,0(r3)
        return -1;
   436a4:	00bfffc4 	movi	r2,-1
   436a8:	00000c06 	br	436dc <write+0xe4>
      }
      return rval;
   436ac:	e0bffe17 	ldw	r2,-8(fp)
   436b0:	00000a06 	br	436dc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   436b4:	00435bc0 	call	435bc <alt_get_errno>
   436b8:	1007883a 	mov	r3,r2
   436bc:	00800344 	movi	r2,13
   436c0:	18800015 	stw	r2,0(r3)
   436c4:	00000406 	br	436d8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   436c8:	00435bc0 	call	435bc <alt_get_errno>
   436cc:	1007883a 	mov	r3,r2
   436d0:	00801444 	movi	r2,81
   436d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   436d8:	00bfffc4 	movi	r2,-1
}
   436dc:	e037883a 	mov	sp,fp
   436e0:	dfc00117 	ldw	ra,4(sp)
   436e4:	df000017 	ldw	fp,0(sp)
   436e8:	dec00204 	addi	sp,sp,8
   436ec:	f800283a 	ret

000436f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   436f0:	defffd04 	addi	sp,sp,-12
   436f4:	dfc00215 	stw	ra,8(sp)
   436f8:	df000115 	stw	fp,4(sp)
   436fc:	df000104 	addi	fp,sp,4
   43700:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43704:	d1600604 	addi	r5,gp,-32744
   43708:	e13fff17 	ldw	r4,-4(fp)
   4370c:	0043bb40 	call	43bb4 <alt_dev_llist_insert>
}
   43710:	e037883a 	mov	sp,fp
   43714:	dfc00117 	ldw	ra,4(sp)
   43718:	df000017 	ldw	fp,0(sp)
   4371c:	dec00204 	addi	sp,sp,8
   43720:	f800283a 	ret

00043724 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43724:	defffd04 	addi	sp,sp,-12
   43728:	dfc00215 	stw	ra,8(sp)
   4372c:	df000115 	stw	fp,4(sp)
   43730:	df000104 	addi	fp,sp,4
   43734:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   43738:	00440cc0 	call	440cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4373c:	00800044 	movi	r2,1
   43740:	1001703a 	wrctl	status,r2
#if defined(NIOS2_EIC_PRESENT) && (NIOS2_NUM_OF_SHADOW_REG_SETS > 0)
    | NIOS2_STATUS_RSIE_MSK
#endif      
      );
}
   43744:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   43748:	0001883a 	nop
   4374c:	e037883a 	mov	sp,fp
   43750:	dfc00117 	ldw	ra,4(sp)
   43754:	df000017 	ldw	fp,0(sp)
   43758:	dec00204 	addi	sp,sp,8
   4375c:	f800283a 	ret

00043760 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43760:	defffe04 	addi	sp,sp,-8
   43764:	dfc00115 	stw	ra,4(sp)
   43768:	df000015 	stw	fp,0(sp)
   4376c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43770:	01000134 	movhi	r4,4
   43774:	21141f04 	addi	r4,r4,20604
   43778:	00436f00 	call	436f0 <alt_dev_reg>
}
   4377c:	0001883a 	nop
   43780:	e037883a 	mov	sp,fp
   43784:	dfc00117 	ldw	ra,4(sp)
   43788:	df000017 	ldw	fp,0(sp)
   4378c:	dec00204 	addi	sp,sp,8
   43790:	f800283a 	ret

00043794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43794:	defffa04 	addi	sp,sp,-24
   43798:	dfc00515 	stw	ra,20(sp)
   4379c:	df000415 	stw	fp,16(sp)
   437a0:	df000404 	addi	fp,sp,16
   437a4:	e13ffe15 	stw	r4,-8(fp)
   437a8:	e17ffd15 	stw	r5,-12(fp)
   437ac:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   437b0:	e0bffe17 	ldw	r2,-8(fp)
   437b4:	10800017 	ldw	r2,0(r2)
   437b8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   437bc:	e0bfff17 	ldw	r2,-4(fp)
   437c0:	10c00a04 	addi	r3,r2,40
   437c4:	e0bffe17 	ldw	r2,-8(fp)
   437c8:	10800217 	ldw	r2,8(r2)
   437cc:	100f883a 	mov	r7,r2
   437d0:	e1bffc17 	ldw	r6,-16(fp)
   437d4:	e17ffd17 	ldw	r5,-12(fp)
   437d8:	1809883a 	mov	r4,r3
   437dc:	00438540 	call	43854 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   437e0:	e037883a 	mov	sp,fp
   437e4:	dfc00117 	ldw	ra,4(sp)
   437e8:	df000017 	ldw	fp,0(sp)
   437ec:	dec00204 	addi	sp,sp,8
   437f0:	f800283a 	ret

000437f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   437f4:	defffa04 	addi	sp,sp,-24
   437f8:	dfc00515 	stw	ra,20(sp)
   437fc:	df000415 	stw	fp,16(sp)
   43800:	df000404 	addi	fp,sp,16
   43804:	e13ffe15 	stw	r4,-8(fp)
   43808:	e17ffd15 	stw	r5,-12(fp)
   4380c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43810:	e0bffe17 	ldw	r2,-8(fp)
   43814:	10800017 	ldw	r2,0(r2)
   43818:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4381c:	e0bfff17 	ldw	r2,-4(fp)
   43820:	10c00a04 	addi	r3,r2,40
   43824:	e0bffe17 	ldw	r2,-8(fp)
   43828:	10800217 	ldw	r2,8(r2)
   4382c:	100f883a 	mov	r7,r2
   43830:	e1bffc17 	ldw	r6,-16(fp)
   43834:	e17ffd17 	ldw	r5,-12(fp)
   43838:	1809883a 	mov	r4,r3
   4383c:	00439400 	call	43940 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43840:	e037883a 	mov	sp,fp
   43844:	dfc00117 	ldw	ra,4(sp)
   43848:	df000017 	ldw	fp,0(sp)
   4384c:	dec00204 	addi	sp,sp,8
   43850:	f800283a 	ret

00043854 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   43854:	defff704 	addi	sp,sp,-36
   43858:	df000815 	stw	fp,32(sp)
   4385c:	df000804 	addi	fp,sp,32
   43860:	e13ffb15 	stw	r4,-20(fp)
   43864:	e17ffa15 	stw	r5,-24(fp)
   43868:	e1bff915 	stw	r6,-28(fp)
   4386c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   43870:	e0bffb17 	ldw	r2,-20(fp)
   43874:	10800017 	ldw	r2,0(r2)
   43878:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   4387c:	e0bffa17 	ldw	r2,-24(fp)
   43880:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   43884:	e0bff917 	ldw	r2,-28(fp)
   43888:	e0fffa17 	ldw	r3,-24(fp)
   4388c:	1885883a 	add	r2,r3,r2
   43890:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   43894:	00001206 	br	438e0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43898:	e0bffe17 	ldw	r2,-8(fp)
   4389c:	10800037 	ldwio	r2,0(r2)
   438a0:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   438a4:	e0bffc17 	ldw	r2,-16(fp)
   438a8:	10a0000c 	andi	r2,r2,32768
   438ac:	10000626 	beq	r2,zero,438c8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   438b0:	e0bfff17 	ldw	r2,-4(fp)
   438b4:	10c00044 	addi	r3,r2,1
   438b8:	e0ffff15 	stw	r3,-4(fp)
   438bc:	e0fffc17 	ldw	r3,-16(fp)
   438c0:	10c00005 	stb	r3,0(r2)
   438c4:	00000606 	br	438e0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   438c8:	e0ffff17 	ldw	r3,-4(fp)
   438cc:	e0bffa17 	ldw	r2,-24(fp)
   438d0:	1880071e 	bne	r3,r2,438f0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   438d4:	e0bff817 	ldw	r2,-32(fp)
   438d8:	1090000c 	andi	r2,r2,16384
   438dc:	1000061e 	bne	r2,zero,438f8 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   438e0:	e0ffff17 	ldw	r3,-4(fp)
   438e4:	e0bffd17 	ldw	r2,-12(fp)
   438e8:	18bfeb36 	bltu	r3,r2,43898 <altera_avalon_jtag_uart_read+0x44>
   438ec:	00000306 	br	438fc <altera_avalon_jtag_uart_read+0xa8>
      break;
   438f0:	0001883a 	nop
   438f4:	00000106 	br	438fc <altera_avalon_jtag_uart_read+0xa8>
      break;   
   438f8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   438fc:	e0ffff17 	ldw	r3,-4(fp)
   43900:	e0bffa17 	ldw	r2,-24(fp)
   43904:	18800426 	beq	r3,r2,43918 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   43908:	e0ffff17 	ldw	r3,-4(fp)
   4390c:	e0bffa17 	ldw	r2,-24(fp)
   43910:	1885c83a 	sub	r2,r3,r2
   43914:	00000606 	br	43930 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   43918:	e0bff817 	ldw	r2,-32(fp)
   4391c:	1090000c 	andi	r2,r2,16384
   43920:	10000226 	beq	r2,zero,4392c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   43924:	00bffd44 	movi	r2,-11
   43928:	00000106 	br	43930 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   4392c:	00bffec4 	movi	r2,-5
}
   43930:	e037883a 	mov	sp,fp
   43934:	df000017 	ldw	fp,0(sp)
   43938:	dec00104 	addi	sp,sp,4
   4393c:	f800283a 	ret

00043940 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   43940:	defff904 	addi	sp,sp,-28
   43944:	df000615 	stw	fp,24(sp)
   43948:	df000604 	addi	fp,sp,24
   4394c:	e13ffd15 	stw	r4,-12(fp)
   43950:	e17ffc15 	stw	r5,-16(fp)
   43954:	e1bffb15 	stw	r6,-20(fp)
   43958:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   4395c:	e0bffd17 	ldw	r2,-12(fp)
   43960:	10800017 	ldw	r2,0(r2)
   43964:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   43968:	e0bffb17 	ldw	r2,-20(fp)
   4396c:	e0fffc17 	ldw	r3,-16(fp)
   43970:	1885883a 	add	r2,r3,r2
   43974:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   43978:	00000e06 	br	439b4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   4397c:	e0bfff17 	ldw	r2,-4(fp)
   43980:	10800104 	addi	r2,r2,4
   43984:	10800037 	ldwio	r2,0(r2)
   43988:	10bfffec 	andhi	r2,r2,65535
   4398c:	10000926 	beq	r2,zero,439b4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   43990:	e0ffff17 	ldw	r3,-4(fp)
   43994:	e0bffc17 	ldw	r2,-16(fp)
   43998:	11000044 	addi	r4,r2,1
   4399c:	e13ffc15 	stw	r4,-16(fp)
   439a0:	10800003 	ldbu	r2,0(r2)
   439a4:	10803fcc 	andi	r2,r2,255
   439a8:	1080201c 	xori	r2,r2,128
   439ac:	10bfe004 	addi	r2,r2,-128
   439b0:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   439b4:	e0fffc17 	ldw	r3,-16(fp)
   439b8:	e0bffe17 	ldw	r2,-8(fp)
   439bc:	18bfef36 	bltu	r3,r2,4397c <altera_avalon_jtag_uart_write+0x3c>

  return count;
   439c0:	e0bffb17 	ldw	r2,-20(fp)
}
   439c4:	e037883a 	mov	sp,fp
   439c8:	df000017 	ldw	fp,0(sp)
   439cc:	dec00104 	addi	sp,sp,4
   439d0:	f800283a 	ret

000439d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   439d4:	defffa04 	addi	sp,sp,-24
   439d8:	dfc00515 	stw	ra,20(sp)
   439dc:	df000415 	stw	fp,16(sp)
   439e0:	df000404 	addi	fp,sp,16
   439e4:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   439e8:	008000c4 	movi	r2,3
   439ec:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   439f0:	e0fffe17 	ldw	r3,-8(fp)
   439f4:	008003f4 	movhi	r2,15
   439f8:	10909004 	addi	r2,r2,16960
   439fc:	1885383a 	mul	r2,r3,r2
   43a00:	100b883a 	mov	r5,r2
   43a04:	0100bef4 	movhi	r4,763
   43a08:	213c2004 	addi	r4,r4,-3968
   43a0c:	0042cc00 	call	42cc0 <__udivsi3>
  big_loops = us / (INT_MAX/
   43a10:	100b883a 	mov	r5,r2
   43a14:	01200034 	movhi	r4,32768
   43a18:	213fffc4 	addi	r4,r4,-1
   43a1c:	0042cc00 	call	42cc0 <__udivsi3>
   43a20:	100b883a 	mov	r5,r2
   43a24:	e13ffc17 	ldw	r4,-16(fp)
   43a28:	0042cc00 	call	42cc0 <__udivsi3>
   43a2c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   43a30:	e0bffd17 	ldw	r2,-12(fp)
   43a34:	10002a26 	beq	r2,zero,43ae0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   43a38:	e03fff15 	stw	zero,-4(fp)
   43a3c:	00001706 	br	43a9c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   43a40:	00a00034 	movhi	r2,32768
   43a44:	10bfffc4 	addi	r2,r2,-1
   43a48:	10bfffc4 	addi	r2,r2,-1
   43a4c:	103ffe1e 	bne	r2,zero,43a48 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   43a50:	e0fffe17 	ldw	r3,-8(fp)
   43a54:	008003f4 	movhi	r2,15
   43a58:	10909004 	addi	r2,r2,16960
   43a5c:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
   43a60:	100b883a 	mov	r5,r2
   43a64:	0100bef4 	movhi	r4,763
   43a68:	213c2004 	addi	r4,r4,-3968
   43a6c:	0042cc00 	call	42cc0 <__udivsi3>
   43a70:	100b883a 	mov	r5,r2
   43a74:	01200034 	movhi	r4,32768
   43a78:	213fffc4 	addi	r4,r4,-1
   43a7c:	0042cc00 	call	42cc0 <__udivsi3>
   43a80:	1007883a 	mov	r3,r2
   43a84:	e0bffc17 	ldw	r2,-16(fp)
   43a88:	10c5c83a 	sub	r2,r2,r3
   43a8c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   43a90:	e0bfff17 	ldw	r2,-4(fp)
   43a94:	10800044 	addi	r2,r2,1
   43a98:	e0bfff15 	stw	r2,-4(fp)
   43a9c:	e0ffff17 	ldw	r3,-4(fp)
   43aa0:	e0bffd17 	ldw	r2,-12(fp)
   43aa4:	18bfe616 	blt	r3,r2,43a40 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43aa8:	e0fffe17 	ldw	r3,-8(fp)
   43aac:	008003f4 	movhi	r2,15
   43ab0:	10909004 	addi	r2,r2,16960
   43ab4:	1885383a 	mul	r2,r3,r2
   43ab8:	100b883a 	mov	r5,r2
   43abc:	0100bef4 	movhi	r4,763
   43ac0:	213c2004 	addi	r4,r4,-3968
   43ac4:	0042cc00 	call	42cc0 <__udivsi3>
   43ac8:	1007883a 	mov	r3,r2
   43acc:	e0bffc17 	ldw	r2,-16(fp)
   43ad0:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   43ad4:	10bfffc4 	addi	r2,r2,-1
   43ad8:	103ffe1e 	bne	r2,zero,43ad4 <alt_busy_sleep+0x100>
   43adc:	00000d06 	br	43b14 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43ae0:	e0fffe17 	ldw	r3,-8(fp)
   43ae4:	008003f4 	movhi	r2,15
   43ae8:	10909004 	addi	r2,r2,16960
   43aec:	1885383a 	mul	r2,r3,r2
   43af0:	100b883a 	mov	r5,r2
   43af4:	0100bef4 	movhi	r4,763
   43af8:	213c2004 	addi	r4,r4,-3968
   43afc:	0042cc00 	call	42cc0 <__udivsi3>
   43b00:	1007883a 	mov	r3,r2
   43b04:	e0bffc17 	ldw	r2,-16(fp)
   43b08:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   43b0c:	10bfffc4 	addi	r2,r2,-1
   43b10:	00bffe16 	blt	zero,r2,43b0c <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   43b14:	0005883a 	mov	r2,zero
}
   43b18:	e037883a 	mov	sp,fp
   43b1c:	dfc00117 	ldw	ra,4(sp)
   43b20:	df000017 	ldw	fp,0(sp)
   43b24:	dec00204 	addi	sp,sp,8
   43b28:	f800283a 	ret

00043b2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   43b2c:	defffe04 	addi	sp,sp,-8
   43b30:	df000115 	stw	fp,4(sp)
   43b34:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43b38:	e03fff15 	stw	zero,-4(fp)
   43b3c:	00000506 	br	43b54 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   43b40:	e0bfff17 	ldw	r2,-4(fp)
   43b44:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43b48:	e0bfff17 	ldw	r2,-4(fp)
   43b4c:	10800804 	addi	r2,r2,32
   43b50:	e0bfff15 	stw	r2,-4(fp)
   43b54:	e0bfff17 	ldw	r2,-4(fp)
   43b58:	10820030 	cmpltui	r2,r2,2048
   43b5c:	103ff81e 	bne	r2,zero,43b40 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   43b60:	0001883a 	nop
   43b64:	0001883a 	nop
   43b68:	e037883a 	mov	sp,fp
   43b6c:	df000017 	ldw	fp,0(sp)
   43b70:	dec00104 	addi	sp,sp,4
   43b74:	f800283a 	ret

00043b78 <alt_get_errno>:
{
   43b78:	defffe04 	addi	sp,sp,-8
   43b7c:	dfc00115 	stw	ra,4(sp)
   43b80:	df000015 	stw	fp,0(sp)
   43b84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b88:	d0a00917 	ldw	r2,-32732(gp)
   43b8c:	10000326 	beq	r2,zero,43b9c <alt_get_errno+0x24>
   43b90:	d0a00917 	ldw	r2,-32732(gp)
   43b94:	103ee83a 	callr	r2
   43b98:	00000106 	br	43ba0 <alt_get_errno+0x28>
   43b9c:	d0a29904 	addi	r2,gp,-30108
}
   43ba0:	e037883a 	mov	sp,fp
   43ba4:	dfc00117 	ldw	ra,4(sp)
   43ba8:	df000017 	ldw	fp,0(sp)
   43bac:	dec00204 	addi	sp,sp,8
   43bb0:	f800283a 	ret

00043bb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   43bb4:	defffa04 	addi	sp,sp,-24
   43bb8:	dfc00515 	stw	ra,20(sp)
   43bbc:	df000415 	stw	fp,16(sp)
   43bc0:	df000404 	addi	fp,sp,16
   43bc4:	e13ffd15 	stw	r4,-12(fp)
   43bc8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   43bcc:	e0bffd17 	ldw	r2,-12(fp)
   43bd0:	10000326 	beq	r2,zero,43be0 <alt_dev_llist_insert+0x2c>
   43bd4:	e0bffd17 	ldw	r2,-12(fp)
   43bd8:	10800217 	ldw	r2,8(r2)
   43bdc:	1000061e 	bne	r2,zero,43bf8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   43be0:	0043b780 	call	43b78 <alt_get_errno>
   43be4:	1007883a 	mov	r3,r2
   43be8:	00800584 	movi	r2,22
   43bec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   43bf0:	00bffa84 	movi	r2,-22
   43bf4:	00001406 	br	43c48 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   43bf8:	e0bffd17 	ldw	r2,-12(fp)
   43bfc:	e0fffc17 	ldw	r3,-16(fp)
   43c00:	e0ffff15 	stw	r3,-4(fp)
   43c04:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   43c08:	e0bffe17 	ldw	r2,-8(fp)
   43c0c:	e0ffff17 	ldw	r3,-4(fp)
   43c10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   43c14:	e0bfff17 	ldw	r2,-4(fp)
   43c18:	10c00017 	ldw	r3,0(r2)
   43c1c:	e0bffe17 	ldw	r2,-8(fp)
   43c20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   43c24:	e0bfff17 	ldw	r2,-4(fp)
   43c28:	10800017 	ldw	r2,0(r2)
   43c2c:	e0fffe17 	ldw	r3,-8(fp)
   43c30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   43c34:	e0bfff17 	ldw	r2,-4(fp)
   43c38:	e0fffe17 	ldw	r3,-8(fp)
   43c3c:	10c00015 	stw	r3,0(r2)
}
   43c40:	0001883a 	nop

  return 0;  
   43c44:	0005883a 	mov	r2,zero
}
   43c48:	e037883a 	mov	sp,fp
   43c4c:	dfc00117 	ldw	ra,4(sp)
   43c50:	df000017 	ldw	fp,0(sp)
   43c54:	dec00204 	addi	sp,sp,8
   43c58:	f800283a 	ret

00043c5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   43c5c:	defffd04 	addi	sp,sp,-12
   43c60:	dfc00215 	stw	ra,8(sp)
   43c64:	df000115 	stw	fp,4(sp)
   43c68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43c6c:	00800134 	movhi	r2,4
   43c70:	10919704 	addi	r2,r2,18012
   43c74:	e0bfff15 	stw	r2,-4(fp)
   43c78:	00000606 	br	43c94 <_do_ctors+0x38>
        (*ctor) (); 
   43c7c:	e0bfff17 	ldw	r2,-4(fp)
   43c80:	10800017 	ldw	r2,0(r2)
   43c84:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43c88:	e0bfff17 	ldw	r2,-4(fp)
   43c8c:	10bfff04 	addi	r2,r2,-4
   43c90:	e0bfff15 	stw	r2,-4(fp)
   43c94:	e0ffff17 	ldw	r3,-4(fp)
   43c98:	00800134 	movhi	r2,4
   43c9c:	10919804 	addi	r2,r2,18016
   43ca0:	18bff62e 	bgeu	r3,r2,43c7c <_do_ctors+0x20>
}
   43ca4:	0001883a 	nop
   43ca8:	0001883a 	nop
   43cac:	e037883a 	mov	sp,fp
   43cb0:	dfc00117 	ldw	ra,4(sp)
   43cb4:	df000017 	ldw	fp,0(sp)
   43cb8:	dec00204 	addi	sp,sp,8
   43cbc:	f800283a 	ret

00043cc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   43cc0:	defffd04 	addi	sp,sp,-12
   43cc4:	dfc00215 	stw	ra,8(sp)
   43cc8:	df000115 	stw	fp,4(sp)
   43ccc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   43cd0:	00800134 	movhi	r2,4
   43cd4:	10919704 	addi	r2,r2,18012
   43cd8:	e0bfff15 	stw	r2,-4(fp)
   43cdc:	00000606 	br	43cf8 <_do_dtors+0x38>
        (*dtor) (); 
   43ce0:	e0bfff17 	ldw	r2,-4(fp)
   43ce4:	10800017 	ldw	r2,0(r2)
   43ce8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   43cec:	e0bfff17 	ldw	r2,-4(fp)
   43cf0:	10bfff04 	addi	r2,r2,-4
   43cf4:	e0bfff15 	stw	r2,-4(fp)
   43cf8:	e0ffff17 	ldw	r3,-4(fp)
   43cfc:	00800134 	movhi	r2,4
   43d00:	10919804 	addi	r2,r2,18016
   43d04:	18bff62e 	bgeu	r3,r2,43ce0 <_do_dtors+0x20>
}
   43d08:	0001883a 	nop
   43d0c:	0001883a 	nop
   43d10:	e037883a 	mov	sp,fp
   43d14:	dfc00117 	ldw	ra,4(sp)
   43d18:	df000017 	ldw	fp,0(sp)
   43d1c:	dec00204 	addi	sp,sp,8
   43d20:	f800283a 	ret

00043d24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   43d24:	defffe04 	addi	sp,sp,-8
   43d28:	dfc00115 	stw	ra,4(sp)
   43d2c:	df000015 	stw	fp,0(sp)
   43d30:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   43d34:	01440004 	movi	r5,4096
   43d38:	0009883a 	mov	r4,zero
   43d3c:	00443280 	call	44328 <alt_icache_flush>
#endif
}
   43d40:	0001883a 	nop
   43d44:	e037883a 	mov	sp,fp
   43d48:	dfc00117 	ldw	ra,4(sp)
   43d4c:	df000017 	ldw	fp,0(sp)
   43d50:	dec00204 	addi	sp,sp,8
   43d54:	f800283a 	ret

00043d58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43d58:	defff904 	addi	sp,sp,-28
   43d5c:	dfc00615 	stw	ra,24(sp)
   43d60:	df000515 	stw	fp,20(sp)
   43d64:	df000504 	addi	fp,sp,20
   43d68:	e13ffe15 	stw	r4,-8(fp)
   43d6c:	e17ffd15 	stw	r5,-12(fp)
   43d70:	e1bffc15 	stw	r6,-16(fp)
   43d74:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   43d78:	e1bffb17 	ldw	r6,-20(fp)
   43d7c:	e17ffc17 	ldw	r5,-16(fp)
   43d80:	e13ffd17 	ldw	r4,-12(fp)
   43d84:	0043f780 	call	43f78 <open>
   43d88:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   43d8c:	e0bfff17 	ldw	r2,-4(fp)
   43d90:	10001716 	blt	r2,zero,43df0 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   43d94:	e0bfff17 	ldw	r2,-4(fp)
   43d98:	10c00324 	muli	r3,r2,12
   43d9c:	00800134 	movhi	r2,4
   43da0:	1885883a 	add	r2,r3,r2
   43da4:	10d3bf17 	ldw	r3,20220(r2)
   43da8:	e0bffe17 	ldw	r2,-8(fp)
   43dac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   43db0:	e0bfff17 	ldw	r2,-4(fp)
   43db4:	10c00324 	muli	r3,r2,12
   43db8:	00800134 	movhi	r2,4
   43dbc:	1885883a 	add	r2,r3,r2
   43dc0:	10d3c017 	ldw	r3,20224(r2)
   43dc4:	e0bffe17 	ldw	r2,-8(fp)
   43dc8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   43dcc:	e0bfff17 	ldw	r2,-4(fp)
   43dd0:	10c00324 	muli	r3,r2,12
   43dd4:	00800134 	movhi	r2,4
   43dd8:	1885883a 	add	r2,r3,r2
   43ddc:	10d3c117 	ldw	r3,20228(r2)
   43de0:	e0bffe17 	ldw	r2,-8(fp)
   43de4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   43de8:	e13fff17 	ldw	r4,-4(fp)
   43dec:	004347c0 	call	4347c <alt_release_fd>
  }
} 
   43df0:	0001883a 	nop
   43df4:	e037883a 	mov	sp,fp
   43df8:	dfc00117 	ldw	ra,4(sp)
   43dfc:	df000017 	ldw	fp,0(sp)
   43e00:	dec00204 	addi	sp,sp,8
   43e04:	f800283a 	ret

00043e08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   43e08:	defffb04 	addi	sp,sp,-20
   43e0c:	dfc00415 	stw	ra,16(sp)
   43e10:	df000315 	stw	fp,12(sp)
   43e14:	df000304 	addi	fp,sp,12
   43e18:	e13fff15 	stw	r4,-4(fp)
   43e1c:	e17ffe15 	stw	r5,-8(fp)
   43e20:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   43e24:	01c07fc4 	movi	r7,511
   43e28:	01800044 	movi	r6,1
   43e2c:	e17fff17 	ldw	r5,-4(fp)
   43e30:	01000134 	movhi	r4,4
   43e34:	2113c204 	addi	r4,r4,20232
   43e38:	0043d580 	call	43d58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   43e3c:	01c07fc4 	movi	r7,511
   43e40:	000d883a 	mov	r6,zero
   43e44:	e17ffe17 	ldw	r5,-8(fp)
   43e48:	01000134 	movhi	r4,4
   43e4c:	2113bf04 	addi	r4,r4,20220
   43e50:	0043d580 	call	43d58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   43e54:	01c07fc4 	movi	r7,511
   43e58:	01800044 	movi	r6,1
   43e5c:	e17ffd17 	ldw	r5,-12(fp)
   43e60:	01000134 	movhi	r4,4
   43e64:	2113c504 	addi	r4,r4,20244
   43e68:	0043d580 	call	43d58 <alt_open_fd>
}  
   43e6c:	0001883a 	nop
   43e70:	e037883a 	mov	sp,fp
   43e74:	dfc00117 	ldw	ra,4(sp)
   43e78:	df000017 	ldw	fp,0(sp)
   43e7c:	dec00204 	addi	sp,sp,8
   43e80:	f800283a 	ret

00043e84 <alt_get_errno>:
{
   43e84:	defffe04 	addi	sp,sp,-8
   43e88:	dfc00115 	stw	ra,4(sp)
   43e8c:	df000015 	stw	fp,0(sp)
   43e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43e94:	d0a00917 	ldw	r2,-32732(gp)
   43e98:	10000326 	beq	r2,zero,43ea8 <alt_get_errno+0x24>
   43e9c:	d0a00917 	ldw	r2,-32732(gp)
   43ea0:	103ee83a 	callr	r2
   43ea4:	00000106 	br	43eac <alt_get_errno+0x28>
   43ea8:	d0a29904 	addi	r2,gp,-30108
}
   43eac:	e037883a 	mov	sp,fp
   43eb0:	dfc00117 	ldw	ra,4(sp)
   43eb4:	df000017 	ldw	fp,0(sp)
   43eb8:	dec00204 	addi	sp,sp,8
   43ebc:	f800283a 	ret

00043ec0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   43ec0:	defffd04 	addi	sp,sp,-12
   43ec4:	df000215 	stw	fp,8(sp)
   43ec8:	df000204 	addi	fp,sp,8
   43ecc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   43ed0:	e0bffe17 	ldw	r2,-8(fp)
   43ed4:	10800217 	ldw	r2,8(r2)
   43ed8:	10d00034 	orhi	r3,r2,16384
   43edc:	e0bffe17 	ldw	r2,-8(fp)
   43ee0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43ee4:	e03fff15 	stw	zero,-4(fp)
   43ee8:	00001a06 	br	43f54 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   43eec:	e0bfff17 	ldw	r2,-4(fp)
   43ef0:	10c00324 	muli	r3,r2,12
   43ef4:	00800134 	movhi	r2,4
   43ef8:	1885883a 	add	r2,r3,r2
   43efc:	10d3bf17 	ldw	r3,20220(r2)
   43f00:	e0bffe17 	ldw	r2,-8(fp)
   43f04:	10800017 	ldw	r2,0(r2)
   43f08:	18800f1e 	bne	r3,r2,43f48 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43f0c:	e0bfff17 	ldw	r2,-4(fp)
   43f10:	10c00324 	muli	r3,r2,12
   43f14:	00800134 	movhi	r2,4
   43f18:	1885883a 	add	r2,r3,r2
   43f1c:	1093c117 	ldw	r2,20228(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   43f20:	1000090e 	bge	r2,zero,43f48 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   43f24:	e0bfff17 	ldw	r2,-4(fp)
   43f28:	10c00324 	muli	r3,r2,12
   43f2c:	00800134 	movhi	r2,4
   43f30:	1093bf04 	addi	r2,r2,20220
   43f34:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43f38:	e0fffe17 	ldw	r3,-8(fp)
   43f3c:	18800226 	beq	r3,r2,43f48 <alt_file_locked+0x88>
    {
      return -EACCES;
   43f40:	00bffcc4 	movi	r2,-13
   43f44:	00000806 	br	43f68 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   43f48:	e0bfff17 	ldw	r2,-4(fp)
   43f4c:	10800044 	addi	r2,r2,1
   43f50:	e0bfff15 	stw	r2,-4(fp)
   43f54:	d0a00817 	ldw	r2,-32736(gp)
   43f58:	1007883a 	mov	r3,r2
   43f5c:	e0bfff17 	ldw	r2,-4(fp)
   43f60:	18bfe22e 	bgeu	r3,r2,43eec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   43f64:	0005883a 	mov	r2,zero
}
   43f68:	e037883a 	mov	sp,fp
   43f6c:	df000017 	ldw	fp,0(sp)
   43f70:	dec00104 	addi	sp,sp,4
   43f74:	f800283a 	ret

00043f78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   43f78:	defff604 	addi	sp,sp,-40
   43f7c:	dfc00915 	stw	ra,36(sp)
   43f80:	df000815 	stw	fp,32(sp)
   43f84:	df000804 	addi	fp,sp,32
   43f88:	e13ffa15 	stw	r4,-24(fp)
   43f8c:	e17ff915 	stw	r5,-28(fp)
   43f90:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   43f94:	00bfffc4 	movi	r2,-1
   43f98:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   43f9c:	00bffb44 	movi	r2,-19
   43fa0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   43fa4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   43fa8:	d1600604 	addi	r5,gp,-32744
   43fac:	e13ffa17 	ldw	r4,-24(fp)
   43fb0:	00440f00 	call	440f0 <alt_find_dev>
   43fb4:	e0bfff15 	stw	r2,-4(fp)
   43fb8:	e0bfff17 	ldw	r2,-4(fp)
   43fbc:	1000051e 	bne	r2,zero,43fd4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   43fc0:	e13ffa17 	ldw	r4,-24(fp)
   43fc4:	00441800 	call	44180 <alt_find_file>
   43fc8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   43fcc:	00800044 	movi	r2,1
   43fd0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   43fd4:	e0bfff17 	ldw	r2,-4(fp)
   43fd8:	10002926 	beq	r2,zero,44080 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   43fdc:	e13fff17 	ldw	r4,-4(fp)
   43fe0:	00442880 	call	44288 <alt_get_fd>
   43fe4:	e0bffe15 	stw	r2,-8(fp)
   43fe8:	e0bffe17 	ldw	r2,-8(fp)
   43fec:	1000030e 	bge	r2,zero,43ffc <open+0x84>
    {
      status = index;
   43ff0:	e0bffe17 	ldw	r2,-8(fp)
   43ff4:	e0bffd15 	stw	r2,-12(fp)
   43ff8:	00002306 	br	44088 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   43ffc:	e0bffe17 	ldw	r2,-8(fp)
   44000:	10c00324 	muli	r3,r2,12
   44004:	00800134 	movhi	r2,4
   44008:	1093bf04 	addi	r2,r2,20220
   4400c:	1885883a 	add	r2,r3,r2
   44010:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44014:	e0fff917 	ldw	r3,-28(fp)
   44018:	00900034 	movhi	r2,16384
   4401c:	10bfffc4 	addi	r2,r2,-1
   44020:	1886703a 	and	r3,r3,r2
   44024:	e0bffb17 	ldw	r2,-20(fp)
   44028:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4402c:	e0bffc17 	ldw	r2,-16(fp)
   44030:	1000051e 	bne	r2,zero,44048 <open+0xd0>
   44034:	e13ffb17 	ldw	r4,-20(fp)
   44038:	0043ec00 	call	43ec0 <alt_file_locked>
   4403c:	e0bffd15 	stw	r2,-12(fp)
   44040:	e0bffd17 	ldw	r2,-12(fp)
   44044:	10001016 	blt	r2,zero,44088 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44048:	e0bfff17 	ldw	r2,-4(fp)
   4404c:	10800317 	ldw	r2,12(r2)
   44050:	10000826 	beq	r2,zero,44074 <open+0xfc>
   44054:	e0bfff17 	ldw	r2,-4(fp)
   44058:	10800317 	ldw	r2,12(r2)
   4405c:	e1fff817 	ldw	r7,-32(fp)
   44060:	e1bff917 	ldw	r6,-28(fp)
   44064:	e17ffa17 	ldw	r5,-24(fp)
   44068:	e13ffb17 	ldw	r4,-20(fp)
   4406c:	103ee83a 	callr	r2
   44070:	00000106 	br	44078 <open+0x100>
   44074:	0005883a 	mov	r2,zero
   44078:	e0bffd15 	stw	r2,-12(fp)
   4407c:	00000206 	br	44088 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44080:	00bffb44 	movi	r2,-19
   44084:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44088:	e0bffd17 	ldw	r2,-12(fp)
   4408c:	1000090e 	bge	r2,zero,440b4 <open+0x13c>
  {
    alt_release_fd (index);  
   44090:	e13ffe17 	ldw	r4,-8(fp)
   44094:	004347c0 	call	4347c <alt_release_fd>
    ALT_ERRNO = -status;
   44098:	0043e840 	call	43e84 <alt_get_errno>
   4409c:	1007883a 	mov	r3,r2
   440a0:	e0bffd17 	ldw	r2,-12(fp)
   440a4:	0085c83a 	sub	r2,zero,r2
   440a8:	18800015 	stw	r2,0(r3)
    return -1;
   440ac:	00bfffc4 	movi	r2,-1
   440b0:	00000106 	br	440b8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   440b4:	e0bffe17 	ldw	r2,-8(fp)
}
   440b8:	e037883a 	mov	sp,fp
   440bc:	dfc00117 	ldw	ra,4(sp)
   440c0:	df000017 	ldw	fp,0(sp)
   440c4:	dec00204 	addi	sp,sp,8
   440c8:	f800283a 	ret

000440cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   440cc:	deffff04 	addi	sp,sp,-4
   440d0:	df000015 	stw	fp,0(sp)
   440d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   440d8:	000170fa 	wrctl	ienable,zero
}
   440dc:	0001883a 	nop
   440e0:	e037883a 	mov	sp,fp
   440e4:	df000017 	ldw	fp,0(sp)
   440e8:	dec00104 	addi	sp,sp,4
   440ec:	f800283a 	ret

000440f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   440f0:	defffa04 	addi	sp,sp,-24
   440f4:	dfc00515 	stw	ra,20(sp)
   440f8:	df000415 	stw	fp,16(sp)
   440fc:	df000404 	addi	fp,sp,16
   44100:	e13ffd15 	stw	r4,-12(fp)
   44104:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44108:	e0bffc17 	ldw	r2,-16(fp)
   4410c:	10800017 	ldw	r2,0(r2)
   44110:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44114:	e13ffd17 	ldw	r4,-12(fp)
   44118:	00401e80 	call	401e8 <strlen>
   4411c:	10800044 	addi	r2,r2,1
   44120:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44124:	00000d06 	br	4415c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44128:	e0bfff17 	ldw	r2,-4(fp)
   4412c:	10800217 	ldw	r2,8(r2)
   44130:	e0fffe17 	ldw	r3,-8(fp)
   44134:	180d883a 	mov	r6,r3
   44138:	e17ffd17 	ldw	r5,-12(fp)
   4413c:	1009883a 	mov	r4,r2
   44140:	00444000 	call	44400 <memcmp>
   44144:	1000021e 	bne	r2,zero,44150 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44148:	e0bfff17 	ldw	r2,-4(fp)
   4414c:	00000706 	br	4416c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44150:	e0bfff17 	ldw	r2,-4(fp)
   44154:	10800017 	ldw	r2,0(r2)
   44158:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   4415c:	e0ffff17 	ldw	r3,-4(fp)
   44160:	e0bffc17 	ldw	r2,-16(fp)
   44164:	18bff01e 	bne	r3,r2,44128 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   44168:	0005883a 	mov	r2,zero
}
   4416c:	e037883a 	mov	sp,fp
   44170:	dfc00117 	ldw	ra,4(sp)
   44174:	df000017 	ldw	fp,0(sp)
   44178:	dec00204 	addi	sp,sp,8
   4417c:	f800283a 	ret

00044180 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   44180:	defffb04 	addi	sp,sp,-20
   44184:	dfc00415 	stw	ra,16(sp)
   44188:	df000315 	stw	fp,12(sp)
   4418c:	df000304 	addi	fp,sp,12
   44190:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   44194:	d0a00417 	ldw	r2,-32752(gp)
   44198:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4419c:	00003106 	br	44264 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   441a0:	e0bfff17 	ldw	r2,-4(fp)
   441a4:	10800217 	ldw	r2,8(r2)
   441a8:	1009883a 	mov	r4,r2
   441ac:	00401e80 	call	401e8 <strlen>
   441b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   441b4:	e0bfff17 	ldw	r2,-4(fp)
   441b8:	10c00217 	ldw	r3,8(r2)
   441bc:	e0bffe17 	ldw	r2,-8(fp)
   441c0:	10bfffc4 	addi	r2,r2,-1
   441c4:	1885883a 	add	r2,r3,r2
   441c8:	10800003 	ldbu	r2,0(r2)
   441cc:	10803fcc 	andi	r2,r2,255
   441d0:	1080201c 	xori	r2,r2,128
   441d4:	10bfe004 	addi	r2,r2,-128
   441d8:	10800bd8 	cmpnei	r2,r2,47
   441dc:	1000031e 	bne	r2,zero,441ec <alt_find_file+0x6c>
    {
      len -= 1;
   441e0:	e0bffe17 	ldw	r2,-8(fp)
   441e4:	10bfffc4 	addi	r2,r2,-1
   441e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   441ec:	e0bffe17 	ldw	r2,-8(fp)
   441f0:	e0fffd17 	ldw	r3,-12(fp)
   441f4:	1885883a 	add	r2,r3,r2
   441f8:	10800003 	ldbu	r2,0(r2)
   441fc:	10803fcc 	andi	r2,r2,255
   44200:	1080201c 	xori	r2,r2,128
   44204:	10bfe004 	addi	r2,r2,-128
   44208:	10800be0 	cmpeqi	r2,r2,47
   4420c:	1000081e 	bne	r2,zero,44230 <alt_find_file+0xb0>
   44210:	e0bffe17 	ldw	r2,-8(fp)
   44214:	e0fffd17 	ldw	r3,-12(fp)
   44218:	1885883a 	add	r2,r3,r2
   4421c:	10800003 	ldbu	r2,0(r2)
   44220:	10803fcc 	andi	r2,r2,255
   44224:	1080201c 	xori	r2,r2,128
   44228:	10bfe004 	addi	r2,r2,-128
   4422c:	10000a1e 	bne	r2,zero,44258 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   44230:	e0bfff17 	ldw	r2,-4(fp)
   44234:	10800217 	ldw	r2,8(r2)
   44238:	e0fffe17 	ldw	r3,-8(fp)
   4423c:	180d883a 	mov	r6,r3
   44240:	e17ffd17 	ldw	r5,-12(fp)
   44244:	1009883a 	mov	r4,r2
   44248:	00444000 	call	44400 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   4424c:	1000021e 	bne	r2,zero,44258 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   44250:	e0bfff17 	ldw	r2,-4(fp)
   44254:	00000706 	br	44274 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   44258:	e0bfff17 	ldw	r2,-4(fp)
   4425c:	10800017 	ldw	r2,0(r2)
   44260:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   44264:	e0ffff17 	ldw	r3,-4(fp)
   44268:	d0a00404 	addi	r2,gp,-32752
   4426c:	18bfcc1e 	bne	r3,r2,441a0 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   44270:	0005883a 	mov	r2,zero
}
   44274:	e037883a 	mov	sp,fp
   44278:	dfc00117 	ldw	ra,4(sp)
   4427c:	df000017 	ldw	fp,0(sp)
   44280:	dec00204 	addi	sp,sp,8
   44284:	f800283a 	ret

00044288 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   44288:	defffc04 	addi	sp,sp,-16
   4428c:	df000315 	stw	fp,12(sp)
   44290:	df000304 	addi	fp,sp,12
   44294:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   44298:	00bffa04 	movi	r2,-24
   4429c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   442a0:	e03fff15 	stw	zero,-4(fp)
   442a4:	00001706 	br	44304 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   442a8:	e0bfff17 	ldw	r2,-4(fp)
   442ac:	10c00324 	muli	r3,r2,12
   442b0:	00800134 	movhi	r2,4
   442b4:	1885883a 	add	r2,r3,r2
   442b8:	1093bf17 	ldw	r2,20220(r2)
   442bc:	10000e1e 	bne	r2,zero,442f8 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   442c0:	e0bfff17 	ldw	r2,-4(fp)
   442c4:	11000324 	muli	r4,r2,12
   442c8:	e0fffd17 	ldw	r3,-12(fp)
   442cc:	00800134 	movhi	r2,4
   442d0:	2085883a 	add	r2,r4,r2
   442d4:	10d3bf15 	stw	r3,20220(r2)
      if (i > alt_max_fd)
   442d8:	d0e00817 	ldw	r3,-32736(gp)
   442dc:	e0bfff17 	ldw	r2,-4(fp)
   442e0:	1880020e 	bge	r3,r2,442ec <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   442e4:	e0bfff17 	ldw	r2,-4(fp)
   442e8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   442ec:	e0bfff17 	ldw	r2,-4(fp)
   442f0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   442f4:	00000706 	br	44314 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   442f8:	e0bfff17 	ldw	r2,-4(fp)
   442fc:	10800044 	addi	r2,r2,1
   44300:	e0bfff15 	stw	r2,-4(fp)
   44304:	e0bfff17 	ldw	r2,-4(fp)
   44308:	10800810 	cmplti	r2,r2,32
   4430c:	103fe61e 	bne	r2,zero,442a8 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   44310:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   44314:	e0bffe17 	ldw	r2,-8(fp)
}
   44318:	e037883a 	mov	sp,fp
   4431c:	df000017 	ldw	fp,0(sp)
   44320:	dec00104 	addi	sp,sp,4
   44324:	f800283a 	ret

00044328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   44328:	defffb04 	addi	sp,sp,-20
   4432c:	df000415 	stw	fp,16(sp)
   44330:	df000404 	addi	fp,sp,16
   44334:	e13ffd15 	stw	r4,-12(fp)
   44338:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4433c:	e0bffc17 	ldw	r2,-16(fp)
   44340:	10840070 	cmpltui	r2,r2,4097
   44344:	1000021e 	bne	r2,zero,44350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   44348:	00840004 	movi	r2,4096
   4434c:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   44350:	e0fffd17 	ldw	r3,-12(fp)
   44354:	e0bffc17 	ldw	r2,-16(fp)
   44358:	1885883a 	add	r2,r3,r2
   4435c:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44360:	e0bffd17 	ldw	r2,-12(fp)
   44364:	e0bfff15 	stw	r2,-4(fp)
   44368:	00000506 	br	44380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4436c:	e0bfff17 	ldw	r2,-4(fp)
   44370:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44374:	e0bfff17 	ldw	r2,-4(fp)
   44378:	10800804 	addi	r2,r2,32
   4437c:	e0bfff15 	stw	r2,-4(fp)
   44380:	e0ffff17 	ldw	r3,-4(fp)
   44384:	e0bffe17 	ldw	r2,-8(fp)
   44388:	18bff836 	bltu	r3,r2,4436c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4438c:	e0bffd17 	ldw	r2,-12(fp)
   44390:	108007cc 	andi	r2,r2,31
   44394:	10000226 	beq	r2,zero,443a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   44398:	e0bfff17 	ldw	r2,-4(fp)
   4439c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   443a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   443a4:	0001883a 	nop
   443a8:	e037883a 	mov	sp,fp
   443ac:	df000017 	ldw	fp,0(sp)
   443b0:	dec00104 	addi	sp,sp,4
   443b4:	f800283a 	ret

000443b8 <atexit>:
   443b8:	200b883a 	mov	r5,r4
   443bc:	000f883a 	mov	r7,zero
   443c0:	000d883a 	mov	r6,zero
   443c4:	0009883a 	mov	r4,zero
   443c8:	00444781 	jmpi	44478 <__register_exitproc>

000443cc <exit>:
   443cc:	defffe04 	addi	sp,sp,-8
   443d0:	000b883a 	mov	r5,zero
   443d4:	dc000015 	stw	r16,0(sp)
   443d8:	dfc00115 	stw	ra,4(sp)
   443dc:	2021883a 	mov	r16,r4
   443e0:	00445080 	call	44508 <__call_exitprocs>
   443e4:	00800134 	movhi	r2,4
   443e8:	11142a17 	ldw	r4,20648(r2)
   443ec:	20800f17 	ldw	r2,60(r4)
   443f0:	10000126 	beq	r2,zero,443f8 <exit+0x2c>
   443f4:	103ee83a 	callr	r2
   443f8:	8009883a 	mov	r4,r16
   443fc:	00446280 	call	44628 <_exit>

00044400 <memcmp>:
   44400:	30800130 	cmpltui	r2,r6,4
   44404:	10000b1e 	bne	r2,zero,44434 <memcmp+0x34>
   44408:	2144b03a 	or	r2,r4,r5
   4440c:	108000cc 	andi	r2,r2,3
   44410:	1000171e 	bne	r2,zero,44470 <memcmp+0x70>
   44414:	20c00017 	ldw	r3,0(r4)
   44418:	28800017 	ldw	r2,0(r5)
   4441c:	1880141e 	bne	r3,r2,44470 <memcmp+0x70>
   44420:	31bfff04 	addi	r6,r6,-4
   44424:	30800128 	cmpgeui	r2,r6,4
   44428:	21000104 	addi	r4,r4,4
   4442c:	29400104 	addi	r5,r5,4
   44430:	103ff81e 	bne	r2,zero,44414 <memcmp+0x14>
   44434:	30bfffc4 	addi	r2,r6,-1
   44438:	30000b26 	beq	r6,zero,44468 <memcmp+0x68>
   4443c:	11800044 	addi	r6,r2,1
   44440:	298d883a 	add	r6,r5,r6
   44444:	00000106 	br	4444c <memcmp+0x4c>
   44448:	29800726 	beq	r5,r6,44468 <memcmp+0x68>
   4444c:	20800003 	ldbu	r2,0(r4)
   44450:	28c00003 	ldbu	r3,0(r5)
   44454:	21000044 	addi	r4,r4,1
   44458:	29400044 	addi	r5,r5,1
   4445c:	10fffa26 	beq	r2,r3,44448 <memcmp+0x48>
   44460:	10c5c83a 	sub	r2,r2,r3
   44464:	f800283a 	ret
   44468:	0005883a 	mov	r2,zero
   4446c:	f800283a 	ret
   44470:	30bfffc4 	addi	r2,r6,-1
   44474:	003ff106 	br	4443c <memcmp+0x3c>

00044478 <__register_exitproc>:
   44478:	00800134 	movhi	r2,4
   4447c:	10d42a17 	ldw	r3,20648(r2)
   44480:	18805217 	ldw	r2,328(r3)
   44484:	10001726 	beq	r2,zero,444e4 <__register_exitproc+0x6c>
   44488:	10c00117 	ldw	r3,4(r2)
   4448c:	1a000808 	cmpgei	r8,r3,32
   44490:	40001b1e 	bne	r8,zero,44500 <__register_exitproc+0x88>
   44494:	20000b26 	beq	r4,zero,444c4 <__register_exitproc+0x4c>
   44498:	181090ba 	slli	r8,r3,2
   4449c:	02400044 	movi	r9,1
   444a0:	48d2983a 	sll	r9,r9,r3
   444a4:	1211883a 	add	r8,r2,r8
   444a8:	41802215 	stw	r6,136(r8)
   444ac:	11806217 	ldw	r6,392(r2)
   444b0:	21000098 	cmpnei	r4,r4,2
   444b4:	324cb03a 	or	r6,r6,r9
   444b8:	11806215 	stw	r6,392(r2)
   444bc:	41c04215 	stw	r7,264(r8)
   444c0:	20000b26 	beq	r4,zero,444f0 <__register_exitproc+0x78>
   444c4:	19000084 	addi	r4,r3,2
   444c8:	200890ba 	slli	r4,r4,2
   444cc:	18c00044 	addi	r3,r3,1
   444d0:	10c00115 	stw	r3,4(r2)
   444d4:	1105883a 	add	r2,r2,r4
   444d8:	11400015 	stw	r5,0(r2)
   444dc:	0005883a 	mov	r2,zero
   444e0:	f800283a 	ret
   444e4:	18805304 	addi	r2,r3,332
   444e8:	18805215 	stw	r2,328(r3)
   444ec:	003fe606 	br	44488 <__register_exitproc+0x10>
   444f0:	11006317 	ldw	r4,396(r2)
   444f4:	2252b03a 	or	r9,r4,r9
   444f8:	12406315 	stw	r9,396(r2)
   444fc:	003ff106 	br	444c4 <__register_exitproc+0x4c>
   44500:	00bfffc4 	movi	r2,-1
   44504:	f800283a 	ret

00044508 <__call_exitprocs>:
   44508:	defff704 	addi	sp,sp,-36
   4450c:	00800134 	movhi	r2,4
   44510:	dcc00315 	stw	r19,12(sp)
   44514:	14d42a17 	ldw	r19,20648(r2)
   44518:	dc800215 	stw	r18,8(sp)
   4451c:	dfc00815 	stw	ra,32(sp)
   44520:	9c805217 	ldw	r18,328(r19)
   44524:	ddc00715 	stw	r23,28(sp)
   44528:	dd800615 	stw	r22,24(sp)
   4452c:	dd400515 	stw	r21,20(sp)
   44530:	dd000415 	stw	r20,16(sp)
   44534:	dc400115 	stw	r17,4(sp)
   44538:	dc000015 	stw	r16,0(sp)
   4453c:	90001026 	beq	r18,zero,44580 <__call_exitprocs+0x78>
   44540:	202b883a 	mov	r21,r4
   44544:	282d883a 	mov	r22,r5
   44548:	05000044 	movi	r20,1
   4454c:	94000117 	ldw	r16,4(r18)
   44550:	847fffc4 	addi	r17,r16,-1
   44554:	88000a16 	blt	r17,zero,44580 <__call_exitprocs+0x78>
   44558:	84000044 	addi	r16,r16,1
   4455c:	802090ba 	slli	r16,r16,2
   44560:	9421883a 	add	r16,r18,r16
   44564:	b0001126 	beq	r22,zero,445ac <__call_exitprocs+0xa4>
   44568:	80804017 	ldw	r2,256(r16)
   4456c:	15800f26 	beq	r2,r22,445ac <__call_exitprocs+0xa4>
   44570:	8c7fffc4 	addi	r17,r17,-1
   44574:	88bfffd8 	cmpnei	r2,r17,-1
   44578:	843fff04 	addi	r16,r16,-4
   4457c:	103ff91e 	bne	r2,zero,44564 <__call_exitprocs+0x5c>
   44580:	dfc00817 	ldw	ra,32(sp)
   44584:	ddc00717 	ldw	r23,28(sp)
   44588:	dd800617 	ldw	r22,24(sp)
   4458c:	dd400517 	ldw	r21,20(sp)
   44590:	dd000417 	ldw	r20,16(sp)
   44594:	dcc00317 	ldw	r19,12(sp)
   44598:	dc800217 	ldw	r18,8(sp)
   4459c:	dc400117 	ldw	r17,4(sp)
   445a0:	dc000017 	ldw	r16,0(sp)
   445a4:	dec00904 	addi	sp,sp,36
   445a8:	f800283a 	ret
   445ac:	90800117 	ldw	r2,4(r18)
   445b0:	81800017 	ldw	r6,0(r16)
   445b4:	10bfffc4 	addi	r2,r2,-1
   445b8:	14401726 	beq	r2,r17,44618 <__call_exitprocs+0x110>
   445bc:	80000015 	stw	zero,0(r16)
   445c0:	303feb26 	beq	r6,zero,44570 <__call_exitprocs+0x68>
   445c4:	a446983a 	sll	r3,r20,r17
   445c8:	90806217 	ldw	r2,392(r18)
   445cc:	95c00117 	ldw	r23,4(r18)
   445d0:	1884703a 	and	r2,r3,r2
   445d4:	1000081e 	bne	r2,zero,445f8 <__call_exitprocs+0xf0>
   445d8:	303ee83a 	callr	r6
   445dc:	90c00117 	ldw	r3,4(r18)
   445e0:	98805217 	ldw	r2,328(r19)
   445e4:	1dc0011e 	bne	r3,r23,445ec <__call_exitprocs+0xe4>
   445e8:	90bfe126 	beq	r18,r2,44570 <__call_exitprocs+0x68>
   445ec:	103fe426 	beq	r2,zero,44580 <__call_exitprocs+0x78>
   445f0:	1025883a 	mov	r18,r2
   445f4:	003fd506 	br	4454c <__call_exitprocs+0x44>
   445f8:	90806317 	ldw	r2,396(r18)
   445fc:	81002017 	ldw	r4,128(r16)
   44600:	1886703a 	and	r3,r3,r2
   44604:	1800061e 	bne	r3,zero,44620 <__call_exitprocs+0x118>
   44608:	200b883a 	mov	r5,r4
   4460c:	a809883a 	mov	r4,r21
   44610:	303ee83a 	callr	r6
   44614:	003ff106 	br	445dc <__call_exitprocs+0xd4>
   44618:	94400115 	stw	r17,4(r18)
   4461c:	003fe806 	br	445c0 <__call_exitprocs+0xb8>
   44620:	303ee83a 	callr	r6
   44624:	003fed06 	br	445dc <__call_exitprocs+0xd4>

00044628 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   44628:	defffd04 	addi	sp,sp,-12
   4462c:	df000215 	stw	fp,8(sp)
   44630:	df000204 	addi	fp,sp,8
   44634:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   44638:	0001883a 	nop
   4463c:	e0bffe17 	ldw	r2,-8(fp)
   44640:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   44644:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   44648:	10000226 	beq	r2,zero,44654 <_exit+0x2c>
    ALT_SIM_FAIL();
   4464c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   44650:	00000106 	br	44658 <_exit+0x30>
    ALT_SIM_PASS();
   44654:	002af0b0 	cmpltui	zero,zero,43970
}
   44658:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4465c:	003fff06 	br	4465c <_exit+0x34>
